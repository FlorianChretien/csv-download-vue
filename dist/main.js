/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/index.js?!./src/CsvDownload.vue?vue&type=script&lang=js&":
/*!****************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./src/CsvDownload.vue?vue&type=script&lang=js& ***!
  \****************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _json2csv = __webpack_require__(/*! json2csv */ \"./node_modules/json2csv/dist/json2csv.umd.js\");\n\nvar _json2csv2 = _interopRequireDefault(_json2csv);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//\n//\n//\n//\n//\n//\n//\n//\nexports.default = {\n  props: {\n    fields: undefined,\n    data: undefined,\n    downloadName: {\n      default: 'export.csv'\n    }\n  },\n  computed: {\n    downloadUrl: function downloadUrl() {\n      var fields = this.fields;\n\n      var csv = _json2csv2.default.parse(this.data, {\n        fields: fields,\n        delimiter: ';',\n        withBOM: true\n      });\n\n      return this.data.length > 0 ? \"data:text/csv,\" + encodeURIComponent(csv) : 'javascript:void(0);';\n    }\n  }\n};\n\n//# sourceURL=webpack:///./src/CsvDownload.vue?./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options");

/***/ }),

/***/ "./node_modules/json2csv/dist/json2csv.umd.js":
/*!****************************************************!*\
  !*** ./node_modules/json2csv/dist/json2csv.umd.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {(function (global, factory) {\n             true ? factory(exports) :\n            undefined;\n}(this, (function (exports) { 'use strict';\n\n            var global$1 = (typeof global !== \"undefined\" ? global :\n                        typeof self !== \"undefined\" ? self :\n                        typeof window !== \"undefined\" ? window : {});\n\n            /*\n            The MIT License (MIT)\n\n            Copyright (c) 2016 CoderPuppy\n\n            Permission is hereby granted, free of charge, to any person obtaining a copy\n            of this software and associated documentation files (the \"Software\"), to deal\n            in the Software without restriction, including without limitation the rights\n            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n            copies of the Software, and to permit persons to whom the Software is\n            furnished to do so, subject to the following conditions:\n\n            The above copyright notice and this permission notice shall be included in all\n            copies or substantial portions of the Software.\n\n            THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n            SOFTWARE.\n\n            */\n            var _endianness;\n            function endianness() {\n              if (typeof _endianness === 'undefined') {\n                var a = new ArrayBuffer(2);\n                var b = new Uint8Array(a);\n                var c = new Uint16Array(a);\n                b[0] = 1;\n                b[1] = 2;\n                if (c[0] === 258) {\n                  _endianness = 'BE';\n                } else if (c[0] === 513){\n                  _endianness = 'LE';\n                } else {\n                  throw new Error('unable to figure out endianess');\n                }\n              }\n              return _endianness;\n            }\n\n            function hostname() {\n              if (typeof global$1.location !== 'undefined') {\n                return global$1.location.hostname\n              } else return '';\n            }\n\n            function loadavg() {\n              return [];\n            }\n\n            function uptime() {\n              return 0;\n            }\n\n            function freemem() {\n              return Number.MAX_VALUE;\n            }\n\n            function totalmem() {\n              return Number.MAX_VALUE;\n            }\n\n            function cpus() {\n              return [];\n            }\n\n            function type() {\n              return 'Browser';\n            }\n\n            function release () {\n              if (typeof global$1.navigator !== 'undefined') {\n                return global$1.navigator.appVersion;\n              }\n              return '';\n            }\n\n            function networkInterfaces(){}\n            function getNetworkInterfaces(){}\n\n            function arch() {\n              return 'javascript';\n            }\n\n            function platform() {\n              return 'browser';\n            }\n\n            function tmpDir() {\n              return '/tmp';\n            }\n            var tmpdir = tmpDir;\n\n            var EOL = '\\n';\n            var os = {\n              EOL: EOL,\n              tmpdir: tmpdir,\n              tmpDir: tmpDir,\n              networkInterfaces:networkInterfaces,\n              getNetworkInterfaces: getNetworkInterfaces,\n              release: release,\n              type: type,\n              cpus: cpus,\n              totalmem: totalmem,\n              freemem: freemem,\n              uptime: uptime,\n              loadavg: loadavg,\n              hostname: hostname,\n              endianness: endianness,\n            };\n\n            var os$1 = /*#__PURE__*/Object.freeze({\n                        endianness: endianness,\n                        hostname: hostname,\n                        loadavg: loadavg,\n                        uptime: uptime,\n                        freemem: freemem,\n                        totalmem: totalmem,\n                        cpus: cpus,\n                        type: type,\n                        release: release,\n                        networkInterfaces: networkInterfaces,\n                        getNetworkInterfaces: getNetworkInterfaces,\n                        arch: arch,\n                        platform: platform,\n                        tmpDir: tmpDir,\n                        tmpdir: tmpdir,\n                        EOL: EOL,\n                        default: os\n            });\n\n            var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n            function createCommonjsModule(fn, module) {\n            \treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n            }\n\n            /**\n             * lodash (Custom Build) <https://lodash.com/>\n             * Build: `lodash modularize exports=\"npm\" -o ./`\n             * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n             * Released under MIT license <https://lodash.com/license>\n             * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n             * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n             */\n\n            /** Used as the `TypeError` message for \"Functions\" methods. */\n            var FUNC_ERROR_TEXT = 'Expected a function';\n\n            /** Used to stand-in for `undefined` hash values. */\n            var HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n            /** Used as references for various `Number` constants. */\n            var INFINITY = 1 / 0;\n\n            /** `Object#toString` result references. */\n            var funcTag = '[object Function]',\n                genTag = '[object GeneratorFunction]',\n                symbolTag = '[object Symbol]';\n\n            /** Used to match property names within property paths. */\n            var reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n                reIsPlainProp = /^\\w*$/,\n                reLeadingDot = /^\\./,\n                rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n            /**\n             * Used to match `RegExp`\n             * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n             */\n            var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n            /** Used to match backslashes in property paths. */\n            var reEscapeChar = /\\\\(\\\\)?/g;\n\n            /** Used to detect host constructors (Safari). */\n            var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n            /** Detect free variable `global` from Node.js. */\n            var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\n\n            /** Detect free variable `self`. */\n            var freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n            /** Used as a reference to the global object. */\n            var root = freeGlobal || freeSelf || Function('return this')();\n\n            /**\n             * Gets the value at `key` of `object`.\n             *\n             * @private\n             * @param {Object} [object] The object to query.\n             * @param {string} key The key of the property to get.\n             * @returns {*} Returns the property value.\n             */\n            function getValue(object, key) {\n              return object == null ? undefined : object[key];\n            }\n\n            /**\n             * Checks if `value` is a host object in IE < 9.\n             *\n             * @private\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n             */\n            function isHostObject(value) {\n              // Many host objects are `Object` objects that can coerce to strings\n              // despite having improperly defined `toString` methods.\n              var result = false;\n              if (value != null && typeof value.toString != 'function') {\n                try {\n                  result = !!(value + '');\n                } catch (e) {}\n              }\n              return result;\n            }\n\n            /** Used for built-in method references. */\n            var arrayProto = Array.prototype,\n                funcProto = Function.prototype,\n                objectProto = Object.prototype;\n\n            /** Used to detect overreaching core-js shims. */\n            var coreJsData = root['__core-js_shared__'];\n\n            /** Used to detect methods masquerading as native. */\n            var maskSrcKey = (function() {\n              var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n              return uid ? ('Symbol(src)_1.' + uid) : '';\n            }());\n\n            /** Used to resolve the decompiled source of functions. */\n            var funcToString = funcProto.toString;\n\n            /** Used to check objects for own properties. */\n            var hasOwnProperty = objectProto.hasOwnProperty;\n\n            /**\n             * Used to resolve the\n             * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n             * of values.\n             */\n            var objectToString = objectProto.toString;\n\n            /** Used to detect if a method is native. */\n            var reIsNative = RegExp('^' +\n              funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n              .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n            );\n\n            /** Built-in value references. */\n            var Symbol$1 = root.Symbol,\n                splice = arrayProto.splice;\n\n            /* Built-in method references that are verified to be native. */\n            var Map = getNative(root, 'Map'),\n                nativeCreate = getNative(Object, 'create');\n\n            /** Used to convert symbols to primitives and strings. */\n            var symbolProto = Symbol$1 ? Symbol$1.prototype : undefined,\n                symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n            /**\n             * Creates a hash object.\n             *\n             * @private\n             * @constructor\n             * @param {Array} [entries] The key-value pairs to cache.\n             */\n            function Hash(entries) {\n              var index = -1,\n                  length = entries ? entries.length : 0;\n\n              this.clear();\n              while (++index < length) {\n                var entry = entries[index];\n                this.set(entry[0], entry[1]);\n              }\n            }\n\n            /**\n             * Removes all key-value entries from the hash.\n             *\n             * @private\n             * @name clear\n             * @memberOf Hash\n             */\n            function hashClear() {\n              this.__data__ = nativeCreate ? nativeCreate(null) : {};\n            }\n\n            /**\n             * Removes `key` and its value from the hash.\n             *\n             * @private\n             * @name delete\n             * @memberOf Hash\n             * @param {Object} hash The hash to modify.\n             * @param {string} key The key of the value to remove.\n             * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n             */\n            function hashDelete(key) {\n              return this.has(key) && delete this.__data__[key];\n            }\n\n            /**\n             * Gets the hash value for `key`.\n             *\n             * @private\n             * @name get\n             * @memberOf Hash\n             * @param {string} key The key of the value to get.\n             * @returns {*} Returns the entry value.\n             */\n            function hashGet(key) {\n              var data = this.__data__;\n              if (nativeCreate) {\n                var result = data[key];\n                return result === HASH_UNDEFINED ? undefined : result;\n              }\n              return hasOwnProperty.call(data, key) ? data[key] : undefined;\n            }\n\n            /**\n             * Checks if a hash value for `key` exists.\n             *\n             * @private\n             * @name has\n             * @memberOf Hash\n             * @param {string} key The key of the entry to check.\n             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n             */\n            function hashHas(key) {\n              var data = this.__data__;\n              return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n            }\n\n            /**\n             * Sets the hash `key` to `value`.\n             *\n             * @private\n             * @name set\n             * @memberOf Hash\n             * @param {string} key The key of the value to set.\n             * @param {*} value The value to set.\n             * @returns {Object} Returns the hash instance.\n             */\n            function hashSet(key, value) {\n              var data = this.__data__;\n              data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n              return this;\n            }\n\n            // Add methods to `Hash`.\n            Hash.prototype.clear = hashClear;\n            Hash.prototype['delete'] = hashDelete;\n            Hash.prototype.get = hashGet;\n            Hash.prototype.has = hashHas;\n            Hash.prototype.set = hashSet;\n\n            /**\n             * Creates an list cache object.\n             *\n             * @private\n             * @constructor\n             * @param {Array} [entries] The key-value pairs to cache.\n             */\n            function ListCache(entries) {\n              var index = -1,\n                  length = entries ? entries.length : 0;\n\n              this.clear();\n              while (++index < length) {\n                var entry = entries[index];\n                this.set(entry[0], entry[1]);\n              }\n            }\n\n            /**\n             * Removes all key-value entries from the list cache.\n             *\n             * @private\n             * @name clear\n             * @memberOf ListCache\n             */\n            function listCacheClear() {\n              this.__data__ = [];\n            }\n\n            /**\n             * Removes `key` and its value from the list cache.\n             *\n             * @private\n             * @name delete\n             * @memberOf ListCache\n             * @param {string} key The key of the value to remove.\n             * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n             */\n            function listCacheDelete(key) {\n              var data = this.__data__,\n                  index = assocIndexOf(data, key);\n\n              if (index < 0) {\n                return false;\n              }\n              var lastIndex = data.length - 1;\n              if (index == lastIndex) {\n                data.pop();\n              } else {\n                splice.call(data, index, 1);\n              }\n              return true;\n            }\n\n            /**\n             * Gets the list cache value for `key`.\n             *\n             * @private\n             * @name get\n             * @memberOf ListCache\n             * @param {string} key The key of the value to get.\n             * @returns {*} Returns the entry value.\n             */\n            function listCacheGet(key) {\n              var data = this.__data__,\n                  index = assocIndexOf(data, key);\n\n              return index < 0 ? undefined : data[index][1];\n            }\n\n            /**\n             * Checks if a list cache value for `key` exists.\n             *\n             * @private\n             * @name has\n             * @memberOf ListCache\n             * @param {string} key The key of the entry to check.\n             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n             */\n            function listCacheHas(key) {\n              return assocIndexOf(this.__data__, key) > -1;\n            }\n\n            /**\n             * Sets the list cache `key` to `value`.\n             *\n             * @private\n             * @name set\n             * @memberOf ListCache\n             * @param {string} key The key of the value to set.\n             * @param {*} value The value to set.\n             * @returns {Object} Returns the list cache instance.\n             */\n            function listCacheSet(key, value) {\n              var data = this.__data__,\n                  index = assocIndexOf(data, key);\n\n              if (index < 0) {\n                data.push([key, value]);\n              } else {\n                data[index][1] = value;\n              }\n              return this;\n            }\n\n            // Add methods to `ListCache`.\n            ListCache.prototype.clear = listCacheClear;\n            ListCache.prototype['delete'] = listCacheDelete;\n            ListCache.prototype.get = listCacheGet;\n            ListCache.prototype.has = listCacheHas;\n            ListCache.prototype.set = listCacheSet;\n\n            /**\n             * Creates a map cache object to store key-value pairs.\n             *\n             * @private\n             * @constructor\n             * @param {Array} [entries] The key-value pairs to cache.\n             */\n            function MapCache(entries) {\n              var index = -1,\n                  length = entries ? entries.length : 0;\n\n              this.clear();\n              while (++index < length) {\n                var entry = entries[index];\n                this.set(entry[0], entry[1]);\n              }\n            }\n\n            /**\n             * Removes all key-value entries from the map.\n             *\n             * @private\n             * @name clear\n             * @memberOf MapCache\n             */\n            function mapCacheClear() {\n              this.__data__ = {\n                'hash': new Hash,\n                'map': new (Map || ListCache),\n                'string': new Hash\n              };\n            }\n\n            /**\n             * Removes `key` and its value from the map.\n             *\n             * @private\n             * @name delete\n             * @memberOf MapCache\n             * @param {string} key The key of the value to remove.\n             * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n             */\n            function mapCacheDelete(key) {\n              return getMapData(this, key)['delete'](key);\n            }\n\n            /**\n             * Gets the map value for `key`.\n             *\n             * @private\n             * @name get\n             * @memberOf MapCache\n             * @param {string} key The key of the value to get.\n             * @returns {*} Returns the entry value.\n             */\n            function mapCacheGet(key) {\n              return getMapData(this, key).get(key);\n            }\n\n            /**\n             * Checks if a map value for `key` exists.\n             *\n             * @private\n             * @name has\n             * @memberOf MapCache\n             * @param {string} key The key of the entry to check.\n             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n             */\n            function mapCacheHas(key) {\n              return getMapData(this, key).has(key);\n            }\n\n            /**\n             * Sets the map `key` to `value`.\n             *\n             * @private\n             * @name set\n             * @memberOf MapCache\n             * @param {string} key The key of the value to set.\n             * @param {*} value The value to set.\n             * @returns {Object} Returns the map cache instance.\n             */\n            function mapCacheSet(key, value) {\n              getMapData(this, key).set(key, value);\n              return this;\n            }\n\n            // Add methods to `MapCache`.\n            MapCache.prototype.clear = mapCacheClear;\n            MapCache.prototype['delete'] = mapCacheDelete;\n            MapCache.prototype.get = mapCacheGet;\n            MapCache.prototype.has = mapCacheHas;\n            MapCache.prototype.set = mapCacheSet;\n\n            /**\n             * Gets the index at which the `key` is found in `array` of key-value pairs.\n             *\n             * @private\n             * @param {Array} array The array to inspect.\n             * @param {*} key The key to search for.\n             * @returns {number} Returns the index of the matched value, else `-1`.\n             */\n            function assocIndexOf(array, key) {\n              var length = array.length;\n              while (length--) {\n                if (eq(array[length][0], key)) {\n                  return length;\n                }\n              }\n              return -1;\n            }\n\n            /**\n             * The base implementation of `_.get` without support for default values.\n             *\n             * @private\n             * @param {Object} object The object to query.\n             * @param {Array|string} path The path of the property to get.\n             * @returns {*} Returns the resolved value.\n             */\n            function baseGet(object, path) {\n              path = isKey(path, object) ? [path] : castPath(path);\n\n              var index = 0,\n                  length = path.length;\n\n              while (object != null && index < length) {\n                object = object[toKey(path[index++])];\n              }\n              return (index && index == length) ? object : undefined;\n            }\n\n            /**\n             * The base implementation of `_.isNative` without bad shim checks.\n             *\n             * @private\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is a native function,\n             *  else `false`.\n             */\n            function baseIsNative(value) {\n              if (!isObject(value) || isMasked(value)) {\n                return false;\n              }\n              var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n              return pattern.test(toSource(value));\n            }\n\n            /**\n             * The base implementation of `_.toString` which doesn't convert nullish\n             * values to empty strings.\n             *\n             * @private\n             * @param {*} value The value to process.\n             * @returns {string} Returns the string.\n             */\n            function baseToString(value) {\n              // Exit early for strings to avoid a performance hit in some environments.\n              if (typeof value == 'string') {\n                return value;\n              }\n              if (isSymbol(value)) {\n                return symbolToString ? symbolToString.call(value) : '';\n              }\n              var result = (value + '');\n              return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n            }\n\n            /**\n             * Casts `value` to a path array if it's not one.\n             *\n             * @private\n             * @param {*} value The value to inspect.\n             * @returns {Array} Returns the cast property path array.\n             */\n            function castPath(value) {\n              return isArray(value) ? value : stringToPath(value);\n            }\n\n            /**\n             * Gets the data for `map`.\n             *\n             * @private\n             * @param {Object} map The map to query.\n             * @param {string} key The reference key.\n             * @returns {*} Returns the map data.\n             */\n            function getMapData(map, key) {\n              var data = map.__data__;\n              return isKeyable(key)\n                ? data[typeof key == 'string' ? 'string' : 'hash']\n                : data.map;\n            }\n\n            /**\n             * Gets the native function at `key` of `object`.\n             *\n             * @private\n             * @param {Object} object The object to query.\n             * @param {string} key The key of the method to get.\n             * @returns {*} Returns the function if it's native, else `undefined`.\n             */\n            function getNative(object, key) {\n              var value = getValue(object, key);\n              return baseIsNative(value) ? value : undefined;\n            }\n\n            /**\n             * Checks if `value` is a property name and not a property path.\n             *\n             * @private\n             * @param {*} value The value to check.\n             * @param {Object} [object] The object to query keys on.\n             * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n             */\n            function isKey(value, object) {\n              if (isArray(value)) {\n                return false;\n              }\n              var type = typeof value;\n              if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n                  value == null || isSymbol(value)) {\n                return true;\n              }\n              return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n                (object != null && value in Object(object));\n            }\n\n            /**\n             * Checks if `value` is suitable for use as unique object key.\n             *\n             * @private\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n             */\n            function isKeyable(value) {\n              var type = typeof value;\n              return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n                ? (value !== '__proto__')\n                : (value === null);\n            }\n\n            /**\n             * Checks if `func` has its source masked.\n             *\n             * @private\n             * @param {Function} func The function to check.\n             * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n             */\n            function isMasked(func) {\n              return !!maskSrcKey && (maskSrcKey in func);\n            }\n\n            /**\n             * Converts `string` to a property path array.\n             *\n             * @private\n             * @param {string} string The string to convert.\n             * @returns {Array} Returns the property path array.\n             */\n            var stringToPath = memoize(function(string) {\n              string = toString(string);\n\n              var result = [];\n              if (reLeadingDot.test(string)) {\n                result.push('');\n              }\n              string.replace(rePropName, function(match, number, quote, string) {\n                result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n              });\n              return result;\n            });\n\n            /**\n             * Converts `value` to a string key if it's not a string or symbol.\n             *\n             * @private\n             * @param {*} value The value to inspect.\n             * @returns {string|symbol} Returns the key.\n             */\n            function toKey(value) {\n              if (typeof value == 'string' || isSymbol(value)) {\n                return value;\n              }\n              var result = (value + '');\n              return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n            }\n\n            /**\n             * Converts `func` to its source code.\n             *\n             * @private\n             * @param {Function} func The function to process.\n             * @returns {string} Returns the source code.\n             */\n            function toSource(func) {\n              if (func != null) {\n                try {\n                  return funcToString.call(func);\n                } catch (e) {}\n                try {\n                  return (func + '');\n                } catch (e) {}\n              }\n              return '';\n            }\n\n            /**\n             * Creates a function that memoizes the result of `func`. If `resolver` is\n             * provided, it determines the cache key for storing the result based on the\n             * arguments provided to the memoized function. By default, the first argument\n             * provided to the memoized function is used as the map cache key. The `func`\n             * is invoked with the `this` binding of the memoized function.\n             *\n             * **Note:** The cache is exposed as the `cache` property on the memoized\n             * function. Its creation may be customized by replacing the `_.memoize.Cache`\n             * constructor with one whose instances implement the\n             * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n             * method interface of `delete`, `get`, `has`, and `set`.\n             *\n             * @static\n             * @memberOf _\n             * @since 0.1.0\n             * @category Function\n             * @param {Function} func The function to have its output memoized.\n             * @param {Function} [resolver] The function to resolve the cache key.\n             * @returns {Function} Returns the new memoized function.\n             * @example\n             *\n             * var object = { 'a': 1, 'b': 2 };\n             * var other = { 'c': 3, 'd': 4 };\n             *\n             * var values = _.memoize(_.values);\n             * values(object);\n             * // => [1, 2]\n             *\n             * values(other);\n             * // => [3, 4]\n             *\n             * object.a = 2;\n             * values(object);\n             * // => [1, 2]\n             *\n             * // Modify the result cache.\n             * values.cache.set(object, ['a', 'b']);\n             * values(object);\n             * // => ['a', 'b']\n             *\n             * // Replace `_.memoize.Cache`.\n             * _.memoize.Cache = WeakMap;\n             */\n            function memoize(func, resolver) {\n              if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n                throw new TypeError(FUNC_ERROR_TEXT);\n              }\n              var memoized = function() {\n                var args = arguments,\n                    key = resolver ? resolver.apply(this, args) : args[0],\n                    cache = memoized.cache;\n\n                if (cache.has(key)) {\n                  return cache.get(key);\n                }\n                var result = func.apply(this, args);\n                memoized.cache = cache.set(key, result);\n                return result;\n              };\n              memoized.cache = new (memoize.Cache || MapCache);\n              return memoized;\n            }\n\n            // Assign cache to `_.memoize`.\n            memoize.Cache = MapCache;\n\n            /**\n             * Performs a\n             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n             * comparison between two values to determine if they are equivalent.\n             *\n             * @static\n             * @memberOf _\n             * @since 4.0.0\n             * @category Lang\n             * @param {*} value The value to compare.\n             * @param {*} other The other value to compare.\n             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n             * @example\n             *\n             * var object = { 'a': 1 };\n             * var other = { 'a': 1 };\n             *\n             * _.eq(object, object);\n             * // => true\n             *\n             * _.eq(object, other);\n             * // => false\n             *\n             * _.eq('a', 'a');\n             * // => true\n             *\n             * _.eq('a', Object('a'));\n             * // => false\n             *\n             * _.eq(NaN, NaN);\n             * // => true\n             */\n            function eq(value, other) {\n              return value === other || (value !== value && other !== other);\n            }\n\n            /**\n             * Checks if `value` is classified as an `Array` object.\n             *\n             * @static\n             * @memberOf _\n             * @since 0.1.0\n             * @category Lang\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n             * @example\n             *\n             * _.isArray([1, 2, 3]);\n             * // => true\n             *\n             * _.isArray(document.body.children);\n             * // => false\n             *\n             * _.isArray('abc');\n             * // => false\n             *\n             * _.isArray(_.noop);\n             * // => false\n             */\n            var isArray = Array.isArray;\n\n            /**\n             * Checks if `value` is classified as a `Function` object.\n             *\n             * @static\n             * @memberOf _\n             * @since 0.1.0\n             * @category Lang\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n             * @example\n             *\n             * _.isFunction(_);\n             * // => true\n             *\n             * _.isFunction(/abc/);\n             * // => false\n             */\n            function isFunction(value) {\n              // The use of `Object#toString` avoids issues with the `typeof` operator\n              // in Safari 8-9 which returns 'object' for typed array and other constructors.\n              var tag = isObject(value) ? objectToString.call(value) : '';\n              return tag == funcTag || tag == genTag;\n            }\n\n            /**\n             * Checks if `value` is the\n             * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n             * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n             *\n             * @static\n             * @memberOf _\n             * @since 0.1.0\n             * @category Lang\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n             * @example\n             *\n             * _.isObject({});\n             * // => true\n             *\n             * _.isObject([1, 2, 3]);\n             * // => true\n             *\n             * _.isObject(_.noop);\n             * // => true\n             *\n             * _.isObject(null);\n             * // => false\n             */\n            function isObject(value) {\n              var type = typeof value;\n              return !!value && (type == 'object' || type == 'function');\n            }\n\n            /**\n             * Checks if `value` is object-like. A value is object-like if it's not `null`\n             * and has a `typeof` result of \"object\".\n             *\n             * @static\n             * @memberOf _\n             * @since 4.0.0\n             * @category Lang\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n             * @example\n             *\n             * _.isObjectLike({});\n             * // => true\n             *\n             * _.isObjectLike([1, 2, 3]);\n             * // => true\n             *\n             * _.isObjectLike(_.noop);\n             * // => false\n             *\n             * _.isObjectLike(null);\n             * // => false\n             */\n            function isObjectLike(value) {\n              return !!value && typeof value == 'object';\n            }\n\n            /**\n             * Checks if `value` is classified as a `Symbol` primitive or object.\n             *\n             * @static\n             * @memberOf _\n             * @since 4.0.0\n             * @category Lang\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n             * @example\n             *\n             * _.isSymbol(Symbol.iterator);\n             * // => true\n             *\n             * _.isSymbol('abc');\n             * // => false\n             */\n            function isSymbol(value) {\n              return typeof value == 'symbol' ||\n                (isObjectLike(value) && objectToString.call(value) == symbolTag);\n            }\n\n            /**\n             * Converts `value` to a string. An empty string is returned for `null`\n             * and `undefined` values. The sign of `-0` is preserved.\n             *\n             * @static\n             * @memberOf _\n             * @since 4.0.0\n             * @category Lang\n             * @param {*} value The value to process.\n             * @returns {string} Returns the string.\n             * @example\n             *\n             * _.toString(null);\n             * // => ''\n             *\n             * _.toString(-0);\n             * // => '-0'\n             *\n             * _.toString([1, 2, 3]);\n             * // => '1,2,3'\n             */\n            function toString(value) {\n              return value == null ? '' : baseToString(value);\n            }\n\n            /**\n             * Gets the value at `path` of `object`. If the resolved value is\n             * `undefined`, the `defaultValue` is returned in its place.\n             *\n             * @static\n             * @memberOf _\n             * @since 3.7.0\n             * @category Object\n             * @param {Object} object The object to query.\n             * @param {Array|string} path The path of the property to get.\n             * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n             * @returns {*} Returns the resolved value.\n             * @example\n             *\n             * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n             *\n             * _.get(object, 'a[0].b.c');\n             * // => 3\n             *\n             * _.get(object, ['a', '0', 'b', 'c']);\n             * // => 3\n             *\n             * _.get(object, 'a.b.c', 'default');\n             * // => 'default'\n             */\n            function get(object, path, defaultValue) {\n              var result = object == null ? undefined : baseGet(object, path);\n              return result === undefined ? defaultValue : result;\n            }\n\n            var lodash_get = get;\n\n            /**\n             * lodash (Custom Build) <https://lodash.com/>\n             * Build: `lodash modularize exports=\"npm\" -o ./`\n             * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n             * Released under MIT license <https://lodash.com/license>\n             * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n             * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n             */\n\n            /** Used as the `TypeError` message for \"Functions\" methods. */\n            var FUNC_ERROR_TEXT$1 = 'Expected a function';\n\n            /** Used to stand-in for `undefined` hash values. */\n            var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';\n\n            /** Used as references for various `Number` constants. */\n            var INFINITY$1 = 1 / 0,\n                MAX_SAFE_INTEGER = 9007199254740991;\n\n            /** `Object#toString` result references. */\n            var funcTag$1 = '[object Function]',\n                genTag$1 = '[object GeneratorFunction]',\n                symbolTag$1 = '[object Symbol]';\n\n            /** Used to match property names within property paths. */\n            var reIsDeepProp$1 = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n                reIsPlainProp$1 = /^\\w*$/,\n                reLeadingDot$1 = /^\\./,\n                rePropName$1 = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n            /**\n             * Used to match `RegExp`\n             * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n             */\n            var reRegExpChar$1 = /[\\\\^$.*+?()[\\]{}|]/g;\n\n            /** Used to match backslashes in property paths. */\n            var reEscapeChar$1 = /\\\\(\\\\)?/g;\n\n            /** Used to detect host constructors (Safari). */\n            var reIsHostCtor$1 = /^\\[object .+?Constructor\\]$/;\n\n            /** Used to detect unsigned integer values. */\n            var reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n            /** Detect free variable `global` from Node.js. */\n            var freeGlobal$1 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\n\n            /** Detect free variable `self`. */\n            var freeSelf$1 = typeof self == 'object' && self && self.Object === Object && self;\n\n            /** Used as a reference to the global object. */\n            var root$1 = freeGlobal$1 || freeSelf$1 || Function('return this')();\n\n            /**\n             * Gets the value at `key` of `object`.\n             *\n             * @private\n             * @param {Object} [object] The object to query.\n             * @param {string} key The key of the property to get.\n             * @returns {*} Returns the property value.\n             */\n            function getValue$1(object, key) {\n              return object == null ? undefined : object[key];\n            }\n\n            /**\n             * Checks if `value` is a host object in IE < 9.\n             *\n             * @private\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n             */\n            function isHostObject$1(value) {\n              // Many host objects are `Object` objects that can coerce to strings\n              // despite having improperly defined `toString` methods.\n              var result = false;\n              if (value != null && typeof value.toString != 'function') {\n                try {\n                  result = !!(value + '');\n                } catch (e) {}\n              }\n              return result;\n            }\n\n            /** Used for built-in method references. */\n            var arrayProto$1 = Array.prototype,\n                funcProto$1 = Function.prototype,\n                objectProto$1 = Object.prototype;\n\n            /** Used to detect overreaching core-js shims. */\n            var coreJsData$1 = root$1['__core-js_shared__'];\n\n            /** Used to detect methods masquerading as native. */\n            var maskSrcKey$1 = (function() {\n              var uid = /[^.]+$/.exec(coreJsData$1 && coreJsData$1.keys && coreJsData$1.keys.IE_PROTO || '');\n              return uid ? ('Symbol(src)_1.' + uid) : '';\n            }());\n\n            /** Used to resolve the decompiled source of functions. */\n            var funcToString$1 = funcProto$1.toString;\n\n            /** Used to check objects for own properties. */\n            var hasOwnProperty$1 = objectProto$1.hasOwnProperty;\n\n            /**\n             * Used to resolve the\n             * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n             * of values.\n             */\n            var objectToString$1 = objectProto$1.toString;\n\n            /** Used to detect if a method is native. */\n            var reIsNative$1 = RegExp('^' +\n              funcToString$1.call(hasOwnProperty$1).replace(reRegExpChar$1, '\\\\$&')\n              .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n            );\n\n            /** Built-in value references. */\n            var Symbol$2 = root$1.Symbol,\n                splice$1 = arrayProto$1.splice;\n\n            /* Built-in method references that are verified to be native. */\n            var Map$1 = getNative$1(root$1, 'Map'),\n                nativeCreate$1 = getNative$1(Object, 'create');\n\n            /** Used to convert symbols to primitives and strings. */\n            var symbolProto$1 = Symbol$2 ? Symbol$2.prototype : undefined,\n                symbolToString$1 = symbolProto$1 ? symbolProto$1.toString : undefined;\n\n            /**\n             * Creates a hash object.\n             *\n             * @private\n             * @constructor\n             * @param {Array} [entries] The key-value pairs to cache.\n             */\n            function Hash$1(entries) {\n              var index = -1,\n                  length = entries ? entries.length : 0;\n\n              this.clear();\n              while (++index < length) {\n                var entry = entries[index];\n                this.set(entry[0], entry[1]);\n              }\n            }\n\n            /**\n             * Removes all key-value entries from the hash.\n             *\n             * @private\n             * @name clear\n             * @memberOf Hash\n             */\n            function hashClear$1() {\n              this.__data__ = nativeCreate$1 ? nativeCreate$1(null) : {};\n            }\n\n            /**\n             * Removes `key` and its value from the hash.\n             *\n             * @private\n             * @name delete\n             * @memberOf Hash\n             * @param {Object} hash The hash to modify.\n             * @param {string} key The key of the value to remove.\n             * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n             */\n            function hashDelete$1(key) {\n              return this.has(key) && delete this.__data__[key];\n            }\n\n            /**\n             * Gets the hash value for `key`.\n             *\n             * @private\n             * @name get\n             * @memberOf Hash\n             * @param {string} key The key of the value to get.\n             * @returns {*} Returns the entry value.\n             */\n            function hashGet$1(key) {\n              var data = this.__data__;\n              if (nativeCreate$1) {\n                var result = data[key];\n                return result === HASH_UNDEFINED$1 ? undefined : result;\n              }\n              return hasOwnProperty$1.call(data, key) ? data[key] : undefined;\n            }\n\n            /**\n             * Checks if a hash value for `key` exists.\n             *\n             * @private\n             * @name has\n             * @memberOf Hash\n             * @param {string} key The key of the entry to check.\n             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n             */\n            function hashHas$1(key) {\n              var data = this.__data__;\n              return nativeCreate$1 ? data[key] !== undefined : hasOwnProperty$1.call(data, key);\n            }\n\n            /**\n             * Sets the hash `key` to `value`.\n             *\n             * @private\n             * @name set\n             * @memberOf Hash\n             * @param {string} key The key of the value to set.\n             * @param {*} value The value to set.\n             * @returns {Object} Returns the hash instance.\n             */\n            function hashSet$1(key, value) {\n              var data = this.__data__;\n              data[key] = (nativeCreate$1 && value === undefined) ? HASH_UNDEFINED$1 : value;\n              return this;\n            }\n\n            // Add methods to `Hash`.\n            Hash$1.prototype.clear = hashClear$1;\n            Hash$1.prototype['delete'] = hashDelete$1;\n            Hash$1.prototype.get = hashGet$1;\n            Hash$1.prototype.has = hashHas$1;\n            Hash$1.prototype.set = hashSet$1;\n\n            /**\n             * Creates an list cache object.\n             *\n             * @private\n             * @constructor\n             * @param {Array} [entries] The key-value pairs to cache.\n             */\n            function ListCache$1(entries) {\n              var index = -1,\n                  length = entries ? entries.length : 0;\n\n              this.clear();\n              while (++index < length) {\n                var entry = entries[index];\n                this.set(entry[0], entry[1]);\n              }\n            }\n\n            /**\n             * Removes all key-value entries from the list cache.\n             *\n             * @private\n             * @name clear\n             * @memberOf ListCache\n             */\n            function listCacheClear$1() {\n              this.__data__ = [];\n            }\n\n            /**\n             * Removes `key` and its value from the list cache.\n             *\n             * @private\n             * @name delete\n             * @memberOf ListCache\n             * @param {string} key The key of the value to remove.\n             * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n             */\n            function listCacheDelete$1(key) {\n              var data = this.__data__,\n                  index = assocIndexOf$1(data, key);\n\n              if (index < 0) {\n                return false;\n              }\n              var lastIndex = data.length - 1;\n              if (index == lastIndex) {\n                data.pop();\n              } else {\n                splice$1.call(data, index, 1);\n              }\n              return true;\n            }\n\n            /**\n             * Gets the list cache value for `key`.\n             *\n             * @private\n             * @name get\n             * @memberOf ListCache\n             * @param {string} key The key of the value to get.\n             * @returns {*} Returns the entry value.\n             */\n            function listCacheGet$1(key) {\n              var data = this.__data__,\n                  index = assocIndexOf$1(data, key);\n\n              return index < 0 ? undefined : data[index][1];\n            }\n\n            /**\n             * Checks if a list cache value for `key` exists.\n             *\n             * @private\n             * @name has\n             * @memberOf ListCache\n             * @param {string} key The key of the entry to check.\n             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n             */\n            function listCacheHas$1(key) {\n              return assocIndexOf$1(this.__data__, key) > -1;\n            }\n\n            /**\n             * Sets the list cache `key` to `value`.\n             *\n             * @private\n             * @name set\n             * @memberOf ListCache\n             * @param {string} key The key of the value to set.\n             * @param {*} value The value to set.\n             * @returns {Object} Returns the list cache instance.\n             */\n            function listCacheSet$1(key, value) {\n              var data = this.__data__,\n                  index = assocIndexOf$1(data, key);\n\n              if (index < 0) {\n                data.push([key, value]);\n              } else {\n                data[index][1] = value;\n              }\n              return this;\n            }\n\n            // Add methods to `ListCache`.\n            ListCache$1.prototype.clear = listCacheClear$1;\n            ListCache$1.prototype['delete'] = listCacheDelete$1;\n            ListCache$1.prototype.get = listCacheGet$1;\n            ListCache$1.prototype.has = listCacheHas$1;\n            ListCache$1.prototype.set = listCacheSet$1;\n\n            /**\n             * Creates a map cache object to store key-value pairs.\n             *\n             * @private\n             * @constructor\n             * @param {Array} [entries] The key-value pairs to cache.\n             */\n            function MapCache$1(entries) {\n              var index = -1,\n                  length = entries ? entries.length : 0;\n\n              this.clear();\n              while (++index < length) {\n                var entry = entries[index];\n                this.set(entry[0], entry[1]);\n              }\n            }\n\n            /**\n             * Removes all key-value entries from the map.\n             *\n             * @private\n             * @name clear\n             * @memberOf MapCache\n             */\n            function mapCacheClear$1() {\n              this.__data__ = {\n                'hash': new Hash$1,\n                'map': new (Map$1 || ListCache$1),\n                'string': new Hash$1\n              };\n            }\n\n            /**\n             * Removes `key` and its value from the map.\n             *\n             * @private\n             * @name delete\n             * @memberOf MapCache\n             * @param {string} key The key of the value to remove.\n             * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n             */\n            function mapCacheDelete$1(key) {\n              return getMapData$1(this, key)['delete'](key);\n            }\n\n            /**\n             * Gets the map value for `key`.\n             *\n             * @private\n             * @name get\n             * @memberOf MapCache\n             * @param {string} key The key of the value to get.\n             * @returns {*} Returns the entry value.\n             */\n            function mapCacheGet$1(key) {\n              return getMapData$1(this, key).get(key);\n            }\n\n            /**\n             * Checks if a map value for `key` exists.\n             *\n             * @private\n             * @name has\n             * @memberOf MapCache\n             * @param {string} key The key of the entry to check.\n             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n             */\n            function mapCacheHas$1(key) {\n              return getMapData$1(this, key).has(key);\n            }\n\n            /**\n             * Sets the map `key` to `value`.\n             *\n             * @private\n             * @name set\n             * @memberOf MapCache\n             * @param {string} key The key of the value to set.\n             * @param {*} value The value to set.\n             * @returns {Object} Returns the map cache instance.\n             */\n            function mapCacheSet$1(key, value) {\n              getMapData$1(this, key).set(key, value);\n              return this;\n            }\n\n            // Add methods to `MapCache`.\n            MapCache$1.prototype.clear = mapCacheClear$1;\n            MapCache$1.prototype['delete'] = mapCacheDelete$1;\n            MapCache$1.prototype.get = mapCacheGet$1;\n            MapCache$1.prototype.has = mapCacheHas$1;\n            MapCache$1.prototype.set = mapCacheSet$1;\n\n            /**\n             * Assigns `value` to `key` of `object` if the existing value is not equivalent\n             * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n             * for equality comparisons.\n             *\n             * @private\n             * @param {Object} object The object to modify.\n             * @param {string} key The key of the property to assign.\n             * @param {*} value The value to assign.\n             */\n            function assignValue(object, key, value) {\n              var objValue = object[key];\n              if (!(hasOwnProperty$1.call(object, key) && eq$1(objValue, value)) ||\n                  (value === undefined && !(key in object))) {\n                object[key] = value;\n              }\n            }\n\n            /**\n             * Gets the index at which the `key` is found in `array` of key-value pairs.\n             *\n             * @private\n             * @param {Array} array The array to inspect.\n             * @param {*} key The key to search for.\n             * @returns {number} Returns the index of the matched value, else `-1`.\n             */\n            function assocIndexOf$1(array, key) {\n              var length = array.length;\n              while (length--) {\n                if (eq$1(array[length][0], key)) {\n                  return length;\n                }\n              }\n              return -1;\n            }\n\n            /**\n             * The base implementation of `_.isNative` without bad shim checks.\n             *\n             * @private\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is a native function,\n             *  else `false`.\n             */\n            function baseIsNative$1(value) {\n              if (!isObject$1(value) || isMasked$1(value)) {\n                return false;\n              }\n              var pattern = (isFunction$1(value) || isHostObject$1(value)) ? reIsNative$1 : reIsHostCtor$1;\n              return pattern.test(toSource$1(value));\n            }\n\n            /**\n             * The base implementation of `_.set`.\n             *\n             * @private\n             * @param {Object} object The object to modify.\n             * @param {Array|string} path The path of the property to set.\n             * @param {*} value The value to set.\n             * @param {Function} [customizer] The function to customize path creation.\n             * @returns {Object} Returns `object`.\n             */\n            function baseSet(object, path, value, customizer) {\n              if (!isObject$1(object)) {\n                return object;\n              }\n              path = isKey$1(path, object) ? [path] : castPath$1(path);\n\n              var index = -1,\n                  length = path.length,\n                  lastIndex = length - 1,\n                  nested = object;\n\n              while (nested != null && ++index < length) {\n                var key = toKey$1(path[index]),\n                    newValue = value;\n\n                if (index != lastIndex) {\n                  var objValue = nested[key];\n                  newValue = customizer ? customizer(objValue, key, nested) : undefined;\n                  if (newValue === undefined) {\n                    newValue = isObject$1(objValue)\n                      ? objValue\n                      : (isIndex(path[index + 1]) ? [] : {});\n                  }\n                }\n                assignValue(nested, key, newValue);\n                nested = nested[key];\n              }\n              return object;\n            }\n\n            /**\n             * The base implementation of `_.toString` which doesn't convert nullish\n             * values to empty strings.\n             *\n             * @private\n             * @param {*} value The value to process.\n             * @returns {string} Returns the string.\n             */\n            function baseToString$1(value) {\n              // Exit early for strings to avoid a performance hit in some environments.\n              if (typeof value == 'string') {\n                return value;\n              }\n              if (isSymbol$1(value)) {\n                return symbolToString$1 ? symbolToString$1.call(value) : '';\n              }\n              var result = (value + '');\n              return (result == '0' && (1 / value) == -INFINITY$1) ? '-0' : result;\n            }\n\n            /**\n             * Casts `value` to a path array if it's not one.\n             *\n             * @private\n             * @param {*} value The value to inspect.\n             * @returns {Array} Returns the cast property path array.\n             */\n            function castPath$1(value) {\n              return isArray$1(value) ? value : stringToPath$1(value);\n            }\n\n            /**\n             * Gets the data for `map`.\n             *\n             * @private\n             * @param {Object} map The map to query.\n             * @param {string} key The reference key.\n             * @returns {*} Returns the map data.\n             */\n            function getMapData$1(map, key) {\n              var data = map.__data__;\n              return isKeyable$1(key)\n                ? data[typeof key == 'string' ? 'string' : 'hash']\n                : data.map;\n            }\n\n            /**\n             * Gets the native function at `key` of `object`.\n             *\n             * @private\n             * @param {Object} object The object to query.\n             * @param {string} key The key of the method to get.\n             * @returns {*} Returns the function if it's native, else `undefined`.\n             */\n            function getNative$1(object, key) {\n              var value = getValue$1(object, key);\n              return baseIsNative$1(value) ? value : undefined;\n            }\n\n            /**\n             * Checks if `value` is a valid array-like index.\n             *\n             * @private\n             * @param {*} value The value to check.\n             * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n             * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n             */\n            function isIndex(value, length) {\n              length = length == null ? MAX_SAFE_INTEGER : length;\n              return !!length &&\n                (typeof value == 'number' || reIsUint.test(value)) &&\n                (value > -1 && value % 1 == 0 && value < length);\n            }\n\n            /**\n             * Checks if `value` is a property name and not a property path.\n             *\n             * @private\n             * @param {*} value The value to check.\n             * @param {Object} [object] The object to query keys on.\n             * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n             */\n            function isKey$1(value, object) {\n              if (isArray$1(value)) {\n                return false;\n              }\n              var type = typeof value;\n              if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n                  value == null || isSymbol$1(value)) {\n                return true;\n              }\n              return reIsPlainProp$1.test(value) || !reIsDeepProp$1.test(value) ||\n                (object != null && value in Object(object));\n            }\n\n            /**\n             * Checks if `value` is suitable for use as unique object key.\n             *\n             * @private\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n             */\n            function isKeyable$1(value) {\n              var type = typeof value;\n              return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n                ? (value !== '__proto__')\n                : (value === null);\n            }\n\n            /**\n             * Checks if `func` has its source masked.\n             *\n             * @private\n             * @param {Function} func The function to check.\n             * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n             */\n            function isMasked$1(func) {\n              return !!maskSrcKey$1 && (maskSrcKey$1 in func);\n            }\n\n            /**\n             * Converts `string` to a property path array.\n             *\n             * @private\n             * @param {string} string The string to convert.\n             * @returns {Array} Returns the property path array.\n             */\n            var stringToPath$1 = memoize$1(function(string) {\n              string = toString$1(string);\n\n              var result = [];\n              if (reLeadingDot$1.test(string)) {\n                result.push('');\n              }\n              string.replace(rePropName$1, function(match, number, quote, string) {\n                result.push(quote ? string.replace(reEscapeChar$1, '$1') : (number || match));\n              });\n              return result;\n            });\n\n            /**\n             * Converts `value` to a string key if it's not a string or symbol.\n             *\n             * @private\n             * @param {*} value The value to inspect.\n             * @returns {string|symbol} Returns the key.\n             */\n            function toKey$1(value) {\n              if (typeof value == 'string' || isSymbol$1(value)) {\n                return value;\n              }\n              var result = (value + '');\n              return (result == '0' && (1 / value) == -INFINITY$1) ? '-0' : result;\n            }\n\n            /**\n             * Converts `func` to its source code.\n             *\n             * @private\n             * @param {Function} func The function to process.\n             * @returns {string} Returns the source code.\n             */\n            function toSource$1(func) {\n              if (func != null) {\n                try {\n                  return funcToString$1.call(func);\n                } catch (e) {}\n                try {\n                  return (func + '');\n                } catch (e) {}\n              }\n              return '';\n            }\n\n            /**\n             * Creates a function that memoizes the result of `func`. If `resolver` is\n             * provided, it determines the cache key for storing the result based on the\n             * arguments provided to the memoized function. By default, the first argument\n             * provided to the memoized function is used as the map cache key. The `func`\n             * is invoked with the `this` binding of the memoized function.\n             *\n             * **Note:** The cache is exposed as the `cache` property on the memoized\n             * function. Its creation may be customized by replacing the `_.memoize.Cache`\n             * constructor with one whose instances implement the\n             * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n             * method interface of `delete`, `get`, `has`, and `set`.\n             *\n             * @static\n             * @memberOf _\n             * @since 0.1.0\n             * @category Function\n             * @param {Function} func The function to have its output memoized.\n             * @param {Function} [resolver] The function to resolve the cache key.\n             * @returns {Function} Returns the new memoized function.\n             * @example\n             *\n             * var object = { 'a': 1, 'b': 2 };\n             * var other = { 'c': 3, 'd': 4 };\n             *\n             * var values = _.memoize(_.values);\n             * values(object);\n             * // => [1, 2]\n             *\n             * values(other);\n             * // => [3, 4]\n             *\n             * object.a = 2;\n             * values(object);\n             * // => [1, 2]\n             *\n             * // Modify the result cache.\n             * values.cache.set(object, ['a', 'b']);\n             * values(object);\n             * // => ['a', 'b']\n             *\n             * // Replace `_.memoize.Cache`.\n             * _.memoize.Cache = WeakMap;\n             */\n            function memoize$1(func, resolver) {\n              if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n                throw new TypeError(FUNC_ERROR_TEXT$1);\n              }\n              var memoized = function() {\n                var args = arguments,\n                    key = resolver ? resolver.apply(this, args) : args[0],\n                    cache = memoized.cache;\n\n                if (cache.has(key)) {\n                  return cache.get(key);\n                }\n                var result = func.apply(this, args);\n                memoized.cache = cache.set(key, result);\n                return result;\n              };\n              memoized.cache = new (memoize$1.Cache || MapCache$1);\n              return memoized;\n            }\n\n            // Assign cache to `_.memoize`.\n            memoize$1.Cache = MapCache$1;\n\n            /**\n             * Performs a\n             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n             * comparison between two values to determine if they are equivalent.\n             *\n             * @static\n             * @memberOf _\n             * @since 4.0.0\n             * @category Lang\n             * @param {*} value The value to compare.\n             * @param {*} other The other value to compare.\n             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n             * @example\n             *\n             * var object = { 'a': 1 };\n             * var other = { 'a': 1 };\n             *\n             * _.eq(object, object);\n             * // => true\n             *\n             * _.eq(object, other);\n             * // => false\n             *\n             * _.eq('a', 'a');\n             * // => true\n             *\n             * _.eq('a', Object('a'));\n             * // => false\n             *\n             * _.eq(NaN, NaN);\n             * // => true\n             */\n            function eq$1(value, other) {\n              return value === other || (value !== value && other !== other);\n            }\n\n            /**\n             * Checks if `value` is classified as an `Array` object.\n             *\n             * @static\n             * @memberOf _\n             * @since 0.1.0\n             * @category Lang\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n             * @example\n             *\n             * _.isArray([1, 2, 3]);\n             * // => true\n             *\n             * _.isArray(document.body.children);\n             * // => false\n             *\n             * _.isArray('abc');\n             * // => false\n             *\n             * _.isArray(_.noop);\n             * // => false\n             */\n            var isArray$1 = Array.isArray;\n\n            /**\n             * Checks if `value` is classified as a `Function` object.\n             *\n             * @static\n             * @memberOf _\n             * @since 0.1.0\n             * @category Lang\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n             * @example\n             *\n             * _.isFunction(_);\n             * // => true\n             *\n             * _.isFunction(/abc/);\n             * // => false\n             */\n            function isFunction$1(value) {\n              // The use of `Object#toString` avoids issues with the `typeof` operator\n              // in Safari 8-9 which returns 'object' for typed array and other constructors.\n              var tag = isObject$1(value) ? objectToString$1.call(value) : '';\n              return tag == funcTag$1 || tag == genTag$1;\n            }\n\n            /**\n             * Checks if `value` is the\n             * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n             * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n             *\n             * @static\n             * @memberOf _\n             * @since 0.1.0\n             * @category Lang\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n             * @example\n             *\n             * _.isObject({});\n             * // => true\n             *\n             * _.isObject([1, 2, 3]);\n             * // => true\n             *\n             * _.isObject(_.noop);\n             * // => true\n             *\n             * _.isObject(null);\n             * // => false\n             */\n            function isObject$1(value) {\n              var type = typeof value;\n              return !!value && (type == 'object' || type == 'function');\n            }\n\n            /**\n             * Checks if `value` is object-like. A value is object-like if it's not `null`\n             * and has a `typeof` result of \"object\".\n             *\n             * @static\n             * @memberOf _\n             * @since 4.0.0\n             * @category Lang\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n             * @example\n             *\n             * _.isObjectLike({});\n             * // => true\n             *\n             * _.isObjectLike([1, 2, 3]);\n             * // => true\n             *\n             * _.isObjectLike(_.noop);\n             * // => false\n             *\n             * _.isObjectLike(null);\n             * // => false\n             */\n            function isObjectLike$1(value) {\n              return !!value && typeof value == 'object';\n            }\n\n            /**\n             * Checks if `value` is classified as a `Symbol` primitive or object.\n             *\n             * @static\n             * @memberOf _\n             * @since 4.0.0\n             * @category Lang\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n             * @example\n             *\n             * _.isSymbol(Symbol.iterator);\n             * // => true\n             *\n             * _.isSymbol('abc');\n             * // => false\n             */\n            function isSymbol$1(value) {\n              return typeof value == 'symbol' ||\n                (isObjectLike$1(value) && objectToString$1.call(value) == symbolTag$1);\n            }\n\n            /**\n             * Converts `value` to a string. An empty string is returned for `null`\n             * and `undefined` values. The sign of `-0` is preserved.\n             *\n             * @static\n             * @memberOf _\n             * @since 4.0.0\n             * @category Lang\n             * @param {*} value The value to process.\n             * @returns {string} Returns the string.\n             * @example\n             *\n             * _.toString(null);\n             * // => ''\n             *\n             * _.toString(-0);\n             * // => '-0'\n             *\n             * _.toString([1, 2, 3]);\n             * // => '1,2,3'\n             */\n            function toString$1(value) {\n              return value == null ? '' : baseToString$1(value);\n            }\n\n            /**\n             * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\n             * it's created. Arrays are created for missing index properties while objects\n             * are created for all other missing properties. Use `_.setWith` to customize\n             * `path` creation.\n             *\n             * **Note:** This method mutates `object`.\n             *\n             * @static\n             * @memberOf _\n             * @since 3.7.0\n             * @category Object\n             * @param {Object} object The object to modify.\n             * @param {Array|string} path The path of the property to set.\n             * @param {*} value The value to set.\n             * @returns {Object} Returns `object`.\n             * @example\n             *\n             * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n             *\n             * _.set(object, 'a[0].b.c', 4);\n             * console.log(object.a[0].b.c);\n             * // => 4\n             *\n             * _.set(object, ['x', '0', 'y', 'z'], 5);\n             * console.log(object.x[0].y.z);\n             * // => 5\n             */\n            function set(object, path, value) {\n              return object == null ? object : baseSet(object, path, value);\n            }\n\n            var lodash_set = set;\n\n            var lodash_clonedeep = createCommonjsModule(function (module, exports) {\n            /**\n             * lodash (Custom Build) <https://lodash.com/>\n             * Build: `lodash modularize exports=\"npm\" -o ./`\n             * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n             * Released under MIT license <https://lodash.com/license>\n             * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n             * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n             */\n\n            /** Used as the size to enable large array optimizations. */\n            var LARGE_ARRAY_SIZE = 200;\n\n            /** Used to stand-in for `undefined` hash values. */\n            var HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n            /** Used as references for various `Number` constants. */\n            var MAX_SAFE_INTEGER = 9007199254740991;\n\n            /** `Object#toString` result references. */\n            var argsTag = '[object Arguments]',\n                boolTag = '[object Boolean]',\n                dateTag = '[object Date]',\n                funcTag = '[object Function]',\n                genTag = '[object GeneratorFunction]',\n                mapTag = '[object Map]',\n                numberTag = '[object Number]',\n                objectTag = '[object Object]',\n                promiseTag = '[object Promise]',\n                regexpTag = '[object RegExp]',\n                setTag = '[object Set]',\n                stringTag = '[object String]',\n                symbolTag = '[object Symbol]',\n                weakMapTag = '[object WeakMap]';\n\n            var arrayBufferTag = '[object ArrayBuffer]',\n                dataViewTag = '[object DataView]',\n                float32Tag = '[object Float32Array]',\n                float64Tag = '[object Float64Array]',\n                int8Tag = '[object Int8Array]',\n                int16Tag = '[object Int16Array]',\n                int32Tag = '[object Int32Array]',\n                uint8Tag = '[object Uint8Array]',\n                uint8ClampedTag = '[object Uint8ClampedArray]',\n                uint16Tag = '[object Uint16Array]',\n                uint32Tag = '[object Uint32Array]';\n\n            /**\n             * Used to match `RegExp`\n             * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n             */\n            var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n            /** Used to match `RegExp` flags from their coerced string values. */\n            var reFlags = /\\w*$/;\n\n            /** Used to detect host constructors (Safari). */\n            var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n            /** Used to detect unsigned integer values. */\n            var reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n            /** Detect free variable `global` from Node.js. */\n            var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\n\n            /** Detect free variable `self`. */\n            var freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n            /** Used as a reference to the global object. */\n            var root = freeGlobal || freeSelf || Function('return this')();\n\n            /** Detect free variable `exports`. */\n            var freeExports = exports && !exports.nodeType && exports;\n\n            /** Detect free variable `module`. */\n            var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;\n\n            /** Detect the popular CommonJS extension `module.exports`. */\n            var moduleExports = freeModule && freeModule.exports === freeExports;\n\n            /**\n             * Adds the key-value `pair` to `map`.\n             *\n             * @private\n             * @param {Object} map The map to modify.\n             * @param {Array} pair The key-value pair to add.\n             * @returns {Object} Returns `map`.\n             */\n            function addMapEntry(map, pair) {\n              // Don't return `map.set` because it's not chainable in IE 11.\n              map.set(pair[0], pair[1]);\n              return map;\n            }\n\n            /**\n             * Adds `value` to `set`.\n             *\n             * @private\n             * @param {Object} set The set to modify.\n             * @param {*} value The value to add.\n             * @returns {Object} Returns `set`.\n             */\n            function addSetEntry(set, value) {\n              // Don't return `set.add` because it's not chainable in IE 11.\n              set.add(value);\n              return set;\n            }\n\n            /**\n             * A specialized version of `_.forEach` for arrays without support for\n             * iteratee shorthands.\n             *\n             * @private\n             * @param {Array} [array] The array to iterate over.\n             * @param {Function} iteratee The function invoked per iteration.\n             * @returns {Array} Returns `array`.\n             */\n            function arrayEach(array, iteratee) {\n              var index = -1,\n                  length = array ? array.length : 0;\n\n              while (++index < length) {\n                if (iteratee(array[index], index, array) === false) {\n                  break;\n                }\n              }\n              return array;\n            }\n\n            /**\n             * Appends the elements of `values` to `array`.\n             *\n             * @private\n             * @param {Array} array The array to modify.\n             * @param {Array} values The values to append.\n             * @returns {Array} Returns `array`.\n             */\n            function arrayPush(array, values) {\n              var index = -1,\n                  length = values.length,\n                  offset = array.length;\n\n              while (++index < length) {\n                array[offset + index] = values[index];\n              }\n              return array;\n            }\n\n            /**\n             * A specialized version of `_.reduce` for arrays without support for\n             * iteratee shorthands.\n             *\n             * @private\n             * @param {Array} [array] The array to iterate over.\n             * @param {Function} iteratee The function invoked per iteration.\n             * @param {*} [accumulator] The initial value.\n             * @param {boolean} [initAccum] Specify using the first element of `array` as\n             *  the initial value.\n             * @returns {*} Returns the accumulated value.\n             */\n            function arrayReduce(array, iteratee, accumulator, initAccum) {\n              var index = -1,\n                  length = array ? array.length : 0;\n\n              if (initAccum && length) {\n                accumulator = array[++index];\n              }\n              while (++index < length) {\n                accumulator = iteratee(accumulator, array[index], index, array);\n              }\n              return accumulator;\n            }\n\n            /**\n             * The base implementation of `_.times` without support for iteratee shorthands\n             * or max array length checks.\n             *\n             * @private\n             * @param {number} n The number of times to invoke `iteratee`.\n             * @param {Function} iteratee The function invoked per iteration.\n             * @returns {Array} Returns the array of results.\n             */\n            function baseTimes(n, iteratee) {\n              var index = -1,\n                  result = Array(n);\n\n              while (++index < n) {\n                result[index] = iteratee(index);\n              }\n              return result;\n            }\n\n            /**\n             * Gets the value at `key` of `object`.\n             *\n             * @private\n             * @param {Object} [object] The object to query.\n             * @param {string} key The key of the property to get.\n             * @returns {*} Returns the property value.\n             */\n            function getValue(object, key) {\n              return object == null ? undefined : object[key];\n            }\n\n            /**\n             * Checks if `value` is a host object in IE < 9.\n             *\n             * @private\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n             */\n            function isHostObject(value) {\n              // Many host objects are `Object` objects that can coerce to strings\n              // despite having improperly defined `toString` methods.\n              var result = false;\n              if (value != null && typeof value.toString != 'function') {\n                try {\n                  result = !!(value + '');\n                } catch (e) {}\n              }\n              return result;\n            }\n\n            /**\n             * Converts `map` to its key-value pairs.\n             *\n             * @private\n             * @param {Object} map The map to convert.\n             * @returns {Array} Returns the key-value pairs.\n             */\n            function mapToArray(map) {\n              var index = -1,\n                  result = Array(map.size);\n\n              map.forEach(function(value, key) {\n                result[++index] = [key, value];\n              });\n              return result;\n            }\n\n            /**\n             * Creates a unary function that invokes `func` with its argument transformed.\n             *\n             * @private\n             * @param {Function} func The function to wrap.\n             * @param {Function} transform The argument transform.\n             * @returns {Function} Returns the new function.\n             */\n            function overArg(func, transform) {\n              return function(arg) {\n                return func(transform(arg));\n              };\n            }\n\n            /**\n             * Converts `set` to an array of its values.\n             *\n             * @private\n             * @param {Object} set The set to convert.\n             * @returns {Array} Returns the values.\n             */\n            function setToArray(set) {\n              var index = -1,\n                  result = Array(set.size);\n\n              set.forEach(function(value) {\n                result[++index] = value;\n              });\n              return result;\n            }\n\n            /** Used for built-in method references. */\n            var arrayProto = Array.prototype,\n                funcProto = Function.prototype,\n                objectProto = Object.prototype;\n\n            /** Used to detect overreaching core-js shims. */\n            var coreJsData = root['__core-js_shared__'];\n\n            /** Used to detect methods masquerading as native. */\n            var maskSrcKey = (function() {\n              var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n              return uid ? ('Symbol(src)_1.' + uid) : '';\n            }());\n\n            /** Used to resolve the decompiled source of functions. */\n            var funcToString = funcProto.toString;\n\n            /** Used to check objects for own properties. */\n            var hasOwnProperty = objectProto.hasOwnProperty;\n\n            /**\n             * Used to resolve the\n             * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n             * of values.\n             */\n            var objectToString = objectProto.toString;\n\n            /** Used to detect if a method is native. */\n            var reIsNative = RegExp('^' +\n              funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n              .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n            );\n\n            /** Built-in value references. */\n            var Buffer = moduleExports ? root.Buffer : undefined,\n                Symbol = root.Symbol,\n                Uint8Array = root.Uint8Array,\n                getPrototype = overArg(Object.getPrototypeOf, Object),\n                objectCreate = Object.create,\n                propertyIsEnumerable = objectProto.propertyIsEnumerable,\n                splice = arrayProto.splice;\n\n            /* Built-in method references for those with the same name as other `lodash` methods. */\n            var nativeGetSymbols = Object.getOwnPropertySymbols,\n                nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n                nativeKeys = overArg(Object.keys, Object);\n\n            /* Built-in method references that are verified to be native. */\n            var DataView = getNative(root, 'DataView'),\n                Map = getNative(root, 'Map'),\n                Promise = getNative(root, 'Promise'),\n                Set = getNative(root, 'Set'),\n                WeakMap = getNative(root, 'WeakMap'),\n                nativeCreate = getNative(Object, 'create');\n\n            /** Used to detect maps, sets, and weakmaps. */\n            var dataViewCtorString = toSource(DataView),\n                mapCtorString = toSource(Map),\n                promiseCtorString = toSource(Promise),\n                setCtorString = toSource(Set),\n                weakMapCtorString = toSource(WeakMap);\n\n            /** Used to convert symbols to primitives and strings. */\n            var symbolProto = Symbol ? Symbol.prototype : undefined,\n                symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n            /**\n             * Creates a hash object.\n             *\n             * @private\n             * @constructor\n             * @param {Array} [entries] The key-value pairs to cache.\n             */\n            function Hash(entries) {\n              var index = -1,\n                  length = entries ? entries.length : 0;\n\n              this.clear();\n              while (++index < length) {\n                var entry = entries[index];\n                this.set(entry[0], entry[1]);\n              }\n            }\n\n            /**\n             * Removes all key-value entries from the hash.\n             *\n             * @private\n             * @name clear\n             * @memberOf Hash\n             */\n            function hashClear() {\n              this.__data__ = nativeCreate ? nativeCreate(null) : {};\n            }\n\n            /**\n             * Removes `key` and its value from the hash.\n             *\n             * @private\n             * @name delete\n             * @memberOf Hash\n             * @param {Object} hash The hash to modify.\n             * @param {string} key The key of the value to remove.\n             * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n             */\n            function hashDelete(key) {\n              return this.has(key) && delete this.__data__[key];\n            }\n\n            /**\n             * Gets the hash value for `key`.\n             *\n             * @private\n             * @name get\n             * @memberOf Hash\n             * @param {string} key The key of the value to get.\n             * @returns {*} Returns the entry value.\n             */\n            function hashGet(key) {\n              var data = this.__data__;\n              if (nativeCreate) {\n                var result = data[key];\n                return result === HASH_UNDEFINED ? undefined : result;\n              }\n              return hasOwnProperty.call(data, key) ? data[key] : undefined;\n            }\n\n            /**\n             * Checks if a hash value for `key` exists.\n             *\n             * @private\n             * @name has\n             * @memberOf Hash\n             * @param {string} key The key of the entry to check.\n             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n             */\n            function hashHas(key) {\n              var data = this.__data__;\n              return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n            }\n\n            /**\n             * Sets the hash `key` to `value`.\n             *\n             * @private\n             * @name set\n             * @memberOf Hash\n             * @param {string} key The key of the value to set.\n             * @param {*} value The value to set.\n             * @returns {Object} Returns the hash instance.\n             */\n            function hashSet(key, value) {\n              var data = this.__data__;\n              data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n              return this;\n            }\n\n            // Add methods to `Hash`.\n            Hash.prototype.clear = hashClear;\n            Hash.prototype['delete'] = hashDelete;\n            Hash.prototype.get = hashGet;\n            Hash.prototype.has = hashHas;\n            Hash.prototype.set = hashSet;\n\n            /**\n             * Creates an list cache object.\n             *\n             * @private\n             * @constructor\n             * @param {Array} [entries] The key-value pairs to cache.\n             */\n            function ListCache(entries) {\n              var index = -1,\n                  length = entries ? entries.length : 0;\n\n              this.clear();\n              while (++index < length) {\n                var entry = entries[index];\n                this.set(entry[0], entry[1]);\n              }\n            }\n\n            /**\n             * Removes all key-value entries from the list cache.\n             *\n             * @private\n             * @name clear\n             * @memberOf ListCache\n             */\n            function listCacheClear() {\n              this.__data__ = [];\n            }\n\n            /**\n             * Removes `key` and its value from the list cache.\n             *\n             * @private\n             * @name delete\n             * @memberOf ListCache\n             * @param {string} key The key of the value to remove.\n             * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n             */\n            function listCacheDelete(key) {\n              var data = this.__data__,\n                  index = assocIndexOf(data, key);\n\n              if (index < 0) {\n                return false;\n              }\n              var lastIndex = data.length - 1;\n              if (index == lastIndex) {\n                data.pop();\n              } else {\n                splice.call(data, index, 1);\n              }\n              return true;\n            }\n\n            /**\n             * Gets the list cache value for `key`.\n             *\n             * @private\n             * @name get\n             * @memberOf ListCache\n             * @param {string} key The key of the value to get.\n             * @returns {*} Returns the entry value.\n             */\n            function listCacheGet(key) {\n              var data = this.__data__,\n                  index = assocIndexOf(data, key);\n\n              return index < 0 ? undefined : data[index][1];\n            }\n\n            /**\n             * Checks if a list cache value for `key` exists.\n             *\n             * @private\n             * @name has\n             * @memberOf ListCache\n             * @param {string} key The key of the entry to check.\n             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n             */\n            function listCacheHas(key) {\n              return assocIndexOf(this.__data__, key) > -1;\n            }\n\n            /**\n             * Sets the list cache `key` to `value`.\n             *\n             * @private\n             * @name set\n             * @memberOf ListCache\n             * @param {string} key The key of the value to set.\n             * @param {*} value The value to set.\n             * @returns {Object} Returns the list cache instance.\n             */\n            function listCacheSet(key, value) {\n              var data = this.__data__,\n                  index = assocIndexOf(data, key);\n\n              if (index < 0) {\n                data.push([key, value]);\n              } else {\n                data[index][1] = value;\n              }\n              return this;\n            }\n\n            // Add methods to `ListCache`.\n            ListCache.prototype.clear = listCacheClear;\n            ListCache.prototype['delete'] = listCacheDelete;\n            ListCache.prototype.get = listCacheGet;\n            ListCache.prototype.has = listCacheHas;\n            ListCache.prototype.set = listCacheSet;\n\n            /**\n             * Creates a map cache object to store key-value pairs.\n             *\n             * @private\n             * @constructor\n             * @param {Array} [entries] The key-value pairs to cache.\n             */\n            function MapCache(entries) {\n              var index = -1,\n                  length = entries ? entries.length : 0;\n\n              this.clear();\n              while (++index < length) {\n                var entry = entries[index];\n                this.set(entry[0], entry[1]);\n              }\n            }\n\n            /**\n             * Removes all key-value entries from the map.\n             *\n             * @private\n             * @name clear\n             * @memberOf MapCache\n             */\n            function mapCacheClear() {\n              this.__data__ = {\n                'hash': new Hash,\n                'map': new (Map || ListCache),\n                'string': new Hash\n              };\n            }\n\n            /**\n             * Removes `key` and its value from the map.\n             *\n             * @private\n             * @name delete\n             * @memberOf MapCache\n             * @param {string} key The key of the value to remove.\n             * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n             */\n            function mapCacheDelete(key) {\n              return getMapData(this, key)['delete'](key);\n            }\n\n            /**\n             * Gets the map value for `key`.\n             *\n             * @private\n             * @name get\n             * @memberOf MapCache\n             * @param {string} key The key of the value to get.\n             * @returns {*} Returns the entry value.\n             */\n            function mapCacheGet(key) {\n              return getMapData(this, key).get(key);\n            }\n\n            /**\n             * Checks if a map value for `key` exists.\n             *\n             * @private\n             * @name has\n             * @memberOf MapCache\n             * @param {string} key The key of the entry to check.\n             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n             */\n            function mapCacheHas(key) {\n              return getMapData(this, key).has(key);\n            }\n\n            /**\n             * Sets the map `key` to `value`.\n             *\n             * @private\n             * @name set\n             * @memberOf MapCache\n             * @param {string} key The key of the value to set.\n             * @param {*} value The value to set.\n             * @returns {Object} Returns the map cache instance.\n             */\n            function mapCacheSet(key, value) {\n              getMapData(this, key).set(key, value);\n              return this;\n            }\n\n            // Add methods to `MapCache`.\n            MapCache.prototype.clear = mapCacheClear;\n            MapCache.prototype['delete'] = mapCacheDelete;\n            MapCache.prototype.get = mapCacheGet;\n            MapCache.prototype.has = mapCacheHas;\n            MapCache.prototype.set = mapCacheSet;\n\n            /**\n             * Creates a stack cache object to store key-value pairs.\n             *\n             * @private\n             * @constructor\n             * @param {Array} [entries] The key-value pairs to cache.\n             */\n            function Stack(entries) {\n              this.__data__ = new ListCache(entries);\n            }\n\n            /**\n             * Removes all key-value entries from the stack.\n             *\n             * @private\n             * @name clear\n             * @memberOf Stack\n             */\n            function stackClear() {\n              this.__data__ = new ListCache;\n            }\n\n            /**\n             * Removes `key` and its value from the stack.\n             *\n             * @private\n             * @name delete\n             * @memberOf Stack\n             * @param {string} key The key of the value to remove.\n             * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n             */\n            function stackDelete(key) {\n              return this.__data__['delete'](key);\n            }\n\n            /**\n             * Gets the stack value for `key`.\n             *\n             * @private\n             * @name get\n             * @memberOf Stack\n             * @param {string} key The key of the value to get.\n             * @returns {*} Returns the entry value.\n             */\n            function stackGet(key) {\n              return this.__data__.get(key);\n            }\n\n            /**\n             * Checks if a stack value for `key` exists.\n             *\n             * @private\n             * @name has\n             * @memberOf Stack\n             * @param {string} key The key of the entry to check.\n             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n             */\n            function stackHas(key) {\n              return this.__data__.has(key);\n            }\n\n            /**\n             * Sets the stack `key` to `value`.\n             *\n             * @private\n             * @name set\n             * @memberOf Stack\n             * @param {string} key The key of the value to set.\n             * @param {*} value The value to set.\n             * @returns {Object} Returns the stack cache instance.\n             */\n            function stackSet(key, value) {\n              var cache = this.__data__;\n              if (cache instanceof ListCache) {\n                var pairs = cache.__data__;\n                if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n                  pairs.push([key, value]);\n                  return this;\n                }\n                cache = this.__data__ = new MapCache(pairs);\n              }\n              cache.set(key, value);\n              return this;\n            }\n\n            // Add methods to `Stack`.\n            Stack.prototype.clear = stackClear;\n            Stack.prototype['delete'] = stackDelete;\n            Stack.prototype.get = stackGet;\n            Stack.prototype.has = stackHas;\n            Stack.prototype.set = stackSet;\n\n            /**\n             * Creates an array of the enumerable property names of the array-like `value`.\n             *\n             * @private\n             * @param {*} value The value to query.\n             * @param {boolean} inherited Specify returning inherited property names.\n             * @returns {Array} Returns the array of property names.\n             */\n            function arrayLikeKeys(value, inherited) {\n              // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n              // Safari 9 makes `arguments.length` enumerable in strict mode.\n              var result = (isArray(value) || isArguments(value))\n                ? baseTimes(value.length, String)\n                : [];\n\n              var length = result.length,\n                  skipIndexes = !!length;\n\n              for (var key in value) {\n                if ((inherited || hasOwnProperty.call(value, key)) &&\n                    !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n                  result.push(key);\n                }\n              }\n              return result;\n            }\n\n            /**\n             * Assigns `value` to `key` of `object` if the existing value is not equivalent\n             * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n             * for equality comparisons.\n             *\n             * @private\n             * @param {Object} object The object to modify.\n             * @param {string} key The key of the property to assign.\n             * @param {*} value The value to assign.\n             */\n            function assignValue(object, key, value) {\n              var objValue = object[key];\n              if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n                  (value === undefined && !(key in object))) {\n                object[key] = value;\n              }\n            }\n\n            /**\n             * Gets the index at which the `key` is found in `array` of key-value pairs.\n             *\n             * @private\n             * @param {Array} array The array to inspect.\n             * @param {*} key The key to search for.\n             * @returns {number} Returns the index of the matched value, else `-1`.\n             */\n            function assocIndexOf(array, key) {\n              var length = array.length;\n              while (length--) {\n                if (eq(array[length][0], key)) {\n                  return length;\n                }\n              }\n              return -1;\n            }\n\n            /**\n             * The base implementation of `_.assign` without support for multiple sources\n             * or `customizer` functions.\n             *\n             * @private\n             * @param {Object} object The destination object.\n             * @param {Object} source The source object.\n             * @returns {Object} Returns `object`.\n             */\n            function baseAssign(object, source) {\n              return object && copyObject(source, keys(source), object);\n            }\n\n            /**\n             * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n             * traversed objects.\n             *\n             * @private\n             * @param {*} value The value to clone.\n             * @param {boolean} [isDeep] Specify a deep clone.\n             * @param {boolean} [isFull] Specify a clone including symbols.\n             * @param {Function} [customizer] The function to customize cloning.\n             * @param {string} [key] The key of `value`.\n             * @param {Object} [object] The parent object of `value`.\n             * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n             * @returns {*} Returns the cloned value.\n             */\n            function baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n              var result;\n              if (customizer) {\n                result = object ? customizer(value, key, object, stack) : customizer(value);\n              }\n              if (result !== undefined) {\n                return result;\n              }\n              if (!isObject(value)) {\n                return value;\n              }\n              var isArr = isArray(value);\n              if (isArr) {\n                result = initCloneArray(value);\n                if (!isDeep) {\n                  return copyArray(value, result);\n                }\n              } else {\n                var tag = getTag(value),\n                    isFunc = tag == funcTag || tag == genTag;\n\n                if (isBuffer(value)) {\n                  return cloneBuffer(value, isDeep);\n                }\n                if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n                  if (isHostObject(value)) {\n                    return object ? value : {};\n                  }\n                  result = initCloneObject(isFunc ? {} : value);\n                  if (!isDeep) {\n                    return copySymbols(value, baseAssign(result, value));\n                  }\n                } else {\n                  {\n                    return object ? value : {};\n                  }\n                  result = initCloneByTag(value, tag, baseClone, isDeep);\n                }\n              }\n              // Check for circular references and return its corresponding clone.\n              stack || (stack = new Stack);\n              var stacked = stack.get(value);\n              if (stacked) {\n                return stacked;\n              }\n              stack.set(value, result);\n\n              if (!isArr) {\n                var props = isFull ? getAllKeys(value) : keys(value);\n              }\n              arrayEach(props || value, function(subValue, key) {\n                if (props) {\n                  key = subValue;\n                  subValue = value[key];\n                }\n                // Recursively populate clone (susceptible to call stack limits).\n                assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n              });\n              return result;\n            }\n\n            /**\n             * The base implementation of `_.create` without support for assigning\n             * properties to the created object.\n             *\n             * @private\n             * @param {Object} prototype The object to inherit from.\n             * @returns {Object} Returns the new object.\n             */\n            function baseCreate(proto) {\n              return isObject(proto) ? objectCreate(proto) : {};\n            }\n\n            /**\n             * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n             * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n             * symbols of `object`.\n             *\n             * @private\n             * @param {Object} object The object to query.\n             * @param {Function} keysFunc The function to get the keys of `object`.\n             * @param {Function} symbolsFunc The function to get the symbols of `object`.\n             * @returns {Array} Returns the array of property names and symbols.\n             */\n            function baseGetAllKeys(object, keysFunc, symbolsFunc) {\n              var result = keysFunc(object);\n              return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n            }\n\n            /**\n             * The base implementation of `getTag`.\n             *\n             * @private\n             * @param {*} value The value to query.\n             * @returns {string} Returns the `toStringTag`.\n             */\n            function baseGetTag(value) {\n              return objectToString.call(value);\n            }\n\n            /**\n             * The base implementation of `_.isNative` without bad shim checks.\n             *\n             * @private\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is a native function,\n             *  else `false`.\n             */\n            function baseIsNative(value) {\n              if (!isObject(value) || isMasked(value)) {\n                return false;\n              }\n              var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n              return pattern.test(toSource(value));\n            }\n\n            /**\n             * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n             *\n             * @private\n             * @param {Object} object The object to query.\n             * @returns {Array} Returns the array of property names.\n             */\n            function baseKeys(object) {\n              if (!isPrototype(object)) {\n                return nativeKeys(object);\n              }\n              var result = [];\n              for (var key in Object(object)) {\n                if (hasOwnProperty.call(object, key) && key != 'constructor') {\n                  result.push(key);\n                }\n              }\n              return result;\n            }\n\n            /**\n             * Creates a clone of  `buffer`.\n             *\n             * @private\n             * @param {Buffer} buffer The buffer to clone.\n             * @param {boolean} [isDeep] Specify a deep clone.\n             * @returns {Buffer} Returns the cloned buffer.\n             */\n            function cloneBuffer(buffer, isDeep) {\n              if (isDeep) {\n                return buffer.slice();\n              }\n              var result = new buffer.constructor(buffer.length);\n              buffer.copy(result);\n              return result;\n            }\n\n            /**\n             * Creates a clone of `arrayBuffer`.\n             *\n             * @private\n             * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n             * @returns {ArrayBuffer} Returns the cloned array buffer.\n             */\n            function cloneArrayBuffer(arrayBuffer) {\n              var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n              new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n              return result;\n            }\n\n            /**\n             * Creates a clone of `dataView`.\n             *\n             * @private\n             * @param {Object} dataView The data view to clone.\n             * @param {boolean} [isDeep] Specify a deep clone.\n             * @returns {Object} Returns the cloned data view.\n             */\n            function cloneDataView(dataView, isDeep) {\n              var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n              return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n            }\n\n            /**\n             * Creates a clone of `map`.\n             *\n             * @private\n             * @param {Object} map The map to clone.\n             * @param {Function} cloneFunc The function to clone values.\n             * @param {boolean} [isDeep] Specify a deep clone.\n             * @returns {Object} Returns the cloned map.\n             */\n            function cloneMap(map, isDeep, cloneFunc) {\n              var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n              return arrayReduce(array, addMapEntry, new map.constructor);\n            }\n\n            /**\n             * Creates a clone of `regexp`.\n             *\n             * @private\n             * @param {Object} regexp The regexp to clone.\n             * @returns {Object} Returns the cloned regexp.\n             */\n            function cloneRegExp(regexp) {\n              var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n              result.lastIndex = regexp.lastIndex;\n              return result;\n            }\n\n            /**\n             * Creates a clone of `set`.\n             *\n             * @private\n             * @param {Object} set The set to clone.\n             * @param {Function} cloneFunc The function to clone values.\n             * @param {boolean} [isDeep] Specify a deep clone.\n             * @returns {Object} Returns the cloned set.\n             */\n            function cloneSet(set, isDeep, cloneFunc) {\n              var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n              return arrayReduce(array, addSetEntry, new set.constructor);\n            }\n\n            /**\n             * Creates a clone of the `symbol` object.\n             *\n             * @private\n             * @param {Object} symbol The symbol object to clone.\n             * @returns {Object} Returns the cloned symbol object.\n             */\n            function cloneSymbol(symbol) {\n              return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n            }\n\n            /**\n             * Creates a clone of `typedArray`.\n             *\n             * @private\n             * @param {Object} typedArray The typed array to clone.\n             * @param {boolean} [isDeep] Specify a deep clone.\n             * @returns {Object} Returns the cloned typed array.\n             */\n            function cloneTypedArray(typedArray, isDeep) {\n              var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n              return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n            }\n\n            /**\n             * Copies the values of `source` to `array`.\n             *\n             * @private\n             * @param {Array} source The array to copy values from.\n             * @param {Array} [array=[]] The array to copy values to.\n             * @returns {Array} Returns `array`.\n             */\n            function copyArray(source, array) {\n              var index = -1,\n                  length = source.length;\n\n              array || (array = Array(length));\n              while (++index < length) {\n                array[index] = source[index];\n              }\n              return array;\n            }\n\n            /**\n             * Copies properties of `source` to `object`.\n             *\n             * @private\n             * @param {Object} source The object to copy properties from.\n             * @param {Array} props The property identifiers to copy.\n             * @param {Object} [object={}] The object to copy properties to.\n             * @param {Function} [customizer] The function to customize copied values.\n             * @returns {Object} Returns `object`.\n             */\n            function copyObject(source, props, object, customizer) {\n              object || (object = {});\n\n              var index = -1,\n                  length = props.length;\n\n              while (++index < length) {\n                var key = props[index];\n\n                var newValue = customizer\n                  ? customizer(object[key], source[key], key, object, source)\n                  : undefined;\n\n                assignValue(object, key, newValue === undefined ? source[key] : newValue);\n              }\n              return object;\n            }\n\n            /**\n             * Copies own symbol properties of `source` to `object`.\n             *\n             * @private\n             * @param {Object} source The object to copy symbols from.\n             * @param {Object} [object={}] The object to copy symbols to.\n             * @returns {Object} Returns `object`.\n             */\n            function copySymbols(source, object) {\n              return copyObject(source, getSymbols(source), object);\n            }\n\n            /**\n             * Creates an array of own enumerable property names and symbols of `object`.\n             *\n             * @private\n             * @param {Object} object The object to query.\n             * @returns {Array} Returns the array of property names and symbols.\n             */\n            function getAllKeys(object) {\n              return baseGetAllKeys(object, keys, getSymbols);\n            }\n\n            /**\n             * Gets the data for `map`.\n             *\n             * @private\n             * @param {Object} map The map to query.\n             * @param {string} key The reference key.\n             * @returns {*} Returns the map data.\n             */\n            function getMapData(map, key) {\n              var data = map.__data__;\n              return isKeyable(key)\n                ? data[typeof key == 'string' ? 'string' : 'hash']\n                : data.map;\n            }\n\n            /**\n             * Gets the native function at `key` of `object`.\n             *\n             * @private\n             * @param {Object} object The object to query.\n             * @param {string} key The key of the method to get.\n             * @returns {*} Returns the function if it's native, else `undefined`.\n             */\n            function getNative(object, key) {\n              var value = getValue(object, key);\n              return baseIsNative(value) ? value : undefined;\n            }\n\n            /**\n             * Creates an array of the own enumerable symbol properties of `object`.\n             *\n             * @private\n             * @param {Object} object The object to query.\n             * @returns {Array} Returns the array of symbols.\n             */\n            var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n            /**\n             * Gets the `toStringTag` of `value`.\n             *\n             * @private\n             * @param {*} value The value to query.\n             * @returns {string} Returns the `toStringTag`.\n             */\n            var getTag = baseGetTag;\n\n            // Fallback for data views, maps, sets, and weak maps in IE 11,\n            // for data views in Edge < 14, and promises in Node.js.\n            if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n                (Map && getTag(new Map) != mapTag) ||\n                (Promise && getTag(Promise.resolve()) != promiseTag) ||\n                (Set && getTag(new Set) != setTag) ||\n                (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n              getTag = function(value) {\n                var result = objectToString.call(value),\n                    Ctor = result == objectTag ? value.constructor : undefined,\n                    ctorString = Ctor ? toSource(Ctor) : undefined;\n\n                if (ctorString) {\n                  switch (ctorString) {\n                    case dataViewCtorString: return dataViewTag;\n                    case mapCtorString: return mapTag;\n                    case promiseCtorString: return promiseTag;\n                    case setCtorString: return setTag;\n                    case weakMapCtorString: return weakMapTag;\n                  }\n                }\n                return result;\n              };\n            }\n\n            /**\n             * Initializes an array clone.\n             *\n             * @private\n             * @param {Array} array The array to clone.\n             * @returns {Array} Returns the initialized clone.\n             */\n            function initCloneArray(array) {\n              var length = array.length,\n                  result = array.constructor(length);\n\n              // Add properties assigned by `RegExp#exec`.\n              if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n                result.index = array.index;\n                result.input = array.input;\n              }\n              return result;\n            }\n\n            /**\n             * Initializes an object clone.\n             *\n             * @private\n             * @param {Object} object The object to clone.\n             * @returns {Object} Returns the initialized clone.\n             */\n            function initCloneObject(object) {\n              return (typeof object.constructor == 'function' && !isPrototype(object))\n                ? baseCreate(getPrototype(object))\n                : {};\n            }\n\n            /**\n             * Initializes an object clone based on its `toStringTag`.\n             *\n             * **Note:** This function only supports cloning values with tags of\n             * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n             *\n             * @private\n             * @param {Object} object The object to clone.\n             * @param {string} tag The `toStringTag` of the object to clone.\n             * @param {Function} cloneFunc The function to clone values.\n             * @param {boolean} [isDeep] Specify a deep clone.\n             * @returns {Object} Returns the initialized clone.\n             */\n            function initCloneByTag(object, tag, cloneFunc, isDeep) {\n              var Ctor = object.constructor;\n              switch (tag) {\n                case arrayBufferTag:\n                  return cloneArrayBuffer(object);\n\n                case boolTag:\n                case dateTag:\n                  return new Ctor(+object);\n\n                case dataViewTag:\n                  return cloneDataView(object, isDeep);\n\n                case float32Tag: case float64Tag:\n                case int8Tag: case int16Tag: case int32Tag:\n                case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n                  return cloneTypedArray(object, isDeep);\n\n                case mapTag:\n                  return cloneMap(object, isDeep, cloneFunc);\n\n                case numberTag:\n                case stringTag:\n                  return new Ctor(object);\n\n                case regexpTag:\n                  return cloneRegExp(object);\n\n                case setTag:\n                  return cloneSet(object, isDeep, cloneFunc);\n\n                case symbolTag:\n                  return cloneSymbol(object);\n              }\n            }\n\n            /**\n             * Checks if `value` is a valid array-like index.\n             *\n             * @private\n             * @param {*} value The value to check.\n             * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n             * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n             */\n            function isIndex(value, length) {\n              length = length == null ? MAX_SAFE_INTEGER : length;\n              return !!length &&\n                (typeof value == 'number' || reIsUint.test(value)) &&\n                (value > -1 && value % 1 == 0 && value < length);\n            }\n\n            /**\n             * Checks if `value` is suitable for use as unique object key.\n             *\n             * @private\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n             */\n            function isKeyable(value) {\n              var type = typeof value;\n              return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n                ? (value !== '__proto__')\n                : (value === null);\n            }\n\n            /**\n             * Checks if `func` has its source masked.\n             *\n             * @private\n             * @param {Function} func The function to check.\n             * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n             */\n            function isMasked(func) {\n              return !!maskSrcKey && (maskSrcKey in func);\n            }\n\n            /**\n             * Checks if `value` is likely a prototype object.\n             *\n             * @private\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n             */\n            function isPrototype(value) {\n              var Ctor = value && value.constructor,\n                  proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n              return value === proto;\n            }\n\n            /**\n             * Converts `func` to its source code.\n             *\n             * @private\n             * @param {Function} func The function to process.\n             * @returns {string} Returns the source code.\n             */\n            function toSource(func) {\n              if (func != null) {\n                try {\n                  return funcToString.call(func);\n                } catch (e) {}\n                try {\n                  return (func + '');\n                } catch (e) {}\n              }\n              return '';\n            }\n\n            /**\n             * This method is like `_.clone` except that it recursively clones `value`.\n             *\n             * @static\n             * @memberOf _\n             * @since 1.0.0\n             * @category Lang\n             * @param {*} value The value to recursively clone.\n             * @returns {*} Returns the deep cloned value.\n             * @see _.clone\n             * @example\n             *\n             * var objects = [{ 'a': 1 }, { 'b': 2 }];\n             *\n             * var deep = _.cloneDeep(objects);\n             * console.log(deep[0] === objects[0]);\n             * // => false\n             */\n            function cloneDeep(value) {\n              return baseClone(value, true, true);\n            }\n\n            /**\n             * Performs a\n             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n             * comparison between two values to determine if they are equivalent.\n             *\n             * @static\n             * @memberOf _\n             * @since 4.0.0\n             * @category Lang\n             * @param {*} value The value to compare.\n             * @param {*} other The other value to compare.\n             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n             * @example\n             *\n             * var object = { 'a': 1 };\n             * var other = { 'a': 1 };\n             *\n             * _.eq(object, object);\n             * // => true\n             *\n             * _.eq(object, other);\n             * // => false\n             *\n             * _.eq('a', 'a');\n             * // => true\n             *\n             * _.eq('a', Object('a'));\n             * // => false\n             *\n             * _.eq(NaN, NaN);\n             * // => true\n             */\n            function eq(value, other) {\n              return value === other || (value !== value && other !== other);\n            }\n\n            /**\n             * Checks if `value` is likely an `arguments` object.\n             *\n             * @static\n             * @memberOf _\n             * @since 0.1.0\n             * @category Lang\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n             *  else `false`.\n             * @example\n             *\n             * _.isArguments(function() { return arguments; }());\n             * // => true\n             *\n             * _.isArguments([1, 2, 3]);\n             * // => false\n             */\n            function isArguments(value) {\n              // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n              return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n                (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n            }\n\n            /**\n             * Checks if `value` is classified as an `Array` object.\n             *\n             * @static\n             * @memberOf _\n             * @since 0.1.0\n             * @category Lang\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n             * @example\n             *\n             * _.isArray([1, 2, 3]);\n             * // => true\n             *\n             * _.isArray(document.body.children);\n             * // => false\n             *\n             * _.isArray('abc');\n             * // => false\n             *\n             * _.isArray(_.noop);\n             * // => false\n             */\n            var isArray = Array.isArray;\n\n            /**\n             * Checks if `value` is array-like. A value is considered array-like if it's\n             * not a function and has a `value.length` that's an integer greater than or\n             * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n             *\n             * @static\n             * @memberOf _\n             * @since 4.0.0\n             * @category Lang\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n             * @example\n             *\n             * _.isArrayLike([1, 2, 3]);\n             * // => true\n             *\n             * _.isArrayLike(document.body.children);\n             * // => true\n             *\n             * _.isArrayLike('abc');\n             * // => true\n             *\n             * _.isArrayLike(_.noop);\n             * // => false\n             */\n            function isArrayLike(value) {\n              return value != null && isLength(value.length) && !isFunction(value);\n            }\n\n            /**\n             * This method is like `_.isArrayLike` except that it also checks if `value`\n             * is an object.\n             *\n             * @static\n             * @memberOf _\n             * @since 4.0.0\n             * @category Lang\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is an array-like object,\n             *  else `false`.\n             * @example\n             *\n             * _.isArrayLikeObject([1, 2, 3]);\n             * // => true\n             *\n             * _.isArrayLikeObject(document.body.children);\n             * // => true\n             *\n             * _.isArrayLikeObject('abc');\n             * // => false\n             *\n             * _.isArrayLikeObject(_.noop);\n             * // => false\n             */\n            function isArrayLikeObject(value) {\n              return isObjectLike(value) && isArrayLike(value);\n            }\n\n            /**\n             * Checks if `value` is a buffer.\n             *\n             * @static\n             * @memberOf _\n             * @since 4.3.0\n             * @category Lang\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n             * @example\n             *\n             * _.isBuffer(new Buffer(2));\n             * // => true\n             *\n             * _.isBuffer(new Uint8Array(2));\n             * // => false\n             */\n            var isBuffer = nativeIsBuffer || stubFalse;\n\n            /**\n             * Checks if `value` is classified as a `Function` object.\n             *\n             * @static\n             * @memberOf _\n             * @since 0.1.0\n             * @category Lang\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n             * @example\n             *\n             * _.isFunction(_);\n             * // => true\n             *\n             * _.isFunction(/abc/);\n             * // => false\n             */\n            function isFunction(value) {\n              // The use of `Object#toString` avoids issues with the `typeof` operator\n              // in Safari 8-9 which returns 'object' for typed array and other constructors.\n              var tag = isObject(value) ? objectToString.call(value) : '';\n              return tag == funcTag || tag == genTag;\n            }\n\n            /**\n             * Checks if `value` is a valid array-like length.\n             *\n             * **Note:** This method is loosely based on\n             * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n             *\n             * @static\n             * @memberOf _\n             * @since 4.0.0\n             * @category Lang\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n             * @example\n             *\n             * _.isLength(3);\n             * // => true\n             *\n             * _.isLength(Number.MIN_VALUE);\n             * // => false\n             *\n             * _.isLength(Infinity);\n             * // => false\n             *\n             * _.isLength('3');\n             * // => false\n             */\n            function isLength(value) {\n              return typeof value == 'number' &&\n                value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n            }\n\n            /**\n             * Checks if `value` is the\n             * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n             * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n             *\n             * @static\n             * @memberOf _\n             * @since 0.1.0\n             * @category Lang\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n             * @example\n             *\n             * _.isObject({});\n             * // => true\n             *\n             * _.isObject([1, 2, 3]);\n             * // => true\n             *\n             * _.isObject(_.noop);\n             * // => true\n             *\n             * _.isObject(null);\n             * // => false\n             */\n            function isObject(value) {\n              var type = typeof value;\n              return !!value && (type == 'object' || type == 'function');\n            }\n\n            /**\n             * Checks if `value` is object-like. A value is object-like if it's not `null`\n             * and has a `typeof` result of \"object\".\n             *\n             * @static\n             * @memberOf _\n             * @since 4.0.0\n             * @category Lang\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n             * @example\n             *\n             * _.isObjectLike({});\n             * // => true\n             *\n             * _.isObjectLike([1, 2, 3]);\n             * // => true\n             *\n             * _.isObjectLike(_.noop);\n             * // => false\n             *\n             * _.isObjectLike(null);\n             * // => false\n             */\n            function isObjectLike(value) {\n              return !!value && typeof value == 'object';\n            }\n\n            /**\n             * Creates an array of the own enumerable property names of `object`.\n             *\n             * **Note:** Non-object values are coerced to objects. See the\n             * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n             * for more details.\n             *\n             * @static\n             * @since 0.1.0\n             * @memberOf _\n             * @category Object\n             * @param {Object} object The object to query.\n             * @returns {Array} Returns the array of property names.\n             * @example\n             *\n             * function Foo() {\n             *   this.a = 1;\n             *   this.b = 2;\n             * }\n             *\n             * Foo.prototype.c = 3;\n             *\n             * _.keys(new Foo);\n             * // => ['a', 'b'] (iteration order is not guaranteed)\n             *\n             * _.keys('hi');\n             * // => ['0', '1']\n             */\n            function keys(object) {\n              return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n            }\n\n            /**\n             * This method returns a new empty array.\n             *\n             * @static\n             * @memberOf _\n             * @since 4.13.0\n             * @category Util\n             * @returns {Array} Returns the new empty array.\n             * @example\n             *\n             * var arrays = _.times(2, _.stubArray);\n             *\n             * console.log(arrays);\n             * // => [[], []]\n             *\n             * console.log(arrays[0] === arrays[1]);\n             * // => false\n             */\n            function stubArray() {\n              return [];\n            }\n\n            /**\n             * This method returns `false`.\n             *\n             * @static\n             * @memberOf _\n             * @since 4.13.0\n             * @category Util\n             * @returns {boolean} Returns `false`.\n             * @example\n             *\n             * _.times(2, _.stubFalse);\n             * // => [false, false]\n             */\n            function stubFalse() {\n              return false;\n            }\n\n            module.exports = cloneDeep;\n            });\n\n            var os$2 = ( os$1 && os ) || os$1;\n\n            var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n              return typeof obj;\n            } : function (obj) {\n              return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n\n            var classCallCheck = function (instance, Constructor) {\n              if (!(instance instanceof Constructor)) {\n                throw new TypeError(\"Cannot call a class as a function\");\n              }\n            };\n\n            var createClass = function () {\n              function defineProperties(target, props) {\n                for (var i = 0; i < props.length; i++) {\n                  var descriptor = props[i];\n                  descriptor.enumerable = descriptor.enumerable || false;\n                  descriptor.configurable = true;\n                  if (\"value\" in descriptor) descriptor.writable = true;\n                  Object.defineProperty(target, descriptor.key, descriptor);\n                }\n              }\n\n              return function (Constructor, protoProps, staticProps) {\n                if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                if (staticProps) defineProperties(Constructor, staticProps);\n                return Constructor;\n              };\n            }();\n\n            var inherits = function (subClass, superClass) {\n              if (typeof superClass !== \"function\" && superClass !== null) {\n                throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n              }\n\n              subClass.prototype = Object.create(superClass && superClass.prototype, {\n                constructor: {\n                  value: subClass,\n                  enumerable: false,\n                  writable: true,\n                  configurable: true\n                }\n              });\n              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n            };\n\n            var possibleConstructorReturn = function (self, call) {\n              if (!self) {\n                throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n              }\n\n              return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n            };\n\n            var JSON2CSVBase = function () {\n              function JSON2CSVBase(opts) {\n                classCallCheck(this, JSON2CSVBase);\n\n                this.opts = this.preprocessOpts(opts);\n              }\n\n              /**\n               * Check passing opts and set defaults.\n               *\n               * @param {Json2CsvOptions} opts Options object containing fields,\n               * delimiter, default value, quote mark, header, etc.\n               */\n\n\n              createClass(JSON2CSVBase, [{\n                key: 'preprocessOpts',\n                value: function preprocessOpts(opts) {\n                  var processedOpts = Object.assign({}, opts);\n                  processedOpts.unwind = !Array.isArray(processedOpts.unwind) ? processedOpts.unwind ? [processedOpts.unwind] : [] : processedOpts.unwind;\n                  processedOpts.delimiter = processedOpts.delimiter || ',';\n                  processedOpts.flattenSeparator = processedOpts.flattenSeparator || '.';\n                  processedOpts.eol = processedOpts.eol || os$2.EOL;\n                  processedOpts.quote = typeof processedOpts.quote === 'string' ? opts.quote : '\"';\n                  processedOpts.doubleQuote = typeof processedOpts.doubleQuote === 'string' ? processedOpts.doubleQuote : Array(3).join(processedOpts.quote);\n                  processedOpts.header = processedOpts.header !== false;\n                  processedOpts.includeEmptyRows = processedOpts.includeEmptyRows || false;\n                  processedOpts.withBOM = processedOpts.withBOM || false;\n\n                  return processedOpts;\n                }\n\n                /**\n                 * Create the title row with all the provided fields as column headings\n                 *\n                 * @returns {String} titles as a string\n                 */\n\n              }, {\n                key: 'getHeader',\n                value: function getHeader() {\n                  var _this = this;\n\n                  return this.opts.fields.map(function (field) {\n                    return typeof field === 'string' ? field : field.label || field.value;\n                  }).map(function (header) {\n                    return _this.processValue(header, true);\n                  }).join(this.opts.delimiter);\n                }\n\n                /**\n                 * Preprocess each object according to the give opts (unwind, flatten, etc.).\n                 *\n                 * @param {Object} row JSON object to be converted in a CSV row\n                 */\n\n              }, {\n                key: 'preprocessRow',\n                value: function preprocessRow(row) {\n                  var _this2 = this;\n\n                  var processedRow = this.opts.unwind && this.opts.unwind.length ? this.unwindData(row, this.opts.unwind) : [row];\n\n                  if (this.opts.flatten) {\n                    return processedRow.map(function (row) {\n                      return _this2.flatten(row, _this2.opts.flattenSeparator);\n                    });\n                  }\n\n                  return processedRow;\n                }\n\n                /**\n                 * Create the content of a specific CSV row\n                 *\n                 * @param {Object} row JSON object to be converted in a CSV row\n                 * @returns {String} CSV string (row)\n                 */\n\n              }, {\n                key: 'processRow',\n                value: function processRow(row) {\n                  var _this3 = this;\n\n                  if (!row || Object.getOwnPropertyNames(row).length === 0 && !this.opts.includeEmptyRows) {\n                    return undefined;\n                  }\n\n                  return this.opts.fields.map(function (fieldInfo) {\n                    return _this3.processCell(row, fieldInfo);\n                  }).join(this.opts.delimiter);\n                }\n\n                /**\n                 * Create the content of a specfic CSV row cell\n                 *\n                 * @param {Object} row JSON object representing the  CSV row that the cell belongs to\n                 * @param {Object} fieldInfo Details of the field to process to be a CSV cell\n                 * @returns {String} CSV string (cell)\n                 */\n\n              }, {\n                key: 'processCell',\n                value: function processCell(row, fieldInfo) {\n                  var stringify = (typeof fieldInfo === 'undefined' ? 'undefined' : _typeof(fieldInfo)) === 'object' && fieldInfo.stringify !== undefined ? fieldInfo.stringify : true;\n\n                  return this.processValue(this.getValue(row, fieldInfo), stringify);\n                }\n\n                /**\n                 * Create the content of a specfic CSV row cell\n                 *\n                 * @param {Object} row JSON object representing the  CSV row that the cell belongs to\n                 * @param {Object} fieldInfo Details of the field to process to be a CSV cell\n                 * @returns {Any} Field value\n                 */\n\n              }, {\n                key: 'getValue',\n                value: function getValue(row, fieldInfo) {\n                  var defaultValue = (typeof fieldInfo === 'undefined' ? 'undefined' : _typeof(fieldInfo)) === 'object' && 'default' in fieldInfo ? fieldInfo.default : this.opts.defaultValue;\n\n                  var value = void 0;\n                  if (fieldInfo) {\n                    if (typeof fieldInfo === 'string') {\n                      value = lodash_get(row, fieldInfo, defaultValue);\n                    } else if ((typeof fieldInfo === 'undefined' ? 'undefined' : _typeof(fieldInfo)) === 'object') {\n                      if (typeof fieldInfo.value === 'string') {\n                        value = lodash_get(row, fieldInfo.value, defaultValue);\n                      } else if (typeof fieldInfo.value === 'function') {\n                        var field = {\n                          label: fieldInfo.label,\n                          default: fieldInfo.default\n                        };\n                        value = fieldInfo.value(row, field);\n                      }\n                    }\n                  }\n\n                  return value === null || value === undefined ? defaultValue : value;\n                }\n\n                /**\n                 * Create the content of a specfic CSV row cell\n                 *\n                 * @param {Any} value Value to be included in a CSV cell\n                 * @param {Boolean} stringify Details of the field to process to be a CSV cell\n                 * @returns {String} Value stringified and processed\n                 */\n\n              }, {\n                key: 'processValue',\n                value: function processValue(value, stringify) {\n                  if (value === null || value === undefined) {\n                    return undefined;\n                  }\n\n                  var isValueString = typeof value === 'string';\n                  if (isValueString) {\n                    value = value.replace(/\\n/g, '\\u2028').replace(/\\r/g, '\\u2029').replace(/\\t/g, '\\u21E5');\n                  }\n\n                  //JSON.stringify('\\\\') results in a string with two backslash\n                  //characters in it. I.e. '\\\\\\\\'.\n                  var stringifiedValue = stringify ? JSON.stringify(value) : value;\n\n                  if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && !/^\"(.*)\"$/.test(stringifiedValue)) {\n                    // Stringify object that are not stringified to a\n                    // JSON string (like Date) to escape commas, quotes, etc.\n                    stringifiedValue = JSON.stringify(stringifiedValue);\n                  }\n\n                  if (stringifiedValue === undefined) {\n                    return undefined;\n                  }\n\n                  if (isValueString) {\n                    stringifiedValue = stringifiedValue.replace(/\\u2028/g, '\\n').replace(/\\u2029/g, '\\r').replace(/\\u21E5/g, '\\t');\n                  }\n\n                  if (this.opts.quote === '\"') {\n                    // Replace automatically scaped single quotes by doubleQuotes\n                    stringifiedValue = stringifiedValue.replace(/(\\\\\")(?!$)/g, this.opts.doubleQuote);\n                  } else {\n                    // Unescape automatically escaped double quote symbol\n                    // Replace single quote with double quote\n                    // Replace wrapping quotes\n                    stringifiedValue = stringifiedValue.replace(/(\\\\\")(?!$)/g, '\"').replace(new RegExp(this.opts.quote, 'g'), this.opts.doubleQuote).replace(/^\"(.*)\"$/, this.opts.quote + '$1' + this.opts.quote);\n                  }\n\n                  // Remove double backslashes\n                  stringifiedValue = stringifiedValue.replace(/\\\\\\\\/g, '\\\\');\n\n                  if (this.opts.excelStrings && typeof value === 'string') {\n                    stringifiedValue = '\"=\"' + stringifiedValue + '\"\"';\n                  }\n\n                  return stringifiedValue;\n                }\n\n                /**\n                 * Performs the flattening of a data row recursively\n                 *\n                 * @param {Object} dataRow Original JSON object\n                 * @param {String} separator Separator to be used as the flattened field name\n                 * @returns {Object} Flattened object\n                 */\n\n              }, {\n                key: 'flatten',\n                value: function flatten(dataRow, separator) {\n                  function step(obj, flatDataRow, currentPath) {\n                    Object.keys(obj).forEach(function (key) {\n                      var value = obj[key];\n\n                      var newPath = currentPath ? '' + currentPath + separator + key : key;\n\n                      if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object' || value === null || Array.isArray(value) || Object.prototype.toString.call(value.toJSON) === '[object Function]' || !Object.keys(value).length) {\n                        flatDataRow[newPath] = value;\n                        return;\n                      }\n\n                      step(value, flatDataRow, newPath);\n                    });\n\n                    return flatDataRow;\n                  }\n\n                  return step(dataRow, {});\n                }\n\n                /**\n                 * Performs the unwind recursively in specified sequence\n                 *\n                 * @param {Object} dataRow Original JSON object\n                 * @param {String[]} unwindPaths The paths as strings to be used to deconstruct the array\n                 * @returns {Array} Array of objects containing all rows after unwind of chosen paths\n                */\n\n              }, {\n                key: 'unwindData',\n                value: function unwindData(dataRow, unwindPaths) {\n                  var _this4 = this;\n\n                  var unwind = function unwind(rows, unwindPath) {\n                    var clone = unwindPath.indexOf('.') !== -1 ? function (o) {\n                      return lodash_clonedeep(o);\n                    } : function (o) {\n                      return Object.assign({}, o);\n                    };\n\n                    return rows.map(function (row) {\n                      var unwindArray = lodash_get(row, unwindPath);\n\n                      if (!Array.isArray(unwindArray)) {\n                        return row;\n                      }\n\n                      if (!unwindArray.length) {\n                        return lodash_set(clone(row), unwindPath, undefined);\n                      }\n\n                      return unwindArray.map(function (unwindRow, index) {\n                        var clonedRow = _this4.opts.unwindBlank && index > 0 ? {} : clone(row);\n\n                        return lodash_set(clonedRow, unwindPath, unwindRow);\n                      });\n                    }).reduce(function (a, e) {\n                      return a.concat(e);\n                    }, []);\n                  };\n\n                  return unwindPaths.reduce(unwind, [dataRow]);\n                }\n              }]);\n              return JSON2CSVBase;\n            }();\n\n            var JSON2CSVBase_1 = JSON2CSVBase;\n\n            var JSON2CSVParser = function (_JSON2CSVBase) {\n              inherits(JSON2CSVParser, _JSON2CSVBase);\n\n              function JSON2CSVParser() {\n                classCallCheck(this, JSON2CSVParser);\n                return possibleConstructorReturn(this, (JSON2CSVParser.__proto__ || Object.getPrototypeOf(JSON2CSVParser)).apply(this, arguments));\n              }\n\n              createClass(JSON2CSVParser, [{\n                key: 'parse',\n\n                /**\n                 * Main function that converts json to csv.\n                 *\n                 * @param {Array|Object} data Array of JSON objects to be converted to CSV\n                 * @returns {String} The CSV formated data as a string\n                 */\n                value: function parse(data) {\n                  var processedData = this.preprocessData(data);\n\n                  if (!this.opts.fields) {\n                    var dataFields = processedData.map(function (item) {\n                      return Object.keys(item);\n                    }).reduce(function (tempData, rows) {\n                      return tempData.concat(rows);\n                    }, []);\n\n                    this.opts.fields = dataFields.filter(function (field, pos, arr) {\n                      return arr.indexOf(field) == pos;\n                    });\n                  }\n\n                  var header = this.opts.header ? this.getHeader() : '';\n                  var rows = this.processData(processedData);\n                  var csv = (this.opts.withBOM ? '\\uFEFF' : '') + header + (header && rows ? this.opts.eol : '') + rows;\n\n                  return csv;\n                }\n\n                /**\n                 * Preprocess the data according to the give opts (unwind, flatten, etc.)\n                  and calculate the fields and field names if they are not provided.\n                 *\n                 * @param {Array|Object} data Array or object to be converted to CSV\n                 */\n\n              }, {\n                key: 'preprocessData',\n                value: function preprocessData(data) {\n                  var _this2 = this;\n\n                  var processedData = Array.isArray(data) ? data : [data];\n\n                  if (!this.opts.fields && (processedData.length === 0 || _typeof(processedData[0]) !== 'object')) {\n                    throw new Error('Data should not be empty or the \"fields\" option should be included');\n                  }\n\n                  return processedData.map(function (row) {\n                    return _this2.preprocessRow(row);\n                  }).reduce(function (tempData, rows) {\n                    return tempData.concat(rows);\n                  }, []);\n                }\n\n                /**\n                 * Create the content row by row below the header\n                 *\n                 * @param {Array} data Array of JSON objects to be converted to CSV\n                 * @returns {String} CSV string (body)\n                 */\n\n              }, {\n                key: 'processData',\n                value: function processData(data) {\n                  var _this3 = this;\n\n                  return data.map(function (row) {\n                    return _this3.processRow(row);\n                  }).filter(function (row) {\n                    return row;\n                  }) // Filter empty rows\n                  .join(this.opts.eol);\n                }\n              }]);\n              return JSON2CSVParser;\n            }(JSON2CSVBase_1);\n\n            var JSON2CSVParser_1 = JSON2CSVParser;\n\n            var domain;\n\n            // This constructor is used to store event handlers. Instantiating this is\n            // faster than explicitly calling `Object.create(null)` to get a \"clean\" empty\n            // object (tested with v8 v4.9).\n            function EventHandlers() {}\n            EventHandlers.prototype = Object.create(null);\n\n            function EventEmitter() {\n              EventEmitter.init.call(this);\n            }\n\n            // nodejs oddity\n            // require('events') === require('events').EventEmitter\n            EventEmitter.EventEmitter = EventEmitter;\n\n            EventEmitter.usingDomains = false;\n\n            EventEmitter.prototype.domain = undefined;\n            EventEmitter.prototype._events = undefined;\n            EventEmitter.prototype._maxListeners = undefined;\n\n            // By default EventEmitters will print a warning if more than 10 listeners are\n            // added to it. This is a useful default which helps finding memory leaks.\n            EventEmitter.defaultMaxListeners = 10;\n\n            EventEmitter.init = function() {\n              this.domain = null;\n              if (EventEmitter.usingDomains) {\n                // if there is an active domain, then attach to it.\n                if (domain.active) ;\n              }\n\n              if (!this._events || this._events === Object.getPrototypeOf(this)._events) {\n                this._events = new EventHandlers();\n                this._eventsCount = 0;\n              }\n\n              this._maxListeners = this._maxListeners || undefined;\n            };\n\n            // Obviously not all Emitters should be limited to 10. This function allows\n            // that to be increased. Set to zero for unlimited.\n            EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n              if (typeof n !== 'number' || n < 0 || isNaN(n))\n                throw new TypeError('\"n\" argument must be a positive number');\n              this._maxListeners = n;\n              return this;\n            };\n\n            function $getMaxListeners(that) {\n              if (that._maxListeners === undefined)\n                return EventEmitter.defaultMaxListeners;\n              return that._maxListeners;\n            }\n\n            EventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n              return $getMaxListeners(this);\n            };\n\n            // These standalone emit* functions are used to optimize calling of event\n            // handlers for fast cases because emit() itself often has a variable number of\n            // arguments and can be deoptimized because of that. These functions always have\n            // the same number of arguments and thus do not get deoptimized, so the code\n            // inside them can execute faster.\n            function emitNone(handler, isFn, self) {\n              if (isFn)\n                handler.call(self);\n              else {\n                var len = handler.length;\n                var listeners = arrayClone(handler, len);\n                for (var i = 0; i < len; ++i)\n                  listeners[i].call(self);\n              }\n            }\n            function emitOne(handler, isFn, self, arg1) {\n              if (isFn)\n                handler.call(self, arg1);\n              else {\n                var len = handler.length;\n                var listeners = arrayClone(handler, len);\n                for (var i = 0; i < len; ++i)\n                  listeners[i].call(self, arg1);\n              }\n            }\n            function emitTwo(handler, isFn, self, arg1, arg2) {\n              if (isFn)\n                handler.call(self, arg1, arg2);\n              else {\n                var len = handler.length;\n                var listeners = arrayClone(handler, len);\n                for (var i = 0; i < len; ++i)\n                  listeners[i].call(self, arg1, arg2);\n              }\n            }\n            function emitThree(handler, isFn, self, arg1, arg2, arg3) {\n              if (isFn)\n                handler.call(self, arg1, arg2, arg3);\n              else {\n                var len = handler.length;\n                var listeners = arrayClone(handler, len);\n                for (var i = 0; i < len; ++i)\n                  listeners[i].call(self, arg1, arg2, arg3);\n              }\n            }\n\n            function emitMany(handler, isFn, self, args) {\n              if (isFn)\n                handler.apply(self, args);\n              else {\n                var len = handler.length;\n                var listeners = arrayClone(handler, len);\n                for (var i = 0; i < len; ++i)\n                  listeners[i].apply(self, args);\n              }\n            }\n\n            EventEmitter.prototype.emit = function emit(type) {\n              var er, handler, len, args, i, events, domain;\n              var doError = (type === 'error');\n\n              events = this._events;\n              if (events)\n                doError = (doError && events.error == null);\n              else if (!doError)\n                return false;\n\n              domain = this.domain;\n\n              // If there is no 'error' event listener then throw.\n              if (doError) {\n                er = arguments[1];\n                if (domain) {\n                  if (!er)\n                    er = new Error('Uncaught, unspecified \"error\" event');\n                  er.domainEmitter = this;\n                  er.domain = domain;\n                  er.domainThrown = false;\n                  domain.emit('error', er);\n                } else if (er instanceof Error) {\n                  throw er; // Unhandled 'error' event\n                } else {\n                  // At least give some kind of context to the user\n                  var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n                  err.context = er;\n                  throw err;\n                }\n                return false;\n              }\n\n              handler = events[type];\n\n              if (!handler)\n                return false;\n\n              var isFn = typeof handler === 'function';\n              len = arguments.length;\n              switch (len) {\n                // fast cases\n                case 1:\n                  emitNone(handler, isFn, this);\n                  break;\n                case 2:\n                  emitOne(handler, isFn, this, arguments[1]);\n                  break;\n                case 3:\n                  emitTwo(handler, isFn, this, arguments[1], arguments[2]);\n                  break;\n                case 4:\n                  emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);\n                  break;\n                // slower\n                default:\n                  args = new Array(len - 1);\n                  for (i = 1; i < len; i++)\n                    args[i - 1] = arguments[i];\n                  emitMany(handler, isFn, this, args);\n              }\n\n              return true;\n            };\n\n            function _addListener(target, type, listener, prepend) {\n              var m;\n              var events;\n              var existing;\n\n              if (typeof listener !== 'function')\n                throw new TypeError('\"listener\" argument must be a function');\n\n              events = target._events;\n              if (!events) {\n                events = target._events = new EventHandlers();\n                target._eventsCount = 0;\n              } else {\n                // To avoid recursion in the case that type === \"newListener\"! Before\n                // adding it to the listeners, first emit \"newListener\".\n                if (events.newListener) {\n                  target.emit('newListener', type,\n                              listener.listener ? listener.listener : listener);\n\n                  // Re-assign `events` because a newListener handler could have caused the\n                  // this._events to be assigned to a new object\n                  events = target._events;\n                }\n                existing = events[type];\n              }\n\n              if (!existing) {\n                // Optimize the case of one listener. Don't need the extra array object.\n                existing = events[type] = listener;\n                ++target._eventsCount;\n              } else {\n                if (typeof existing === 'function') {\n                  // Adding the second element, need to change to array.\n                  existing = events[type] = prepend ? [listener, existing] :\n                                                      [existing, listener];\n                } else {\n                  // If we've already got an array, just append.\n                  if (prepend) {\n                    existing.unshift(listener);\n                  } else {\n                    existing.push(listener);\n                  }\n                }\n\n                // Check for listener leak\n                if (!existing.warned) {\n                  m = $getMaxListeners(target);\n                  if (m && m > 0 && existing.length > m) {\n                    existing.warned = true;\n                    var w = new Error('Possible EventEmitter memory leak detected. ' +\n                                        existing.length + ' ' + type + ' listeners added. ' +\n                                        'Use emitter.setMaxListeners() to increase limit');\n                    w.name = 'MaxListenersExceededWarning';\n                    w.emitter = target;\n                    w.type = type;\n                    w.count = existing.length;\n                    emitWarning(w);\n                  }\n                }\n              }\n\n              return target;\n            }\n            function emitWarning(e) {\n              typeof console.warn === 'function' ? console.warn(e) : console.log(e);\n            }\n            EventEmitter.prototype.addListener = function addListener(type, listener) {\n              return _addListener(this, type, listener, false);\n            };\n\n            EventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\n            EventEmitter.prototype.prependListener =\n                function prependListener(type, listener) {\n                  return _addListener(this, type, listener, true);\n                };\n\n            function _onceWrap(target, type, listener) {\n              var fired = false;\n              function g() {\n                target.removeListener(type, g);\n                if (!fired) {\n                  fired = true;\n                  listener.apply(target, arguments);\n                }\n              }\n              g.listener = listener;\n              return g;\n            }\n\n            EventEmitter.prototype.once = function once(type, listener) {\n              if (typeof listener !== 'function')\n                throw new TypeError('\"listener\" argument must be a function');\n              this.on(type, _onceWrap(this, type, listener));\n              return this;\n            };\n\n            EventEmitter.prototype.prependOnceListener =\n                function prependOnceListener(type, listener) {\n                  if (typeof listener !== 'function')\n                    throw new TypeError('\"listener\" argument must be a function');\n                  this.prependListener(type, _onceWrap(this, type, listener));\n                  return this;\n                };\n\n            // emits a 'removeListener' event iff the listener was removed\n            EventEmitter.prototype.removeListener =\n                function removeListener(type, listener) {\n                  var list, events, position, i, originalListener;\n\n                  if (typeof listener !== 'function')\n                    throw new TypeError('\"listener\" argument must be a function');\n\n                  events = this._events;\n                  if (!events)\n                    return this;\n\n                  list = events[type];\n                  if (!list)\n                    return this;\n\n                  if (list === listener || (list.listener && list.listener === listener)) {\n                    if (--this._eventsCount === 0)\n                      this._events = new EventHandlers();\n                    else {\n                      delete events[type];\n                      if (events.removeListener)\n                        this.emit('removeListener', type, list.listener || listener);\n                    }\n                  } else if (typeof list !== 'function') {\n                    position = -1;\n\n                    for (i = list.length; i-- > 0;) {\n                      if (list[i] === listener ||\n                          (list[i].listener && list[i].listener === listener)) {\n                        originalListener = list[i].listener;\n                        position = i;\n                        break;\n                      }\n                    }\n\n                    if (position < 0)\n                      return this;\n\n                    if (list.length === 1) {\n                      list[0] = undefined;\n                      if (--this._eventsCount === 0) {\n                        this._events = new EventHandlers();\n                        return this;\n                      } else {\n                        delete events[type];\n                      }\n                    } else {\n                      spliceOne(list, position);\n                    }\n\n                    if (events.removeListener)\n                      this.emit('removeListener', type, originalListener || listener);\n                  }\n\n                  return this;\n                };\n\n            EventEmitter.prototype.removeAllListeners =\n                function removeAllListeners(type) {\n                  var listeners, events;\n\n                  events = this._events;\n                  if (!events)\n                    return this;\n\n                  // not listening for removeListener, no need to emit\n                  if (!events.removeListener) {\n                    if (arguments.length === 0) {\n                      this._events = new EventHandlers();\n                      this._eventsCount = 0;\n                    } else if (events[type]) {\n                      if (--this._eventsCount === 0)\n                        this._events = new EventHandlers();\n                      else\n                        delete events[type];\n                    }\n                    return this;\n                  }\n\n                  // emit removeListener for all listeners on all events\n                  if (arguments.length === 0) {\n                    var keys = Object.keys(events);\n                    for (var i = 0, key; i < keys.length; ++i) {\n                      key = keys[i];\n                      if (key === 'removeListener') continue;\n                      this.removeAllListeners(key);\n                    }\n                    this.removeAllListeners('removeListener');\n                    this._events = new EventHandlers();\n                    this._eventsCount = 0;\n                    return this;\n                  }\n\n                  listeners = events[type];\n\n                  if (typeof listeners === 'function') {\n                    this.removeListener(type, listeners);\n                  } else if (listeners) {\n                    // LIFO order\n                    do {\n                      this.removeListener(type, listeners[listeners.length - 1]);\n                    } while (listeners[0]);\n                  }\n\n                  return this;\n                };\n\n            EventEmitter.prototype.listeners = function listeners(type) {\n              var evlistener;\n              var ret;\n              var events = this._events;\n\n              if (!events)\n                ret = [];\n              else {\n                evlistener = events[type];\n                if (!evlistener)\n                  ret = [];\n                else if (typeof evlistener === 'function')\n                  ret = [evlistener.listener || evlistener];\n                else\n                  ret = unwrapListeners(evlistener);\n              }\n\n              return ret;\n            };\n\n            EventEmitter.listenerCount = function(emitter, type) {\n              if (typeof emitter.listenerCount === 'function') {\n                return emitter.listenerCount(type);\n              } else {\n                return listenerCount.call(emitter, type);\n              }\n            };\n\n            EventEmitter.prototype.listenerCount = listenerCount;\n            function listenerCount(type) {\n              var events = this._events;\n\n              if (events) {\n                var evlistener = events[type];\n\n                if (typeof evlistener === 'function') {\n                  return 1;\n                } else if (evlistener) {\n                  return evlistener.length;\n                }\n              }\n\n              return 0;\n            }\n\n            EventEmitter.prototype.eventNames = function eventNames() {\n              return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];\n            };\n\n            // About 1.5x faster than the two-arg version of Array#splice().\n            function spliceOne(list, index) {\n              for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)\n                list[i] = list[k];\n              list.pop();\n            }\n\n            function arrayClone(arr, i) {\n              var copy = new Array(i);\n              while (i--)\n                copy[i] = arr[i];\n              return copy;\n            }\n\n            function unwrapListeners(arr) {\n              var ret = new Array(arr.length);\n              for (var i = 0; i < ret.length; ++i) {\n                ret[i] = arr[i].listener || arr[i];\n              }\n              return ret;\n            }\n\n            var lookup = [];\n            var revLookup = [];\n            var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\n            var inited = false;\n            function init () {\n              inited = true;\n              var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n              for (var i = 0, len = code.length; i < len; ++i) {\n                lookup[i] = code[i];\n                revLookup[code.charCodeAt(i)] = i;\n              }\n\n              revLookup['-'.charCodeAt(0)] = 62;\n              revLookup['_'.charCodeAt(0)] = 63;\n            }\n\n            function toByteArray (b64) {\n              if (!inited) {\n                init();\n              }\n              var i, j, l, tmp, placeHolders, arr;\n              var len = b64.length;\n\n              if (len % 4 > 0) {\n                throw new Error('Invalid string. Length must be a multiple of 4')\n              }\n\n              // the number of equal signs (place holders)\n              // if there are two placeholders, than the two characters before it\n              // represent one byte\n              // if there is only one, then the three characters before it represent 2 bytes\n              // this is just a cheap hack to not do indexOf twice\n              placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;\n\n              // base64 is 4/3 + up to two characters of the original data\n              arr = new Arr(len * 3 / 4 - placeHolders);\n\n              // if there are placeholders, only get up to the last complete 4 chars\n              l = placeHolders > 0 ? len - 4 : len;\n\n              var L = 0;\n\n              for (i = 0, j = 0; i < l; i += 4, j += 3) {\n                tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];\n                arr[L++] = (tmp >> 16) & 0xFF;\n                arr[L++] = (tmp >> 8) & 0xFF;\n                arr[L++] = tmp & 0xFF;\n              }\n\n              if (placeHolders === 2) {\n                tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);\n                arr[L++] = tmp & 0xFF;\n              } else if (placeHolders === 1) {\n                tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);\n                arr[L++] = (tmp >> 8) & 0xFF;\n                arr[L++] = tmp & 0xFF;\n              }\n\n              return arr\n            }\n\n            function tripletToBase64 (num) {\n              return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n            }\n\n            function encodeChunk (uint8, start, end) {\n              var tmp;\n              var output = [];\n              for (var i = start; i < end; i += 3) {\n                tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);\n                output.push(tripletToBase64(tmp));\n              }\n              return output.join('')\n            }\n\n            function fromByteArray (uint8) {\n              if (!inited) {\n                init();\n              }\n              var tmp;\n              var len = uint8.length;\n              var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n              var output = '';\n              var parts = [];\n              var maxChunkLength = 16383; // must be multiple of 3\n\n              // go through the array every three bytes, we'll deal with trailing stuff later\n              for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n                parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));\n              }\n\n              // pad the end with zeros, but make sure to not forget the extra bytes\n              if (extraBytes === 1) {\n                tmp = uint8[len - 1];\n                output += lookup[tmp >> 2];\n                output += lookup[(tmp << 4) & 0x3F];\n                output += '==';\n              } else if (extraBytes === 2) {\n                tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);\n                output += lookup[tmp >> 10];\n                output += lookup[(tmp >> 4) & 0x3F];\n                output += lookup[(tmp << 2) & 0x3F];\n                output += '=';\n              }\n\n              parts.push(output);\n\n              return parts.join('')\n            }\n\n            function read (buffer, offset, isLE, mLen, nBytes) {\n              var e, m;\n              var eLen = nBytes * 8 - mLen - 1;\n              var eMax = (1 << eLen) - 1;\n              var eBias = eMax >> 1;\n              var nBits = -7;\n              var i = isLE ? (nBytes - 1) : 0;\n              var d = isLE ? -1 : 1;\n              var s = buffer[offset + i];\n\n              i += d;\n\n              e = s & ((1 << (-nBits)) - 1);\n              s >>= (-nBits);\n              nBits += eLen;\n              for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n              m = e & ((1 << (-nBits)) - 1);\n              e >>= (-nBits);\n              nBits += mLen;\n              for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n              if (e === 0) {\n                e = 1 - eBias;\n              } else if (e === eMax) {\n                return m ? NaN : ((s ? -1 : 1) * Infinity)\n              } else {\n                m = m + Math.pow(2, mLen);\n                e = e - eBias;\n              }\n              return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n            }\n\n            function write (buffer, value, offset, isLE, mLen, nBytes) {\n              var e, m, c;\n              var eLen = nBytes * 8 - mLen - 1;\n              var eMax = (1 << eLen) - 1;\n              var eBias = eMax >> 1;\n              var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);\n              var i = isLE ? 0 : (nBytes - 1);\n              var d = isLE ? 1 : -1;\n              var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;\n\n              value = Math.abs(value);\n\n              if (isNaN(value) || value === Infinity) {\n                m = isNaN(value) ? 1 : 0;\n                e = eMax;\n              } else {\n                e = Math.floor(Math.log(value) / Math.LN2);\n                if (value * (c = Math.pow(2, -e)) < 1) {\n                  e--;\n                  c *= 2;\n                }\n                if (e + eBias >= 1) {\n                  value += rt / c;\n                } else {\n                  value += rt * Math.pow(2, 1 - eBias);\n                }\n                if (value * c >= 2) {\n                  e++;\n                  c /= 2;\n                }\n\n                if (e + eBias >= eMax) {\n                  m = 0;\n                  e = eMax;\n                } else if (e + eBias >= 1) {\n                  m = (value * c - 1) * Math.pow(2, mLen);\n                  e = e + eBias;\n                } else {\n                  m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n                  e = 0;\n                }\n              }\n\n              for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n              e = (e << mLen) | m;\n              eLen += mLen;\n              for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n              buffer[offset + i - d] |= s * 128;\n            }\n\n            var toString$2 = {}.toString;\n\n            var isArray$2 = Array.isArray || function (arr) {\n              return toString$2.call(arr) == '[object Array]';\n            };\n\n            var INSPECT_MAX_BYTES = 50;\n\n            /**\n             * If `Buffer.TYPED_ARRAY_SUPPORT`:\n             *   === true    Use Uint8Array implementation (fastest)\n             *   === false   Use Object implementation (most compatible, even IE6)\n             *\n             * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n             * Opera 11.6+, iOS 4.2+.\n             *\n             * Due to various browser bugs, sometimes the Object implementation will be used even\n             * when the browser supports typed arrays.\n             *\n             * Note:\n             *\n             *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n             *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n             *\n             *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n             *\n             *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n             *     incorrect length in some situations.\n\n             * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n             * get the Object implementation, which is slower but behaves correctly.\n             */\n            Buffer.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined\n              ? global$1.TYPED_ARRAY_SUPPORT\n              : true;\n\n            function kMaxLength () {\n              return Buffer.TYPED_ARRAY_SUPPORT\n                ? 0x7fffffff\n                : 0x3fffffff\n            }\n\n            function createBuffer (that, length) {\n              if (kMaxLength() < length) {\n                throw new RangeError('Invalid typed array length')\n              }\n              if (Buffer.TYPED_ARRAY_SUPPORT) {\n                // Return an augmented `Uint8Array` instance, for best performance\n                that = new Uint8Array(length);\n                that.__proto__ = Buffer.prototype;\n              } else {\n                // Fallback: Return an object instance of the Buffer class\n                if (that === null) {\n                  that = new Buffer(length);\n                }\n                that.length = length;\n              }\n\n              return that\n            }\n\n            /**\n             * The Buffer constructor returns instances of `Uint8Array` that have their\n             * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n             * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n             * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n             * returns a single octet.\n             *\n             * The `Uint8Array` prototype remains unmodified.\n             */\n\n            function Buffer (arg, encodingOrOffset, length) {\n              if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n                return new Buffer(arg, encodingOrOffset, length)\n              }\n\n              // Common case.\n              if (typeof arg === 'number') {\n                if (typeof encodingOrOffset === 'string') {\n                  throw new Error(\n                    'If encoding is specified then the first argument must be a string'\n                  )\n                }\n                return allocUnsafe(this, arg)\n              }\n              return from(this, arg, encodingOrOffset, length)\n            }\n\n            Buffer.poolSize = 8192; // not used by this implementation\n\n            // TODO: Legacy, not needed anymore. Remove in next major version.\n            Buffer._augment = function (arr) {\n              arr.__proto__ = Buffer.prototype;\n              return arr\n            };\n\n            function from (that, value, encodingOrOffset, length) {\n              if (typeof value === 'number') {\n                throw new TypeError('\"value\" argument must not be a number')\n              }\n\n              if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n                return fromArrayBuffer(that, value, encodingOrOffset, length)\n              }\n\n              if (typeof value === 'string') {\n                return fromString(that, value, encodingOrOffset)\n              }\n\n              return fromObject(that, value)\n            }\n\n            /**\n             * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n             * if value is a number.\n             * Buffer.from(str[, encoding])\n             * Buffer.from(array)\n             * Buffer.from(buffer)\n             * Buffer.from(arrayBuffer[, byteOffset[, length]])\n             **/\n            Buffer.from = function (value, encodingOrOffset, length) {\n              return from(null, value, encodingOrOffset, length)\n            };\n\n            if (Buffer.TYPED_ARRAY_SUPPORT) {\n              Buffer.prototype.__proto__ = Uint8Array.prototype;\n              Buffer.__proto__ = Uint8Array;\n            }\n\n            function assertSize (size) {\n              if (typeof size !== 'number') {\n                throw new TypeError('\"size\" argument must be a number')\n              } else if (size < 0) {\n                throw new RangeError('\"size\" argument must not be negative')\n              }\n            }\n\n            function alloc (that, size, fill, encoding) {\n              assertSize(size);\n              if (size <= 0) {\n                return createBuffer(that, size)\n              }\n              if (fill !== undefined) {\n                // Only pay attention to encoding if it's a string. This\n                // prevents accidentally sending in a number that would\n                // be interpretted as a start offset.\n                return typeof encoding === 'string'\n                  ? createBuffer(that, size).fill(fill, encoding)\n                  : createBuffer(that, size).fill(fill)\n              }\n              return createBuffer(that, size)\n            }\n\n            /**\n             * Creates a new filled Buffer instance.\n             * alloc(size[, fill[, encoding]])\n             **/\n            Buffer.alloc = function (size, fill, encoding) {\n              return alloc(null, size, fill, encoding)\n            };\n\n            function allocUnsafe (that, size) {\n              assertSize(size);\n              that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);\n              if (!Buffer.TYPED_ARRAY_SUPPORT) {\n                for (var i = 0; i < size; ++i) {\n                  that[i] = 0;\n                }\n              }\n              return that\n            }\n\n            /**\n             * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n             * */\n            Buffer.allocUnsafe = function (size) {\n              return allocUnsafe(null, size)\n            };\n            /**\n             * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n             */\n            Buffer.allocUnsafeSlow = function (size) {\n              return allocUnsafe(null, size)\n            };\n\n            function fromString (that, string, encoding) {\n              if (typeof encoding !== 'string' || encoding === '') {\n                encoding = 'utf8';\n              }\n\n              if (!Buffer.isEncoding(encoding)) {\n                throw new TypeError('\"encoding\" must be a valid string encoding')\n              }\n\n              var length = byteLength(string, encoding) | 0;\n              that = createBuffer(that, length);\n\n              var actual = that.write(string, encoding);\n\n              if (actual !== length) {\n                // Writing a hex string, for example, that contains invalid characters will\n                // cause everything after the first invalid character to be ignored. (e.g.\n                // 'abxxcd' will be treated as 'ab')\n                that = that.slice(0, actual);\n              }\n\n              return that\n            }\n\n            function fromArrayLike (that, array) {\n              var length = array.length < 0 ? 0 : checked(array.length) | 0;\n              that = createBuffer(that, length);\n              for (var i = 0; i < length; i += 1) {\n                that[i] = array[i] & 255;\n              }\n              return that\n            }\n\n            function fromArrayBuffer (that, array, byteOffset, length) {\n              array.byteLength; // this throws if `array` is not a valid ArrayBuffer\n\n              if (byteOffset < 0 || array.byteLength < byteOffset) {\n                throw new RangeError('\\'offset\\' is out of bounds')\n              }\n\n              if (array.byteLength < byteOffset + (length || 0)) {\n                throw new RangeError('\\'length\\' is out of bounds')\n              }\n\n              if (byteOffset === undefined && length === undefined) {\n                array = new Uint8Array(array);\n              } else if (length === undefined) {\n                array = new Uint8Array(array, byteOffset);\n              } else {\n                array = new Uint8Array(array, byteOffset, length);\n              }\n\n              if (Buffer.TYPED_ARRAY_SUPPORT) {\n                // Return an augmented `Uint8Array` instance, for best performance\n                that = array;\n                that.__proto__ = Buffer.prototype;\n              } else {\n                // Fallback: Return an object instance of the Buffer class\n                that = fromArrayLike(that, array);\n              }\n              return that\n            }\n\n            function fromObject (that, obj) {\n              if (internalIsBuffer(obj)) {\n                var len = checked(obj.length) | 0;\n                that = createBuffer(that, len);\n\n                if (that.length === 0) {\n                  return that\n                }\n\n                obj.copy(that, 0, 0, len);\n                return that\n              }\n\n              if (obj) {\n                if ((typeof ArrayBuffer !== 'undefined' &&\n                    obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n                  if (typeof obj.length !== 'number' || isnan(obj.length)) {\n                    return createBuffer(that, 0)\n                  }\n                  return fromArrayLike(that, obj)\n                }\n\n                if (obj.type === 'Buffer' && isArray$2(obj.data)) {\n                  return fromArrayLike(that, obj.data)\n                }\n              }\n\n              throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n            }\n\n            function checked (length) {\n              // Note: cannot use `length < kMaxLength()` here because that fails when\n              // length is NaN (which is otherwise coerced to zero.)\n              if (length >= kMaxLength()) {\n                throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                                     'size: 0x' + kMaxLength().toString(16) + ' bytes')\n              }\n              return length | 0\n            }\n            Buffer.isBuffer = isBuffer;\n            function internalIsBuffer (b) {\n              return !!(b != null && b._isBuffer)\n            }\n\n            Buffer.compare = function compare (a, b) {\n              if (!internalIsBuffer(a) || !internalIsBuffer(b)) {\n                throw new TypeError('Arguments must be Buffers')\n              }\n\n              if (a === b) return 0\n\n              var x = a.length;\n              var y = b.length;\n\n              for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n                if (a[i] !== b[i]) {\n                  x = a[i];\n                  y = b[i];\n                  break\n                }\n              }\n\n              if (x < y) return -1\n              if (y < x) return 1\n              return 0\n            };\n\n            Buffer.isEncoding = function isEncoding (encoding) {\n              switch (String(encoding).toLowerCase()) {\n                case 'hex':\n                case 'utf8':\n                case 'utf-8':\n                case 'ascii':\n                case 'latin1':\n                case 'binary':\n                case 'base64':\n                case 'ucs2':\n                case 'ucs-2':\n                case 'utf16le':\n                case 'utf-16le':\n                  return true\n                default:\n                  return false\n              }\n            };\n\n            Buffer.concat = function concat (list, length) {\n              if (!isArray$2(list)) {\n                throw new TypeError('\"list\" argument must be an Array of Buffers')\n              }\n\n              if (list.length === 0) {\n                return Buffer.alloc(0)\n              }\n\n              var i;\n              if (length === undefined) {\n                length = 0;\n                for (i = 0; i < list.length; ++i) {\n                  length += list[i].length;\n                }\n              }\n\n              var buffer = Buffer.allocUnsafe(length);\n              var pos = 0;\n              for (i = 0; i < list.length; ++i) {\n                var buf = list[i];\n                if (!internalIsBuffer(buf)) {\n                  throw new TypeError('\"list\" argument must be an Array of Buffers')\n                }\n                buf.copy(buffer, pos);\n                pos += buf.length;\n              }\n              return buffer\n            };\n\n            function byteLength (string, encoding) {\n              if (internalIsBuffer(string)) {\n                return string.length\n              }\n              if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n                  (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n                return string.byteLength\n              }\n              if (typeof string !== 'string') {\n                string = '' + string;\n              }\n\n              var len = string.length;\n              if (len === 0) return 0\n\n              // Use a for loop to avoid recursion\n              var loweredCase = false;\n              for (;;) {\n                switch (encoding) {\n                  case 'ascii':\n                  case 'latin1':\n                  case 'binary':\n                    return len\n                  case 'utf8':\n                  case 'utf-8':\n                  case undefined:\n                    return utf8ToBytes(string).length\n                  case 'ucs2':\n                  case 'ucs-2':\n                  case 'utf16le':\n                  case 'utf-16le':\n                    return len * 2\n                  case 'hex':\n                    return len >>> 1\n                  case 'base64':\n                    return base64ToBytes(string).length\n                  default:\n                    if (loweredCase) return utf8ToBytes(string).length // assume utf8\n                    encoding = ('' + encoding).toLowerCase();\n                    loweredCase = true;\n                }\n              }\n            }\n            Buffer.byteLength = byteLength;\n\n            function slowToString (encoding, start, end) {\n              var loweredCase = false;\n\n              // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n              // property of a typed array.\n\n              // This behaves neither like String nor Uint8Array in that we set start/end\n              // to their upper/lower bounds if the value passed is out of range.\n              // undefined is handled specially as per ECMA-262 6th Edition,\n              // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n              if (start === undefined || start < 0) {\n                start = 0;\n              }\n              // Return early if start > this.length. Done here to prevent potential uint32\n              // coercion fail below.\n              if (start > this.length) {\n                return ''\n              }\n\n              if (end === undefined || end > this.length) {\n                end = this.length;\n              }\n\n              if (end <= 0) {\n                return ''\n              }\n\n              // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n              end >>>= 0;\n              start >>>= 0;\n\n              if (end <= start) {\n                return ''\n              }\n\n              if (!encoding) encoding = 'utf8';\n\n              while (true) {\n                switch (encoding) {\n                  case 'hex':\n                    return hexSlice(this, start, end)\n\n                  case 'utf8':\n                  case 'utf-8':\n                    return utf8Slice(this, start, end)\n\n                  case 'ascii':\n                    return asciiSlice(this, start, end)\n\n                  case 'latin1':\n                  case 'binary':\n                    return latin1Slice(this, start, end)\n\n                  case 'base64':\n                    return base64Slice(this, start, end)\n\n                  case 'ucs2':\n                  case 'ucs-2':\n                  case 'utf16le':\n                  case 'utf-16le':\n                    return utf16leSlice(this, start, end)\n\n                  default:\n                    if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n                    encoding = (encoding + '').toLowerCase();\n                    loweredCase = true;\n                }\n              }\n            }\n\n            // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n            // Buffer instances.\n            Buffer.prototype._isBuffer = true;\n\n            function swap (b, n, m) {\n              var i = b[n];\n              b[n] = b[m];\n              b[m] = i;\n            }\n\n            Buffer.prototype.swap16 = function swap16 () {\n              var len = this.length;\n              if (len % 2 !== 0) {\n                throw new RangeError('Buffer size must be a multiple of 16-bits')\n              }\n              for (var i = 0; i < len; i += 2) {\n                swap(this, i, i + 1);\n              }\n              return this\n            };\n\n            Buffer.prototype.swap32 = function swap32 () {\n              var len = this.length;\n              if (len % 4 !== 0) {\n                throw new RangeError('Buffer size must be a multiple of 32-bits')\n              }\n              for (var i = 0; i < len; i += 4) {\n                swap(this, i, i + 3);\n                swap(this, i + 1, i + 2);\n              }\n              return this\n            };\n\n            Buffer.prototype.swap64 = function swap64 () {\n              var len = this.length;\n              if (len % 8 !== 0) {\n                throw new RangeError('Buffer size must be a multiple of 64-bits')\n              }\n              for (var i = 0; i < len; i += 8) {\n                swap(this, i, i + 7);\n                swap(this, i + 1, i + 6);\n                swap(this, i + 2, i + 5);\n                swap(this, i + 3, i + 4);\n              }\n              return this\n            };\n\n            Buffer.prototype.toString = function toString () {\n              var length = this.length | 0;\n              if (length === 0) return ''\n              if (arguments.length === 0) return utf8Slice(this, 0, length)\n              return slowToString.apply(this, arguments)\n            };\n\n            Buffer.prototype.equals = function equals (b) {\n              if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')\n              if (this === b) return true\n              return Buffer.compare(this, b) === 0\n            };\n\n            Buffer.prototype.inspect = function inspect () {\n              var str = '';\n              var max = INSPECT_MAX_BYTES;\n              if (this.length > 0) {\n                str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');\n                if (this.length > max) str += ' ... ';\n              }\n              return '<Buffer ' + str + '>'\n            };\n\n            Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n              if (!internalIsBuffer(target)) {\n                throw new TypeError('Argument must be a Buffer')\n              }\n\n              if (start === undefined) {\n                start = 0;\n              }\n              if (end === undefined) {\n                end = target ? target.length : 0;\n              }\n              if (thisStart === undefined) {\n                thisStart = 0;\n              }\n              if (thisEnd === undefined) {\n                thisEnd = this.length;\n              }\n\n              if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n                throw new RangeError('out of range index')\n              }\n\n              if (thisStart >= thisEnd && start >= end) {\n                return 0\n              }\n              if (thisStart >= thisEnd) {\n                return -1\n              }\n              if (start >= end) {\n                return 1\n              }\n\n              start >>>= 0;\n              end >>>= 0;\n              thisStart >>>= 0;\n              thisEnd >>>= 0;\n\n              if (this === target) return 0\n\n              var x = thisEnd - thisStart;\n              var y = end - start;\n              var len = Math.min(x, y);\n\n              var thisCopy = this.slice(thisStart, thisEnd);\n              var targetCopy = target.slice(start, end);\n\n              for (var i = 0; i < len; ++i) {\n                if (thisCopy[i] !== targetCopy[i]) {\n                  x = thisCopy[i];\n                  y = targetCopy[i];\n                  break\n                }\n              }\n\n              if (x < y) return -1\n              if (y < x) return 1\n              return 0\n            };\n\n            // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n            // OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n            //\n            // Arguments:\n            // - buffer - a Buffer to search\n            // - val - a string, Buffer, or number\n            // - byteOffset - an index into `buffer`; will be clamped to an int32\n            // - encoding - an optional encoding, relevant is val is a string\n            // - dir - true for indexOf, false for lastIndexOf\n            function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n              // Empty buffer means no match\n              if (buffer.length === 0) return -1\n\n              // Normalize byteOffset\n              if (typeof byteOffset === 'string') {\n                encoding = byteOffset;\n                byteOffset = 0;\n              } else if (byteOffset > 0x7fffffff) {\n                byteOffset = 0x7fffffff;\n              } else if (byteOffset < -0x80000000) {\n                byteOffset = -0x80000000;\n              }\n              byteOffset = +byteOffset;  // Coerce to Number.\n              if (isNaN(byteOffset)) {\n                // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n                byteOffset = dir ? 0 : (buffer.length - 1);\n              }\n\n              // Normalize byteOffset: negative offsets start from the end of the buffer\n              if (byteOffset < 0) byteOffset = buffer.length + byteOffset;\n              if (byteOffset >= buffer.length) {\n                if (dir) return -1\n                else byteOffset = buffer.length - 1;\n              } else if (byteOffset < 0) {\n                if (dir) byteOffset = 0;\n                else return -1\n              }\n\n              // Normalize val\n              if (typeof val === 'string') {\n                val = Buffer.from(val, encoding);\n              }\n\n              // Finally, search either indexOf (if dir is true) or lastIndexOf\n              if (internalIsBuffer(val)) {\n                // Special case: looking for empty string/buffer always fails\n                if (val.length === 0) {\n                  return -1\n                }\n                return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n              } else if (typeof val === 'number') {\n                val = val & 0xFF; // Search for a byte value [0-255]\n                if (Buffer.TYPED_ARRAY_SUPPORT &&\n                    typeof Uint8Array.prototype.indexOf === 'function') {\n                  if (dir) {\n                    return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n                  } else {\n                    return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n                  }\n                }\n                return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n              }\n\n              throw new TypeError('val must be string, number or Buffer')\n            }\n\n            function arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n              var indexSize = 1;\n              var arrLength = arr.length;\n              var valLength = val.length;\n\n              if (encoding !== undefined) {\n                encoding = String(encoding).toLowerCase();\n                if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n                    encoding === 'utf16le' || encoding === 'utf-16le') {\n                  if (arr.length < 2 || val.length < 2) {\n                    return -1\n                  }\n                  indexSize = 2;\n                  arrLength /= 2;\n                  valLength /= 2;\n                  byteOffset /= 2;\n                }\n              }\n\n              function read$$1 (buf, i) {\n                if (indexSize === 1) {\n                  return buf[i]\n                } else {\n                  return buf.readUInt16BE(i * indexSize)\n                }\n              }\n\n              var i;\n              if (dir) {\n                var foundIndex = -1;\n                for (i = byteOffset; i < arrLength; i++) {\n                  if (read$$1(arr, i) === read$$1(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n                    if (foundIndex === -1) foundIndex = i;\n                    if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n                  } else {\n                    if (foundIndex !== -1) i -= i - foundIndex;\n                    foundIndex = -1;\n                  }\n                }\n              } else {\n                if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;\n                for (i = byteOffset; i >= 0; i--) {\n                  var found = true;\n                  for (var j = 0; j < valLength; j++) {\n                    if (read$$1(arr, i + j) !== read$$1(val, j)) {\n                      found = false;\n                      break\n                    }\n                  }\n                  if (found) return i\n                }\n              }\n\n              return -1\n            }\n\n            Buffer.prototype.includes = function includes (val, byteOffset, encoding) {\n              return this.indexOf(val, byteOffset, encoding) !== -1\n            };\n\n            Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n              return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n            };\n\n            Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n              return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n            };\n\n            function hexWrite (buf, string, offset, length) {\n              offset = Number(offset) || 0;\n              var remaining = buf.length - offset;\n              if (!length) {\n                length = remaining;\n              } else {\n                length = Number(length);\n                if (length > remaining) {\n                  length = remaining;\n                }\n              }\n\n              // must be an even number of digits\n              var strLen = string.length;\n              if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n              if (length > strLen / 2) {\n                length = strLen / 2;\n              }\n              for (var i = 0; i < length; ++i) {\n                var parsed = parseInt(string.substr(i * 2, 2), 16);\n                if (isNaN(parsed)) return i\n                buf[offset + i] = parsed;\n              }\n              return i\n            }\n\n            function utf8Write (buf, string, offset, length) {\n              return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n            }\n\n            function asciiWrite (buf, string, offset, length) {\n              return blitBuffer(asciiToBytes(string), buf, offset, length)\n            }\n\n            function latin1Write (buf, string, offset, length) {\n              return asciiWrite(buf, string, offset, length)\n            }\n\n            function base64Write (buf, string, offset, length) {\n              return blitBuffer(base64ToBytes(string), buf, offset, length)\n            }\n\n            function ucs2Write (buf, string, offset, length) {\n              return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n            }\n\n            Buffer.prototype.write = function write$$1 (string, offset, length, encoding) {\n              // Buffer#write(string)\n              if (offset === undefined) {\n                encoding = 'utf8';\n                length = this.length;\n                offset = 0;\n              // Buffer#write(string, encoding)\n              } else if (length === undefined && typeof offset === 'string') {\n                encoding = offset;\n                length = this.length;\n                offset = 0;\n              // Buffer#write(string, offset[, length][, encoding])\n              } else if (isFinite(offset)) {\n                offset = offset | 0;\n                if (isFinite(length)) {\n                  length = length | 0;\n                  if (encoding === undefined) encoding = 'utf8';\n                } else {\n                  encoding = length;\n                  length = undefined;\n                }\n              // legacy write(string, encoding, offset, length) - remove in v0.13\n              } else {\n                throw new Error(\n                  'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n                )\n              }\n\n              var remaining = this.length - offset;\n              if (length === undefined || length > remaining) length = remaining;\n\n              if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n                throw new RangeError('Attempt to write outside buffer bounds')\n              }\n\n              if (!encoding) encoding = 'utf8';\n\n              var loweredCase = false;\n              for (;;) {\n                switch (encoding) {\n                  case 'hex':\n                    return hexWrite(this, string, offset, length)\n\n                  case 'utf8':\n                  case 'utf-8':\n                    return utf8Write(this, string, offset, length)\n\n                  case 'ascii':\n                    return asciiWrite(this, string, offset, length)\n\n                  case 'latin1':\n                  case 'binary':\n                    return latin1Write(this, string, offset, length)\n\n                  case 'base64':\n                    // Warning: maxLength not taken into account in base64Write\n                    return base64Write(this, string, offset, length)\n\n                  case 'ucs2':\n                  case 'ucs-2':\n                  case 'utf16le':\n                  case 'utf-16le':\n                    return ucs2Write(this, string, offset, length)\n\n                  default:\n                    if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n                    encoding = ('' + encoding).toLowerCase();\n                    loweredCase = true;\n                }\n              }\n            };\n\n            Buffer.prototype.toJSON = function toJSON () {\n              return {\n                type: 'Buffer',\n                data: Array.prototype.slice.call(this._arr || this, 0)\n              }\n            };\n\n            function base64Slice (buf, start, end) {\n              if (start === 0 && end === buf.length) {\n                return fromByteArray(buf)\n              } else {\n                return fromByteArray(buf.slice(start, end))\n              }\n            }\n\n            function utf8Slice (buf, start, end) {\n              end = Math.min(buf.length, end);\n              var res = [];\n\n              var i = start;\n              while (i < end) {\n                var firstByte = buf[i];\n                var codePoint = null;\n                var bytesPerSequence = (firstByte > 0xEF) ? 4\n                  : (firstByte > 0xDF) ? 3\n                  : (firstByte > 0xBF) ? 2\n                  : 1;\n\n                if (i + bytesPerSequence <= end) {\n                  var secondByte, thirdByte, fourthByte, tempCodePoint;\n\n                  switch (bytesPerSequence) {\n                    case 1:\n                      if (firstByte < 0x80) {\n                        codePoint = firstByte;\n                      }\n                      break\n                    case 2:\n                      secondByte = buf[i + 1];\n                      if ((secondByte & 0xC0) === 0x80) {\n                        tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);\n                        if (tempCodePoint > 0x7F) {\n                          codePoint = tempCodePoint;\n                        }\n                      }\n                      break\n                    case 3:\n                      secondByte = buf[i + 1];\n                      thirdByte = buf[i + 2];\n                      if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);\n                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n                          codePoint = tempCodePoint;\n                        }\n                      }\n                      break\n                    case 4:\n                      secondByte = buf[i + 1];\n                      thirdByte = buf[i + 2];\n                      fourthByte = buf[i + 3];\n                      if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);\n                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n                          codePoint = tempCodePoint;\n                        }\n                      }\n                  }\n                }\n\n                if (codePoint === null) {\n                  // we did not generate a valid codePoint so insert a\n                  // replacement char (U+FFFD) and advance only 1 byte\n                  codePoint = 0xFFFD;\n                  bytesPerSequence = 1;\n                } else if (codePoint > 0xFFFF) {\n                  // encode to utf16 (surrogate pair dance)\n                  codePoint -= 0x10000;\n                  res.push(codePoint >>> 10 & 0x3FF | 0xD800);\n                  codePoint = 0xDC00 | codePoint & 0x3FF;\n                }\n\n                res.push(codePoint);\n                i += bytesPerSequence;\n              }\n\n              return decodeCodePointsArray(res)\n            }\n\n            // Based on http://stackoverflow.com/a/22747272/680742, the browser with\n            // the lowest limit is Chrome, with 0x10000 args.\n            // We go 1 magnitude less, for safety\n            var MAX_ARGUMENTS_LENGTH = 0x1000;\n\n            function decodeCodePointsArray (codePoints) {\n              var len = codePoints.length;\n              if (len <= MAX_ARGUMENTS_LENGTH) {\n                return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n              }\n\n              // Decode in chunks to avoid \"call stack size exceeded\".\n              var res = '';\n              var i = 0;\n              while (i < len) {\n                res += String.fromCharCode.apply(\n                  String,\n                  codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n                );\n              }\n              return res\n            }\n\n            function asciiSlice (buf, start, end) {\n              var ret = '';\n              end = Math.min(buf.length, end);\n\n              for (var i = start; i < end; ++i) {\n                ret += String.fromCharCode(buf[i] & 0x7F);\n              }\n              return ret\n            }\n\n            function latin1Slice (buf, start, end) {\n              var ret = '';\n              end = Math.min(buf.length, end);\n\n              for (var i = start; i < end; ++i) {\n                ret += String.fromCharCode(buf[i]);\n              }\n              return ret\n            }\n\n            function hexSlice (buf, start, end) {\n              var len = buf.length;\n\n              if (!start || start < 0) start = 0;\n              if (!end || end < 0 || end > len) end = len;\n\n              var out = '';\n              for (var i = start; i < end; ++i) {\n                out += toHex(buf[i]);\n              }\n              return out\n            }\n\n            function utf16leSlice (buf, start, end) {\n              var bytes = buf.slice(start, end);\n              var res = '';\n              for (var i = 0; i < bytes.length; i += 2) {\n                res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n              }\n              return res\n            }\n\n            Buffer.prototype.slice = function slice (start, end) {\n              var len = this.length;\n              start = ~~start;\n              end = end === undefined ? len : ~~end;\n\n              if (start < 0) {\n                start += len;\n                if (start < 0) start = 0;\n              } else if (start > len) {\n                start = len;\n              }\n\n              if (end < 0) {\n                end += len;\n                if (end < 0) end = 0;\n              } else if (end > len) {\n                end = len;\n              }\n\n              if (end < start) end = start;\n\n              var newBuf;\n              if (Buffer.TYPED_ARRAY_SUPPORT) {\n                newBuf = this.subarray(start, end);\n                newBuf.__proto__ = Buffer.prototype;\n              } else {\n                var sliceLen = end - start;\n                newBuf = new Buffer(sliceLen, undefined);\n                for (var i = 0; i < sliceLen; ++i) {\n                  newBuf[i] = this[i + start];\n                }\n              }\n\n              return newBuf\n            };\n\n            /*\n             * Need to make sure that buffer isn't trying to write out of bounds.\n             */\n            function checkOffset (offset, ext, length) {\n              if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n              if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n            }\n\n            Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n              offset = offset | 0;\n              byteLength = byteLength | 0;\n              if (!noAssert) checkOffset(offset, byteLength, this.length);\n\n              var val = this[offset];\n              var mul = 1;\n              var i = 0;\n              while (++i < byteLength && (mul *= 0x100)) {\n                val += this[offset + i] * mul;\n              }\n\n              return val\n            };\n\n            Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n              offset = offset | 0;\n              byteLength = byteLength | 0;\n              if (!noAssert) {\n                checkOffset(offset, byteLength, this.length);\n              }\n\n              var val = this[offset + --byteLength];\n              var mul = 1;\n              while (byteLength > 0 && (mul *= 0x100)) {\n                val += this[offset + --byteLength] * mul;\n              }\n\n              return val\n            };\n\n            Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n              if (!noAssert) checkOffset(offset, 1, this.length);\n              return this[offset]\n            };\n\n            Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n              if (!noAssert) checkOffset(offset, 2, this.length);\n              return this[offset] | (this[offset + 1] << 8)\n            };\n\n            Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n              if (!noAssert) checkOffset(offset, 2, this.length);\n              return (this[offset] << 8) | this[offset + 1]\n            };\n\n            Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n              if (!noAssert) checkOffset(offset, 4, this.length);\n\n              return ((this[offset]) |\n                  (this[offset + 1] << 8) |\n                  (this[offset + 2] << 16)) +\n                  (this[offset + 3] * 0x1000000)\n            };\n\n            Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n              if (!noAssert) checkOffset(offset, 4, this.length);\n\n              return (this[offset] * 0x1000000) +\n                ((this[offset + 1] << 16) |\n                (this[offset + 2] << 8) |\n                this[offset + 3])\n            };\n\n            Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n              offset = offset | 0;\n              byteLength = byteLength | 0;\n              if (!noAssert) checkOffset(offset, byteLength, this.length);\n\n              var val = this[offset];\n              var mul = 1;\n              var i = 0;\n              while (++i < byteLength && (mul *= 0x100)) {\n                val += this[offset + i] * mul;\n              }\n              mul *= 0x80;\n\n              if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n\n              return val\n            };\n\n            Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n              offset = offset | 0;\n              byteLength = byteLength | 0;\n              if (!noAssert) checkOffset(offset, byteLength, this.length);\n\n              var i = byteLength;\n              var mul = 1;\n              var val = this[offset + --i];\n              while (i > 0 && (mul *= 0x100)) {\n                val += this[offset + --i] * mul;\n              }\n              mul *= 0x80;\n\n              if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n\n              return val\n            };\n\n            Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n              if (!noAssert) checkOffset(offset, 1, this.length);\n              if (!(this[offset] & 0x80)) return (this[offset])\n              return ((0xff - this[offset] + 1) * -1)\n            };\n\n            Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n              if (!noAssert) checkOffset(offset, 2, this.length);\n              var val = this[offset] | (this[offset + 1] << 8);\n              return (val & 0x8000) ? val | 0xFFFF0000 : val\n            };\n\n            Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n              if (!noAssert) checkOffset(offset, 2, this.length);\n              var val = this[offset + 1] | (this[offset] << 8);\n              return (val & 0x8000) ? val | 0xFFFF0000 : val\n            };\n\n            Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n              if (!noAssert) checkOffset(offset, 4, this.length);\n\n              return (this[offset]) |\n                (this[offset + 1] << 8) |\n                (this[offset + 2] << 16) |\n                (this[offset + 3] << 24)\n            };\n\n            Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n              if (!noAssert) checkOffset(offset, 4, this.length);\n\n              return (this[offset] << 24) |\n                (this[offset + 1] << 16) |\n                (this[offset + 2] << 8) |\n                (this[offset + 3])\n            };\n\n            Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n              if (!noAssert) checkOffset(offset, 4, this.length);\n              return read(this, offset, true, 23, 4)\n            };\n\n            Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n              if (!noAssert) checkOffset(offset, 4, this.length);\n              return read(this, offset, false, 23, 4)\n            };\n\n            Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n              if (!noAssert) checkOffset(offset, 8, this.length);\n              return read(this, offset, true, 52, 8)\n            };\n\n            Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n              if (!noAssert) checkOffset(offset, 8, this.length);\n              return read(this, offset, false, 52, 8)\n            };\n\n            function checkInt (buf, value, offset, ext, max, min) {\n              if (!internalIsBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n              if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n              if (offset + ext > buf.length) throw new RangeError('Index out of range')\n            }\n\n            Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n              value = +value;\n              offset = offset | 0;\n              byteLength = byteLength | 0;\n              if (!noAssert) {\n                var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n                checkInt(this, value, offset, byteLength, maxBytes, 0);\n              }\n\n              var mul = 1;\n              var i = 0;\n              this[offset] = value & 0xFF;\n              while (++i < byteLength && (mul *= 0x100)) {\n                this[offset + i] = (value / mul) & 0xFF;\n              }\n\n              return offset + byteLength\n            };\n\n            Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n              value = +value;\n              offset = offset | 0;\n              byteLength = byteLength | 0;\n              if (!noAssert) {\n                var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n                checkInt(this, value, offset, byteLength, maxBytes, 0);\n              }\n\n              var i = byteLength - 1;\n              var mul = 1;\n              this[offset + i] = value & 0xFF;\n              while (--i >= 0 && (mul *= 0x100)) {\n                this[offset + i] = (value / mul) & 0xFF;\n              }\n\n              return offset + byteLength\n            };\n\n            Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n              value = +value;\n              offset = offset | 0;\n              if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);\n              if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);\n              this[offset] = (value & 0xff);\n              return offset + 1\n            };\n\n            function objectWriteUInt16 (buf, value, offset, littleEndian) {\n              if (value < 0) value = 0xffff + value + 1;\n              for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n                buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n                  (littleEndian ? i : 1 - i) * 8;\n              }\n            }\n\n            Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n              value = +value;\n              offset = offset | 0;\n              if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n              if (Buffer.TYPED_ARRAY_SUPPORT) {\n                this[offset] = (value & 0xff);\n                this[offset + 1] = (value >>> 8);\n              } else {\n                objectWriteUInt16(this, value, offset, true);\n              }\n              return offset + 2\n            };\n\n            Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n              value = +value;\n              offset = offset | 0;\n              if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n              if (Buffer.TYPED_ARRAY_SUPPORT) {\n                this[offset] = (value >>> 8);\n                this[offset + 1] = (value & 0xff);\n              } else {\n                objectWriteUInt16(this, value, offset, false);\n              }\n              return offset + 2\n            };\n\n            function objectWriteUInt32 (buf, value, offset, littleEndian) {\n              if (value < 0) value = 0xffffffff + value + 1;\n              for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n                buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;\n              }\n            }\n\n            Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n              value = +value;\n              offset = offset | 0;\n              if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n              if (Buffer.TYPED_ARRAY_SUPPORT) {\n                this[offset + 3] = (value >>> 24);\n                this[offset + 2] = (value >>> 16);\n                this[offset + 1] = (value >>> 8);\n                this[offset] = (value & 0xff);\n              } else {\n                objectWriteUInt32(this, value, offset, true);\n              }\n              return offset + 4\n            };\n\n            Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n              value = +value;\n              offset = offset | 0;\n              if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n              if (Buffer.TYPED_ARRAY_SUPPORT) {\n                this[offset] = (value >>> 24);\n                this[offset + 1] = (value >>> 16);\n                this[offset + 2] = (value >>> 8);\n                this[offset + 3] = (value & 0xff);\n              } else {\n                objectWriteUInt32(this, value, offset, false);\n              }\n              return offset + 4\n            };\n\n            Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n              value = +value;\n              offset = offset | 0;\n              if (!noAssert) {\n                var limit = Math.pow(2, 8 * byteLength - 1);\n\n                checkInt(this, value, offset, byteLength, limit - 1, -limit);\n              }\n\n              var i = 0;\n              var mul = 1;\n              var sub = 0;\n              this[offset] = value & 0xFF;\n              while (++i < byteLength && (mul *= 0x100)) {\n                if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n                  sub = 1;\n                }\n                this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;\n              }\n\n              return offset + byteLength\n            };\n\n            Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n              value = +value;\n              offset = offset | 0;\n              if (!noAssert) {\n                var limit = Math.pow(2, 8 * byteLength - 1);\n\n                checkInt(this, value, offset, byteLength, limit - 1, -limit);\n              }\n\n              var i = byteLength - 1;\n              var mul = 1;\n              var sub = 0;\n              this[offset + i] = value & 0xFF;\n              while (--i >= 0 && (mul *= 0x100)) {\n                if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n                  sub = 1;\n                }\n                this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;\n              }\n\n              return offset + byteLength\n            };\n\n            Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n              value = +value;\n              offset = offset | 0;\n              if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);\n              if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);\n              if (value < 0) value = 0xff + value + 1;\n              this[offset] = (value & 0xff);\n              return offset + 1\n            };\n\n            Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n              value = +value;\n              offset = offset | 0;\n              if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n              if (Buffer.TYPED_ARRAY_SUPPORT) {\n                this[offset] = (value & 0xff);\n                this[offset + 1] = (value >>> 8);\n              } else {\n                objectWriteUInt16(this, value, offset, true);\n              }\n              return offset + 2\n            };\n\n            Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n              value = +value;\n              offset = offset | 0;\n              if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n              if (Buffer.TYPED_ARRAY_SUPPORT) {\n                this[offset] = (value >>> 8);\n                this[offset + 1] = (value & 0xff);\n              } else {\n                objectWriteUInt16(this, value, offset, false);\n              }\n              return offset + 2\n            };\n\n            Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n              value = +value;\n              offset = offset | 0;\n              if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n              if (Buffer.TYPED_ARRAY_SUPPORT) {\n                this[offset] = (value & 0xff);\n                this[offset + 1] = (value >>> 8);\n                this[offset + 2] = (value >>> 16);\n                this[offset + 3] = (value >>> 24);\n              } else {\n                objectWriteUInt32(this, value, offset, true);\n              }\n              return offset + 4\n            };\n\n            Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n              value = +value;\n              offset = offset | 0;\n              if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n              if (value < 0) value = 0xffffffff + value + 1;\n              if (Buffer.TYPED_ARRAY_SUPPORT) {\n                this[offset] = (value >>> 24);\n                this[offset + 1] = (value >>> 16);\n                this[offset + 2] = (value >>> 8);\n                this[offset + 3] = (value & 0xff);\n              } else {\n                objectWriteUInt32(this, value, offset, false);\n              }\n              return offset + 4\n            };\n\n            function checkIEEE754 (buf, value, offset, ext, max, min) {\n              if (offset + ext > buf.length) throw new RangeError('Index out of range')\n              if (offset < 0) throw new RangeError('Index out of range')\n            }\n\n            function writeFloat (buf, value, offset, littleEndian, noAssert) {\n              if (!noAssert) {\n                checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);\n              }\n              write(buf, value, offset, littleEndian, 23, 4);\n              return offset + 4\n            }\n\n            Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n              return writeFloat(this, value, offset, true, noAssert)\n            };\n\n            Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n              return writeFloat(this, value, offset, false, noAssert)\n            };\n\n            function writeDouble (buf, value, offset, littleEndian, noAssert) {\n              if (!noAssert) {\n                checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);\n              }\n              write(buf, value, offset, littleEndian, 52, 8);\n              return offset + 8\n            }\n\n            Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n              return writeDouble(this, value, offset, true, noAssert)\n            };\n\n            Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n              return writeDouble(this, value, offset, false, noAssert)\n            };\n\n            // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\n            Buffer.prototype.copy = function copy (target, targetStart, start, end) {\n              if (!start) start = 0;\n              if (!end && end !== 0) end = this.length;\n              if (targetStart >= target.length) targetStart = target.length;\n              if (!targetStart) targetStart = 0;\n              if (end > 0 && end < start) end = start;\n\n              // Copy 0 bytes; we're done\n              if (end === start) return 0\n              if (target.length === 0 || this.length === 0) return 0\n\n              // Fatal error conditions\n              if (targetStart < 0) {\n                throw new RangeError('targetStart out of bounds')\n              }\n              if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n              if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n              // Are we oob?\n              if (end > this.length) end = this.length;\n              if (target.length - targetStart < end - start) {\n                end = target.length - targetStart + start;\n              }\n\n              var len = end - start;\n              var i;\n\n              if (this === target && start < targetStart && targetStart < end) {\n                // descending copy from end\n                for (i = len - 1; i >= 0; --i) {\n                  target[i + targetStart] = this[i + start];\n                }\n              } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n                // ascending copy from start\n                for (i = 0; i < len; ++i) {\n                  target[i + targetStart] = this[i + start];\n                }\n              } else {\n                Uint8Array.prototype.set.call(\n                  target,\n                  this.subarray(start, start + len),\n                  targetStart\n                );\n              }\n\n              return len\n            };\n\n            // Usage:\n            //    buffer.fill(number[, offset[, end]])\n            //    buffer.fill(buffer[, offset[, end]])\n            //    buffer.fill(string[, offset[, end]][, encoding])\n            Buffer.prototype.fill = function fill (val, start, end, encoding) {\n              // Handle string cases:\n              if (typeof val === 'string') {\n                if (typeof start === 'string') {\n                  encoding = start;\n                  start = 0;\n                  end = this.length;\n                } else if (typeof end === 'string') {\n                  encoding = end;\n                  end = this.length;\n                }\n                if (val.length === 1) {\n                  var code = val.charCodeAt(0);\n                  if (code < 256) {\n                    val = code;\n                  }\n                }\n                if (encoding !== undefined && typeof encoding !== 'string') {\n                  throw new TypeError('encoding must be a string')\n                }\n                if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n                  throw new TypeError('Unknown encoding: ' + encoding)\n                }\n              } else if (typeof val === 'number') {\n                val = val & 255;\n              }\n\n              // Invalid ranges are not set to a default, so can range check early.\n              if (start < 0 || this.length < start || this.length < end) {\n                throw new RangeError('Out of range index')\n              }\n\n              if (end <= start) {\n                return this\n              }\n\n              start = start >>> 0;\n              end = end === undefined ? this.length : end >>> 0;\n\n              if (!val) val = 0;\n\n              var i;\n              if (typeof val === 'number') {\n                for (i = start; i < end; ++i) {\n                  this[i] = val;\n                }\n              } else {\n                var bytes = internalIsBuffer(val)\n                  ? val\n                  : utf8ToBytes(new Buffer(val, encoding).toString());\n                var len = bytes.length;\n                for (i = 0; i < end - start; ++i) {\n                  this[i + start] = bytes[i % len];\n                }\n              }\n\n              return this\n            };\n\n            // HELPER FUNCTIONS\n            // ================\n\n            var INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g;\n\n            function base64clean (str) {\n              // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n              str = stringtrim(str).replace(INVALID_BASE64_RE, '');\n              // Node converts strings with length < 2 to ''\n              if (str.length < 2) return ''\n              // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n              while (str.length % 4 !== 0) {\n                str = str + '=';\n              }\n              return str\n            }\n\n            function stringtrim (str) {\n              if (str.trim) return str.trim()\n              return str.replace(/^\\s+|\\s+$/g, '')\n            }\n\n            function toHex (n) {\n              if (n < 16) return '0' + n.toString(16)\n              return n.toString(16)\n            }\n\n            function utf8ToBytes (string, units) {\n              units = units || Infinity;\n              var codePoint;\n              var length = string.length;\n              var leadSurrogate = null;\n              var bytes = [];\n\n              for (var i = 0; i < length; ++i) {\n                codePoint = string.charCodeAt(i);\n\n                // is surrogate component\n                if (codePoint > 0xD7FF && codePoint < 0xE000) {\n                  // last char was a lead\n                  if (!leadSurrogate) {\n                    // no lead yet\n                    if (codePoint > 0xDBFF) {\n                      // unexpected trail\n                      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n                      continue\n                    } else if (i + 1 === length) {\n                      // unpaired lead\n                      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n                      continue\n                    }\n\n                    // valid lead\n                    leadSurrogate = codePoint;\n\n                    continue\n                  }\n\n                  // 2 leads in a row\n                  if (codePoint < 0xDC00) {\n                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n                    leadSurrogate = codePoint;\n                    continue\n                  }\n\n                  // valid surrogate pair\n                  codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;\n                } else if (leadSurrogate) {\n                  // valid bmp char, but last char was a lead\n                  if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n                }\n\n                leadSurrogate = null;\n\n                // encode utf8\n                if (codePoint < 0x80) {\n                  if ((units -= 1) < 0) break\n                  bytes.push(codePoint);\n                } else if (codePoint < 0x800) {\n                  if ((units -= 2) < 0) break\n                  bytes.push(\n                    codePoint >> 0x6 | 0xC0,\n                    codePoint & 0x3F | 0x80\n                  );\n                } else if (codePoint < 0x10000) {\n                  if ((units -= 3) < 0) break\n                  bytes.push(\n                    codePoint >> 0xC | 0xE0,\n                    codePoint >> 0x6 & 0x3F | 0x80,\n                    codePoint & 0x3F | 0x80\n                  );\n                } else if (codePoint < 0x110000) {\n                  if ((units -= 4) < 0) break\n                  bytes.push(\n                    codePoint >> 0x12 | 0xF0,\n                    codePoint >> 0xC & 0x3F | 0x80,\n                    codePoint >> 0x6 & 0x3F | 0x80,\n                    codePoint & 0x3F | 0x80\n                  );\n                } else {\n                  throw new Error('Invalid code point')\n                }\n              }\n\n              return bytes\n            }\n\n            function asciiToBytes (str) {\n              var byteArray = [];\n              for (var i = 0; i < str.length; ++i) {\n                // Node's code seems to be doing this and not & 0x7F..\n                byteArray.push(str.charCodeAt(i) & 0xFF);\n              }\n              return byteArray\n            }\n\n            function utf16leToBytes (str, units) {\n              var c, hi, lo;\n              var byteArray = [];\n              for (var i = 0; i < str.length; ++i) {\n                if ((units -= 2) < 0) break\n\n                c = str.charCodeAt(i);\n                hi = c >> 8;\n                lo = c % 256;\n                byteArray.push(lo);\n                byteArray.push(hi);\n              }\n\n              return byteArray\n            }\n\n\n            function base64ToBytes (str) {\n              return toByteArray(base64clean(str))\n            }\n\n            function blitBuffer (src, dst, offset, length) {\n              for (var i = 0; i < length; ++i) {\n                if ((i + offset >= dst.length) || (i >= src.length)) break\n                dst[i + offset] = src[i];\n              }\n              return i\n            }\n\n            function isnan (val) {\n              return val !== val // eslint-disable-line no-self-compare\n            }\n\n\n            // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence\n            // The _isBuffer check is for Safari 5-7 support, because it's missing\n            // Object.prototype.constructor. Remove this eventually\n            function isBuffer(obj) {\n              return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))\n            }\n\n            function isFastBuffer (obj) {\n              return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n            }\n\n            // For Node v0.10 support. Remove this eventually.\n            function isSlowBuffer (obj) {\n              return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))\n            }\n\n            // shim for using process in browser\n            // based off https://github.com/defunctzombie/node-process/blob/master/browser.js\n\n            function defaultSetTimout() {\n                throw new Error('setTimeout has not been defined');\n            }\n            function defaultClearTimeout () {\n                throw new Error('clearTimeout has not been defined');\n            }\n            var cachedSetTimeout = defaultSetTimout;\n            var cachedClearTimeout = defaultClearTimeout;\n            if (typeof global$1.setTimeout === 'function') {\n                cachedSetTimeout = setTimeout;\n            }\n            if (typeof global$1.clearTimeout === 'function') {\n                cachedClearTimeout = clearTimeout;\n            }\n\n            function runTimeout(fun) {\n                if (cachedSetTimeout === setTimeout) {\n                    //normal enviroments in sane situations\n                    return setTimeout(fun, 0);\n                }\n                // if setTimeout wasn't available but was latter defined\n                if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n                    cachedSetTimeout = setTimeout;\n                    return setTimeout(fun, 0);\n                }\n                try {\n                    // when when somebody has screwed with setTimeout but no I.E. maddness\n                    return cachedSetTimeout(fun, 0);\n                } catch(e){\n                    try {\n                        // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n                        return cachedSetTimeout.call(null, fun, 0);\n                    } catch(e){\n                        // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n                        return cachedSetTimeout.call(this, fun, 0);\n                    }\n                }\n\n\n            }\n            function runClearTimeout(marker) {\n                if (cachedClearTimeout === clearTimeout) {\n                    //normal enviroments in sane situations\n                    return clearTimeout(marker);\n                }\n                // if clearTimeout wasn't available but was latter defined\n                if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n                    cachedClearTimeout = clearTimeout;\n                    return clearTimeout(marker);\n                }\n                try {\n                    // when when somebody has screwed with setTimeout but no I.E. maddness\n                    return cachedClearTimeout(marker);\n                } catch (e){\n                    try {\n                        // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n                        return cachedClearTimeout.call(null, marker);\n                    } catch (e){\n                        // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n                        // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n                        return cachedClearTimeout.call(this, marker);\n                    }\n                }\n\n\n\n            }\n            var queue = [];\n            var draining = false;\n            var currentQueue;\n            var queueIndex = -1;\n\n            function cleanUpNextTick() {\n                if (!draining || !currentQueue) {\n                    return;\n                }\n                draining = false;\n                if (currentQueue.length) {\n                    queue = currentQueue.concat(queue);\n                } else {\n                    queueIndex = -1;\n                }\n                if (queue.length) {\n                    drainQueue();\n                }\n            }\n\n            function drainQueue() {\n                if (draining) {\n                    return;\n                }\n                var timeout = runTimeout(cleanUpNextTick);\n                draining = true;\n\n                var len = queue.length;\n                while(len) {\n                    currentQueue = queue;\n                    queue = [];\n                    while (++queueIndex < len) {\n                        if (currentQueue) {\n                            currentQueue[queueIndex].run();\n                        }\n                    }\n                    queueIndex = -1;\n                    len = queue.length;\n                }\n                currentQueue = null;\n                draining = false;\n                runClearTimeout(timeout);\n            }\n            function nextTick(fun) {\n                var args = new Array(arguments.length - 1);\n                if (arguments.length > 1) {\n                    for (var i = 1; i < arguments.length; i++) {\n                        args[i - 1] = arguments[i];\n                    }\n                }\n                queue.push(new Item(fun, args));\n                if (queue.length === 1 && !draining) {\n                    runTimeout(drainQueue);\n                }\n            }\n            // v8 likes predictible objects\n            function Item(fun, array) {\n                this.fun = fun;\n                this.array = array;\n            }\n            Item.prototype.run = function () {\n                this.fun.apply(null, this.array);\n            };\n            var title = 'browser';\n            var platform$1 = 'browser';\n            var browser = true;\n            var env = {};\n            var argv = [];\n            var version = ''; // empty string to avoid regexp issues\n            var versions = {};\n            var release$1 = {};\n            var config = {};\n\n            function noop() {}\n\n            var on = noop;\n            var addListener = noop;\n            var once = noop;\n            var off = noop;\n            var removeListener = noop;\n            var removeAllListeners = noop;\n            var emit = noop;\n\n            function binding(name) {\n                throw new Error('process.binding is not supported');\n            }\n\n            function cwd () { return '/' }\n            function chdir (dir) {\n                throw new Error('process.chdir is not supported');\n            }function umask() { return 0; }\n\n            // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js\n            var performance = global$1.performance || {};\n            var performanceNow =\n              performance.now        ||\n              performance.mozNow     ||\n              performance.msNow      ||\n              performance.oNow       ||\n              performance.webkitNow  ||\n              function(){ return (new Date()).getTime() };\n\n            // generate timestamp or delta\n            // see http://nodejs.org/api/process.html#process_process_hrtime\n            function hrtime(previousTimestamp){\n              var clocktime = performanceNow.call(performance)*1e-3;\n              var seconds = Math.floor(clocktime);\n              var nanoseconds = Math.floor((clocktime%1)*1e9);\n              if (previousTimestamp) {\n                seconds = seconds - previousTimestamp[0];\n                nanoseconds = nanoseconds - previousTimestamp[1];\n                if (nanoseconds<0) {\n                  seconds--;\n                  nanoseconds += 1e9;\n                }\n              }\n              return [seconds,nanoseconds]\n            }\n\n            var startTime = new Date();\n            function uptime$1() {\n              var currentTime = new Date();\n              var dif = currentTime - startTime;\n              return dif / 1000;\n            }\n\n            var process = {\n              nextTick: nextTick,\n              title: title,\n              browser: browser,\n              env: env,\n              argv: argv,\n              version: version,\n              versions: versions,\n              on: on,\n              addListener: addListener,\n              once: once,\n              off: off,\n              removeListener: removeListener,\n              removeAllListeners: removeAllListeners,\n              emit: emit,\n              binding: binding,\n              cwd: cwd,\n              chdir: chdir,\n              umask: umask,\n              hrtime: hrtime,\n              platform: platform$1,\n              release: release$1,\n              config: config,\n              uptime: uptime$1\n            };\n\n            var inherits$1;\n            if (typeof Object.create === 'function'){\n              inherits$1 = function inherits(ctor, superCtor) {\n                // implementation from standard node.js 'util' module\n                ctor.super_ = superCtor;\n                ctor.prototype = Object.create(superCtor.prototype, {\n                  constructor: {\n                    value: ctor,\n                    enumerable: false,\n                    writable: true,\n                    configurable: true\n                  }\n                });\n              };\n            } else {\n              inherits$1 = function inherits(ctor, superCtor) {\n                ctor.super_ = superCtor;\n                var TempCtor = function () {};\n                TempCtor.prototype = superCtor.prototype;\n                ctor.prototype = new TempCtor();\n                ctor.prototype.constructor = ctor;\n              };\n            }\n            var inherits$2 = inherits$1;\n\n            var formatRegExp = /%[sdj%]/g;\n            function format(f) {\n              if (!isString(f)) {\n                var objects = [];\n                for (var i = 0; i < arguments.length; i++) {\n                  objects.push(inspect(arguments[i]));\n                }\n                return objects.join(' ');\n              }\n\n              var i = 1;\n              var args = arguments;\n              var len = args.length;\n              var str = String(f).replace(formatRegExp, function(x) {\n                if (x === '%%') return '%';\n                if (i >= len) return x;\n                switch (x) {\n                  case '%s': return String(args[i++]);\n                  case '%d': return Number(args[i++]);\n                  case '%j':\n                    try {\n                      return JSON.stringify(args[i++]);\n                    } catch (_) {\n                      return '[Circular]';\n                    }\n                  default:\n                    return x;\n                }\n              });\n              for (var x = args[i]; i < len; x = args[++i]) {\n                if (isNull(x) || !isObject$2(x)) {\n                  str += ' ' + x;\n                } else {\n                  str += ' ' + inspect(x);\n                }\n              }\n              return str;\n            }\n\n            // Mark that a method should not be used.\n            // Returns a modified function which warns once by default.\n            // If --no-deprecation is set, then it is a no-op.\n            function deprecate(fn, msg) {\n              // Allow for deprecating things in the process of starting up.\n              if (isUndefined(global$1.process)) {\n                return function() {\n                  return deprecate(fn, msg).apply(this, arguments);\n                };\n              }\n\n              var warned = false;\n              function deprecated() {\n                if (!warned) {\n                  {\n                    console.error(msg);\n                  }\n                  warned = true;\n                }\n                return fn.apply(this, arguments);\n              }\n\n              return deprecated;\n            }\n\n            var debugs = {};\n            var debugEnviron;\n            function debuglog(set) {\n              if (isUndefined(debugEnviron))\n                debugEnviron = process.env.NODE_DEBUG || '';\n              set = set.toUpperCase();\n              if (!debugs[set]) {\n                if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n                  var pid = 0;\n                  debugs[set] = function() {\n                    var msg = format.apply(null, arguments);\n                    console.error('%s %d: %s', set, pid, msg);\n                  };\n                } else {\n                  debugs[set] = function() {};\n                }\n              }\n              return debugs[set];\n            }\n\n            /**\n             * Echos the value of a value. Trys to print the value out\n             * in the best way possible given the different types.\n             *\n             * @param {Object} obj The object to print out.\n             * @param {Object} opts Optional options object that alters the output.\n             */\n            /* legacy: obj, showHidden, depth, colors*/\n            function inspect(obj, opts) {\n              // default options\n              var ctx = {\n                seen: [],\n                stylize: stylizeNoColor\n              };\n              // legacy...\n              if (arguments.length >= 3) ctx.depth = arguments[2];\n              if (arguments.length >= 4) ctx.colors = arguments[3];\n              if (isBoolean(opts)) {\n                // legacy...\n                ctx.showHidden = opts;\n              } else if (opts) {\n                // got an \"options\" object\n                _extend(ctx, opts);\n              }\n              // set default options\n              if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n              if (isUndefined(ctx.depth)) ctx.depth = 2;\n              if (isUndefined(ctx.colors)) ctx.colors = false;\n              if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n              if (ctx.colors) ctx.stylize = stylizeWithColor;\n              return formatValue(ctx, obj, ctx.depth);\n            }\n\n            // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\n            inspect.colors = {\n              'bold' : [1, 22],\n              'italic' : [3, 23],\n              'underline' : [4, 24],\n              'inverse' : [7, 27],\n              'white' : [37, 39],\n              'grey' : [90, 39],\n              'black' : [30, 39],\n              'blue' : [34, 39],\n              'cyan' : [36, 39],\n              'green' : [32, 39],\n              'magenta' : [35, 39],\n              'red' : [31, 39],\n              'yellow' : [33, 39]\n            };\n\n            // Don't use 'blue' not visible on cmd.exe\n            inspect.styles = {\n              'special': 'cyan',\n              'number': 'yellow',\n              'boolean': 'yellow',\n              'undefined': 'grey',\n              'null': 'bold',\n              'string': 'green',\n              'date': 'magenta',\n              // \"name\": intentionally not styling\n              'regexp': 'red'\n            };\n\n\n            function stylizeWithColor(str, styleType) {\n              var style = inspect.styles[styleType];\n\n              if (style) {\n                return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n                       '\\u001b[' + inspect.colors[style][1] + 'm';\n              } else {\n                return str;\n              }\n            }\n\n\n            function stylizeNoColor(str, styleType) {\n              return str;\n            }\n\n\n            function arrayToHash(array) {\n              var hash = {};\n\n              array.forEach(function(val, idx) {\n                hash[val] = true;\n              });\n\n              return hash;\n            }\n\n\n            function formatValue(ctx, value, recurseTimes) {\n              // Provide a hook for user-specified inspect functions.\n              // Check that value is an object with an inspect function on it\n              if (ctx.customInspect &&\n                  value &&\n                  isFunction$2(value.inspect) &&\n                  // Filter out the util module, it's inspect function is special\n                  value.inspect !== inspect &&\n                  // Also filter out any prototype objects using the circular check.\n                  !(value.constructor && value.constructor.prototype === value)) {\n                var ret = value.inspect(recurseTimes, ctx);\n                if (!isString(ret)) {\n                  ret = formatValue(ctx, ret, recurseTimes);\n                }\n                return ret;\n              }\n\n              // Primitive types cannot have properties\n              var primitive = formatPrimitive(ctx, value);\n              if (primitive) {\n                return primitive;\n              }\n\n              // Look up the keys of the object.\n              var keys = Object.keys(value);\n              var visibleKeys = arrayToHash(keys);\n\n              if (ctx.showHidden) {\n                keys = Object.getOwnPropertyNames(value);\n              }\n\n              // IE doesn't make error fields non-enumerable\n              // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n              if (isError(value)\n                  && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n                return formatError(value);\n              }\n\n              // Some type of object without properties can be shortcutted.\n              if (keys.length === 0) {\n                if (isFunction$2(value)) {\n                  var name = value.name ? ': ' + value.name : '';\n                  return ctx.stylize('[Function' + name + ']', 'special');\n                }\n                if (isRegExp(value)) {\n                  return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n                }\n                if (isDate(value)) {\n                  return ctx.stylize(Date.prototype.toString.call(value), 'date');\n                }\n                if (isError(value)) {\n                  return formatError(value);\n                }\n              }\n\n              var base = '', array = false, braces = ['{', '}'];\n\n              // Make Array say that they are Array\n              if (isArray$3(value)) {\n                array = true;\n                braces = ['[', ']'];\n              }\n\n              // Make functions say that they are functions\n              if (isFunction$2(value)) {\n                var n = value.name ? ': ' + value.name : '';\n                base = ' [Function' + n + ']';\n              }\n\n              // Make RegExps say that they are RegExps\n              if (isRegExp(value)) {\n                base = ' ' + RegExp.prototype.toString.call(value);\n              }\n\n              // Make dates with properties first say the date\n              if (isDate(value)) {\n                base = ' ' + Date.prototype.toUTCString.call(value);\n              }\n\n              // Make error with message first say the error\n              if (isError(value)) {\n                base = ' ' + formatError(value);\n              }\n\n              if (keys.length === 0 && (!array || value.length == 0)) {\n                return braces[0] + base + braces[1];\n              }\n\n              if (recurseTimes < 0) {\n                if (isRegExp(value)) {\n                  return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n                } else {\n                  return ctx.stylize('[Object]', 'special');\n                }\n              }\n\n              ctx.seen.push(value);\n\n              var output;\n              if (array) {\n                output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n              } else {\n                output = keys.map(function(key) {\n                  return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n                });\n              }\n\n              ctx.seen.pop();\n\n              return reduceToSingleString(output, base, braces);\n            }\n\n\n            function formatPrimitive(ctx, value) {\n              if (isUndefined(value))\n                return ctx.stylize('undefined', 'undefined');\n              if (isString(value)) {\n                var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                                         .replace(/'/g, \"\\\\'\")\n                                                         .replace(/\\\\\"/g, '\"') + '\\'';\n                return ctx.stylize(simple, 'string');\n              }\n              if (isNumber(value))\n                return ctx.stylize('' + value, 'number');\n              if (isBoolean(value))\n                return ctx.stylize('' + value, 'boolean');\n              // For some reason typeof null is \"object\", so special case here.\n              if (isNull(value))\n                return ctx.stylize('null', 'null');\n            }\n\n\n            function formatError(value) {\n              return '[' + Error.prototype.toString.call(value) + ']';\n            }\n\n\n            function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n              var output = [];\n              for (var i = 0, l = value.length; i < l; ++i) {\n                if (hasOwnProperty$2(value, String(i))) {\n                  output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n                      String(i), true));\n                } else {\n                  output.push('');\n                }\n              }\n              keys.forEach(function(key) {\n                if (!key.match(/^\\d+$/)) {\n                  output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n                      key, true));\n                }\n              });\n              return output;\n            }\n\n\n            function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n              var name, str, desc;\n              desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n              if (desc.get) {\n                if (desc.set) {\n                  str = ctx.stylize('[Getter/Setter]', 'special');\n                } else {\n                  str = ctx.stylize('[Getter]', 'special');\n                }\n              } else {\n                if (desc.set) {\n                  str = ctx.stylize('[Setter]', 'special');\n                }\n              }\n              if (!hasOwnProperty$2(visibleKeys, key)) {\n                name = '[' + key + ']';\n              }\n              if (!str) {\n                if (ctx.seen.indexOf(desc.value) < 0) {\n                  if (isNull(recurseTimes)) {\n                    str = formatValue(ctx, desc.value, null);\n                  } else {\n                    str = formatValue(ctx, desc.value, recurseTimes - 1);\n                  }\n                  if (str.indexOf('\\n') > -1) {\n                    if (array) {\n                      str = str.split('\\n').map(function(line) {\n                        return '  ' + line;\n                      }).join('\\n').substr(2);\n                    } else {\n                      str = '\\n' + str.split('\\n').map(function(line) {\n                        return '   ' + line;\n                      }).join('\\n');\n                    }\n                  }\n                } else {\n                  str = ctx.stylize('[Circular]', 'special');\n                }\n              }\n              if (isUndefined(name)) {\n                if (array && key.match(/^\\d+$/)) {\n                  return str;\n                }\n                name = JSON.stringify('' + key);\n                if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n                  name = name.substr(1, name.length - 2);\n                  name = ctx.stylize(name, 'name');\n                } else {\n                  name = name.replace(/'/g, \"\\\\'\")\n                             .replace(/\\\\\"/g, '\"')\n                             .replace(/(^\"|\"$)/g, \"'\");\n                  name = ctx.stylize(name, 'string');\n                }\n              }\n\n              return name + ': ' + str;\n            }\n\n\n            function reduceToSingleString(output, base, braces) {\n              var length = output.reduce(function(prev, cur) {\n                if (cur.indexOf('\\n') >= 0) ;\n                return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n              }, 0);\n\n              if (length > 60) {\n                return braces[0] +\n                       (base === '' ? '' : base + '\\n ') +\n                       ' ' +\n                       output.join(',\\n  ') +\n                       ' ' +\n                       braces[1];\n              }\n\n              return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n            }\n\n\n            // NOTE: These type checking functions intentionally don't use `instanceof`\n            // because it is fragile and can be easily faked with `Object.create()`.\n            function isArray$3(ar) {\n              return Array.isArray(ar);\n            }\n\n            function isBoolean(arg) {\n              return typeof arg === 'boolean';\n            }\n\n            function isNull(arg) {\n              return arg === null;\n            }\n\n            function isNumber(arg) {\n              return typeof arg === 'number';\n            }\n\n            function isString(arg) {\n              return typeof arg === 'string';\n            }\n\n            function isUndefined(arg) {\n              return arg === void 0;\n            }\n\n            function isRegExp(re) {\n              return isObject$2(re) && objectToString$2(re) === '[object RegExp]';\n            }\n\n            function isObject$2(arg) {\n              return typeof arg === 'object' && arg !== null;\n            }\n\n            function isDate(d) {\n              return isObject$2(d) && objectToString$2(d) === '[object Date]';\n            }\n\n            function isError(e) {\n              return isObject$2(e) &&\n                  (objectToString$2(e) === '[object Error]' || e instanceof Error);\n            }\n\n            function isFunction$2(arg) {\n              return typeof arg === 'function';\n            }\n\n            function objectToString$2(o) {\n              return Object.prototype.toString.call(o);\n            }\n\n            function _extend(origin, add) {\n              // Don't do anything if add isn't an object\n              if (!add || !isObject$2(add)) return origin;\n\n              var keys = Object.keys(add);\n              var i = keys.length;\n              while (i--) {\n                origin[keys[i]] = add[keys[i]];\n              }\n              return origin;\n            }\n            function hasOwnProperty$2(obj, prop) {\n              return Object.prototype.hasOwnProperty.call(obj, prop);\n            }\n\n            function BufferList() {\n              this.head = null;\n              this.tail = null;\n              this.length = 0;\n            }\n\n            BufferList.prototype.push = function (v) {\n              var entry = { data: v, next: null };\n              if (this.length > 0) this.tail.next = entry;else this.head = entry;\n              this.tail = entry;\n              ++this.length;\n            };\n\n            BufferList.prototype.unshift = function (v) {\n              var entry = { data: v, next: this.head };\n              if (this.length === 0) this.tail = entry;\n              this.head = entry;\n              ++this.length;\n            };\n\n            BufferList.prototype.shift = function () {\n              if (this.length === 0) return;\n              var ret = this.head.data;\n              if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;\n              --this.length;\n              return ret;\n            };\n\n            BufferList.prototype.clear = function () {\n              this.head = this.tail = null;\n              this.length = 0;\n            };\n\n            BufferList.prototype.join = function (s) {\n              if (this.length === 0) return '';\n              var p = this.head;\n              var ret = '' + p.data;\n              while (p = p.next) {\n                ret += s + p.data;\n              }return ret;\n            };\n\n            BufferList.prototype.concat = function (n) {\n              if (this.length === 0) return Buffer.alloc(0);\n              if (this.length === 1) return this.head.data;\n              var ret = Buffer.allocUnsafe(n >>> 0);\n              var p = this.head;\n              var i = 0;\n              while (p) {\n                p.data.copy(ret, i);\n                i += p.data.length;\n                p = p.next;\n              }\n              return ret;\n            };\n\n            // Copyright Joyent, Inc. and other Node contributors.\n            var isBufferEncoding = Buffer.isEncoding\n              || function(encoding) {\n                   switch (encoding && encoding.toLowerCase()) {\n                     case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;\n                     default: return false;\n                   }\n                 };\n\n\n            function assertEncoding(encoding) {\n              if (encoding && !isBufferEncoding(encoding)) {\n                throw new Error('Unknown encoding: ' + encoding);\n              }\n            }\n\n            // StringDecoder provides an interface for efficiently splitting a series of\n            // buffers into a series of JS strings without breaking apart multi-byte\n            // characters. CESU-8 is handled as part of the UTF-8 encoding.\n            //\n            // @TODO Handling all encodings inside a single object makes it very difficult\n            // to reason about this code, so it should be split up in the future.\n            // @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code\n            // points as used by CESU-8.\n            function StringDecoder(encoding) {\n              this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');\n              assertEncoding(encoding);\n              switch (this.encoding) {\n                case 'utf8':\n                  // CESU-8 represents each of Surrogate Pair by 3-bytes\n                  this.surrogateSize = 3;\n                  break;\n                case 'ucs2':\n                case 'utf16le':\n                  // UTF-16 represents each of Surrogate Pair by 2-bytes\n                  this.surrogateSize = 2;\n                  this.detectIncompleteChar = utf16DetectIncompleteChar;\n                  break;\n                case 'base64':\n                  // Base-64 stores 3 bytes in 4 chars, and pads the remainder.\n                  this.surrogateSize = 3;\n                  this.detectIncompleteChar = base64DetectIncompleteChar;\n                  break;\n                default:\n                  this.write = passThroughWrite;\n                  return;\n              }\n\n              // Enough space to store all bytes of a single character. UTF-8 needs 4\n              // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).\n              this.charBuffer = new Buffer(6);\n              // Number of bytes received for the current incomplete multi-byte character.\n              this.charReceived = 0;\n              // Number of bytes expected for the current incomplete multi-byte character.\n              this.charLength = 0;\n            }\n\n            // write decodes the given buffer and returns it as JS string that is\n            // guaranteed to not contain any partial multi-byte characters. Any partial\n            // character found at the end of the buffer is buffered up, and will be\n            // returned when calling write again with the remaining bytes.\n            //\n            // Note: Converting a Buffer containing an orphan surrogate to a String\n            // currently works, but converting a String to a Buffer (via `new Buffer`, or\n            // Buffer#write) will replace incomplete surrogates with the unicode\n            // replacement character. See https://codereview.chromium.org/121173009/ .\n            StringDecoder.prototype.write = function(buffer) {\n              var charStr = '';\n              // if our last write ended with an incomplete multibyte character\n              while (this.charLength) {\n                // determine how many remaining bytes this buffer has to offer for this char\n                var available = (buffer.length >= this.charLength - this.charReceived) ?\n                    this.charLength - this.charReceived :\n                    buffer.length;\n\n                // add the new bytes to the char buffer\n                buffer.copy(this.charBuffer, this.charReceived, 0, available);\n                this.charReceived += available;\n\n                if (this.charReceived < this.charLength) {\n                  // still not enough chars in this buffer? wait for more ...\n                  return '';\n                }\n\n                // remove bytes belonging to the current character from the buffer\n                buffer = buffer.slice(available, buffer.length);\n\n                // get the character that was split\n                charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);\n\n                // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character\n                var charCode = charStr.charCodeAt(charStr.length - 1);\n                if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n                  this.charLength += this.surrogateSize;\n                  charStr = '';\n                  continue;\n                }\n                this.charReceived = this.charLength = 0;\n\n                // if there are no more bytes in this buffer, just emit our char\n                if (buffer.length === 0) {\n                  return charStr;\n                }\n                break;\n              }\n\n              // determine and set charLength / charReceived\n              this.detectIncompleteChar(buffer);\n\n              var end = buffer.length;\n              if (this.charLength) {\n                // buffer the incomplete character bytes we got\n                buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);\n                end -= this.charReceived;\n              }\n\n              charStr += buffer.toString(this.encoding, 0, end);\n\n              var end = charStr.length - 1;\n              var charCode = charStr.charCodeAt(end);\n              // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character\n              if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n                var size = this.surrogateSize;\n                this.charLength += size;\n                this.charReceived += size;\n                this.charBuffer.copy(this.charBuffer, size, 0, size);\n                buffer.copy(this.charBuffer, 0, 0, size);\n                return charStr.substring(0, end);\n              }\n\n              // or just emit the charStr\n              return charStr;\n            };\n\n            // detectIncompleteChar determines if there is an incomplete UTF-8 character at\n            // the end of the given buffer. If so, it sets this.charLength to the byte\n            // length that character, and sets this.charReceived to the number of bytes\n            // that are available for this character.\n            StringDecoder.prototype.detectIncompleteChar = function(buffer) {\n              // determine how many bytes we have to check at the end of this buffer\n              var i = (buffer.length >= 3) ? 3 : buffer.length;\n\n              // Figure out if one of the last i bytes of our buffer announces an\n              // incomplete char.\n              for (; i > 0; i--) {\n                var c = buffer[buffer.length - i];\n\n                // See http://en.wikipedia.org/wiki/UTF-8#Description\n\n                // 110XXXXX\n                if (i == 1 && c >> 5 == 0x06) {\n                  this.charLength = 2;\n                  break;\n                }\n\n                // 1110XXXX\n                if (i <= 2 && c >> 4 == 0x0E) {\n                  this.charLength = 3;\n                  break;\n                }\n\n                // 11110XXX\n                if (i <= 3 && c >> 3 == 0x1E) {\n                  this.charLength = 4;\n                  break;\n                }\n              }\n              this.charReceived = i;\n            };\n\n            StringDecoder.prototype.end = function(buffer) {\n              var res = '';\n              if (buffer && buffer.length)\n                res = this.write(buffer);\n\n              if (this.charReceived) {\n                var cr = this.charReceived;\n                var buf = this.charBuffer;\n                var enc = this.encoding;\n                res += buf.slice(0, cr).toString(enc);\n              }\n\n              return res;\n            };\n\n            function passThroughWrite(buffer) {\n              return buffer.toString(this.encoding);\n            }\n\n            function utf16DetectIncompleteChar(buffer) {\n              this.charReceived = buffer.length % 2;\n              this.charLength = this.charReceived ? 2 : 0;\n            }\n\n            function base64DetectIncompleteChar(buffer) {\n              this.charReceived = buffer.length % 3;\n              this.charLength = this.charReceived ? 3 : 0;\n            }\n\n            Readable.ReadableState = ReadableState;\n\n            var debug = debuglog('stream');\n            inherits$2(Readable, EventEmitter);\n\n            function prependListener(emitter, event, fn) {\n              // Sadly this is not cacheable as some libraries bundle their own\n              // event emitter implementation with them.\n              if (typeof emitter.prependListener === 'function') {\n                return emitter.prependListener(event, fn);\n              } else {\n                // This is a hack to make sure that our error handler is attached before any\n                // userland ones.  NEVER DO THIS. This is here only because this code needs\n                // to continue to work with older versions of Node.js that do not include\n                // the prependListener() method. The goal is to eventually remove this hack.\n                if (!emitter._events || !emitter._events[event])\n                  emitter.on(event, fn);\n                else if (Array.isArray(emitter._events[event]))\n                  emitter._events[event].unshift(fn);\n                else\n                  emitter._events[event] = [fn, emitter._events[event]];\n              }\n            }\n            function listenerCount$1 (emitter, type) {\n              return emitter.listeners(type).length;\n            }\n            function ReadableState(options, stream) {\n\n              options = options || {};\n\n              // object stream flag. Used to make read(n) ignore n and to\n              // make all the buffer merging and length checks go away\n              this.objectMode = !!options.objectMode;\n\n              if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n              // the point at which it stops calling _read() to fill the buffer\n              // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n              var hwm = options.highWaterMark;\n              var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n              this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;\n\n              // cast to ints.\n              this.highWaterMark = ~ ~this.highWaterMark;\n\n              // A linked list is used to store data chunks instead of an array because the\n              // linked list can remove elements from the beginning faster than\n              // array.shift()\n              this.buffer = new BufferList();\n              this.length = 0;\n              this.pipes = null;\n              this.pipesCount = 0;\n              this.flowing = null;\n              this.ended = false;\n              this.endEmitted = false;\n              this.reading = false;\n\n              // a flag to be able to tell if the onwrite cb is called immediately,\n              // or on a later tick.  We set this to true at first, because any\n              // actions that shouldn't happen until \"later\" should generally also\n              // not happen before the first write call.\n              this.sync = true;\n\n              // whenever we return null, then we set a flag to say\n              // that we're awaiting a 'readable' event emission.\n              this.needReadable = false;\n              this.emittedReadable = false;\n              this.readableListening = false;\n              this.resumeScheduled = false;\n\n              // Crypto is kind of old and crusty.  Historically, its default string\n              // encoding is 'binary' so we have to make this configurable.\n              // Everything else in the universe uses 'utf8', though.\n              this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n              // when piping, we only care about 'readable' events that happen\n              // after read()ing all the bytes and not getting any pushback.\n              this.ranOut = false;\n\n              // the number of writers that are awaiting a drain event in .pipe()s\n              this.awaitDrain = 0;\n\n              // if true, a maybeReadMore has been scheduled\n              this.readingMore = false;\n\n              this.decoder = null;\n              this.encoding = null;\n              if (options.encoding) {\n                this.decoder = new StringDecoder(options.encoding);\n                this.encoding = options.encoding;\n              }\n            }\n            function Readable(options) {\n\n              if (!(this instanceof Readable)) return new Readable(options);\n\n              this._readableState = new ReadableState(options, this);\n\n              // legacy\n              this.readable = true;\n\n              if (options && typeof options.read === 'function') this._read = options.read;\n\n              EventEmitter.call(this);\n            }\n\n            // Manually shove something into the read() buffer.\n            // This returns true if the highWaterMark has not been hit yet,\n            // similar to how Writable.write() returns true if you should\n            // write() some more.\n            Readable.prototype.push = function (chunk, encoding) {\n              var state = this._readableState;\n\n              if (!state.objectMode && typeof chunk === 'string') {\n                encoding = encoding || state.defaultEncoding;\n                if (encoding !== state.encoding) {\n                  chunk = Buffer.from(chunk, encoding);\n                  encoding = '';\n                }\n              }\n\n              return readableAddChunk(this, state, chunk, encoding, false);\n            };\n\n            // Unshift should *always* be something directly out of read()\n            Readable.prototype.unshift = function (chunk) {\n              var state = this._readableState;\n              return readableAddChunk(this, state, chunk, '', true);\n            };\n\n            Readable.prototype.isPaused = function () {\n              return this._readableState.flowing === false;\n            };\n\n            function readableAddChunk(stream, state, chunk, encoding, addToFront) {\n              var er = chunkInvalid(state, chunk);\n              if (er) {\n                stream.emit('error', er);\n              } else if (chunk === null) {\n                state.reading = false;\n                onEofChunk(stream, state);\n              } else if (state.objectMode || chunk && chunk.length > 0) {\n                if (state.ended && !addToFront) {\n                  var e = new Error('stream.push() after EOF');\n                  stream.emit('error', e);\n                } else if (state.endEmitted && addToFront) {\n                  var _e = new Error('stream.unshift() after end event');\n                  stream.emit('error', _e);\n                } else {\n                  var skipAdd;\n                  if (state.decoder && !addToFront && !encoding) {\n                    chunk = state.decoder.write(chunk);\n                    skipAdd = !state.objectMode && chunk.length === 0;\n                  }\n\n                  if (!addToFront) state.reading = false;\n\n                  // Don't add to the buffer if we've decoded to an empty string chunk and\n                  // we're not in object mode\n                  if (!skipAdd) {\n                    // if we want the data now, just emit it.\n                    if (state.flowing && state.length === 0 && !state.sync) {\n                      stream.emit('data', chunk);\n                      stream.read(0);\n                    } else {\n                      // update the buffer info.\n                      state.length += state.objectMode ? 1 : chunk.length;\n                      if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n\n                      if (state.needReadable) emitReadable(stream);\n                    }\n                  }\n\n                  maybeReadMore(stream, state);\n                }\n              } else if (!addToFront) {\n                state.reading = false;\n              }\n\n              return needMoreData(state);\n            }\n\n            // if it's past the high water mark, we can push in some more.\n            // Also, if we have no data yet, we can stand some\n            // more bytes.  This is to work around cases where hwm=0,\n            // such as the repl.  Also, if the push() triggered a\n            // readable event, and the user called read(largeNumber) such that\n            // needReadable was set, then we ought to push more, so that another\n            // 'readable' event will be triggered.\n            function needMoreData(state) {\n              return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n            }\n\n            // backwards compatibility.\n            Readable.prototype.setEncoding = function (enc) {\n              this._readableState.decoder = new StringDecoder(enc);\n              this._readableState.encoding = enc;\n              return this;\n            };\n\n            // Don't raise the hwm > 8MB\n            var MAX_HWM = 0x800000;\n            function computeNewHighWaterMark(n) {\n              if (n >= MAX_HWM) {\n                n = MAX_HWM;\n              } else {\n                // Get the next highest power of 2 to prevent increasing hwm excessively in\n                // tiny amounts\n                n--;\n                n |= n >>> 1;\n                n |= n >>> 2;\n                n |= n >>> 4;\n                n |= n >>> 8;\n                n |= n >>> 16;\n                n++;\n              }\n              return n;\n            }\n\n            // This function is designed to be inlinable, so please take care when making\n            // changes to the function body.\n            function howMuchToRead(n, state) {\n              if (n <= 0 || state.length === 0 && state.ended) return 0;\n              if (state.objectMode) return 1;\n              if (n !== n) {\n                // Only flow one buffer at a time\n                if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n              }\n              // If we're asking for more than the current hwm, then raise the hwm.\n              if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n              if (n <= state.length) return n;\n              // Don't have enough\n              if (!state.ended) {\n                state.needReadable = true;\n                return 0;\n              }\n              return state.length;\n            }\n\n            // you can override either this method, or the async _read(n) below.\n            Readable.prototype.read = function (n) {\n              debug('read', n);\n              n = parseInt(n, 10);\n              var state = this._readableState;\n              var nOrig = n;\n\n              if (n !== 0) state.emittedReadable = false;\n\n              // if we're doing read(0) to trigger a readable event, but we\n              // already have a bunch of data in the buffer, then just trigger\n              // the 'readable' event and move on.\n              if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n                debug('read: emitReadable', state.length, state.ended);\n                if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n                return null;\n              }\n\n              n = howMuchToRead(n, state);\n\n              // if we've ended, and we're now clear, then finish it up.\n              if (n === 0 && state.ended) {\n                if (state.length === 0) endReadable(this);\n                return null;\n              }\n\n              // All the actual chunk generation logic needs to be\n              // *below* the call to _read.  The reason is that in certain\n              // synthetic stream cases, such as passthrough streams, _read\n              // may be a completely synchronous operation which may change\n              // the state of the read buffer, providing enough data when\n              // before there was *not* enough.\n              //\n              // So, the steps are:\n              // 1. Figure out what the state of things will be after we do\n              // a read from the buffer.\n              //\n              // 2. If that resulting state will trigger a _read, then call _read.\n              // Note that this may be asynchronous, or synchronous.  Yes, it is\n              // deeply ugly to write APIs this way, but that still doesn't mean\n              // that the Readable class should behave improperly, as streams are\n              // designed to be sync/async agnostic.\n              // Take note if the _read call is sync or async (ie, if the read call\n              // has returned yet), so that we know whether or not it's safe to emit\n              // 'readable' etc.\n              //\n              // 3. Actually pull the requested chunks out of the buffer and return.\n\n              // if we need a readable event, then we need to do some reading.\n              var doRead = state.needReadable;\n              debug('need readable', doRead);\n\n              // if we currently have less than the highWaterMark, then also read some\n              if (state.length === 0 || state.length - n < state.highWaterMark) {\n                doRead = true;\n                debug('length less than watermark', doRead);\n              }\n\n              // however, if we've ended, then there's no point, and if we're already\n              // reading, then it's unnecessary.\n              if (state.ended || state.reading) {\n                doRead = false;\n                debug('reading or ended', doRead);\n              } else if (doRead) {\n                debug('do read');\n                state.reading = true;\n                state.sync = true;\n                // if the length is currently zero, then we *need* a readable event.\n                if (state.length === 0) state.needReadable = true;\n                // call internal read method\n                this._read(state.highWaterMark);\n                state.sync = false;\n                // If _read pushed data synchronously, then `reading` will be false,\n                // and we need to re-evaluate how much data we can return to the user.\n                if (!state.reading) n = howMuchToRead(nOrig, state);\n              }\n\n              var ret;\n              if (n > 0) ret = fromList(n, state);else ret = null;\n\n              if (ret === null) {\n                state.needReadable = true;\n                n = 0;\n              } else {\n                state.length -= n;\n              }\n\n              if (state.length === 0) {\n                // If we have nothing in the buffer, then we want to know\n                // as soon as we *do* get something into the buffer.\n                if (!state.ended) state.needReadable = true;\n\n                // If we tried to read() past the EOF, then emit end on the next tick.\n                if (nOrig !== n && state.ended) endReadable(this);\n              }\n\n              if (ret !== null) this.emit('data', ret);\n\n              return ret;\n            };\n\n            function chunkInvalid(state, chunk) {\n              var er = null;\n              if (!isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {\n                er = new TypeError('Invalid non-string/buffer chunk');\n              }\n              return er;\n            }\n\n            function onEofChunk(stream, state) {\n              if (state.ended) return;\n              if (state.decoder) {\n                var chunk = state.decoder.end();\n                if (chunk && chunk.length) {\n                  state.buffer.push(chunk);\n                  state.length += state.objectMode ? 1 : chunk.length;\n                }\n              }\n              state.ended = true;\n\n              // emit 'readable' now to make sure it gets picked up.\n              emitReadable(stream);\n            }\n\n            // Don't emit readable right away in sync mode, because this can trigger\n            // another read() call => stack overflow.  This way, it might trigger\n            // a nextTick recursion warning, but that's not so bad.\n            function emitReadable(stream) {\n              var state = stream._readableState;\n              state.needReadable = false;\n              if (!state.emittedReadable) {\n                debug('emitReadable', state.flowing);\n                state.emittedReadable = true;\n                if (state.sync) nextTick(emitReadable_, stream);else emitReadable_(stream);\n              }\n            }\n\n            function emitReadable_(stream) {\n              debug('emit readable');\n              stream.emit('readable');\n              flow(stream);\n            }\n\n            // at this point, the user has presumably seen the 'readable' event,\n            // and called read() to consume some data.  that may have triggered\n            // in turn another _read(n) call, in which case reading = true if\n            // it's in progress.\n            // However, if we're not ended, or reading, and the length < hwm,\n            // then go ahead and try to read some more preemptively.\n            function maybeReadMore(stream, state) {\n              if (!state.readingMore) {\n                state.readingMore = true;\n                nextTick(maybeReadMore_, stream, state);\n              }\n            }\n\n            function maybeReadMore_(stream, state) {\n              var len = state.length;\n              while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {\n                debug('maybeReadMore read 0');\n                stream.read(0);\n                if (len === state.length)\n                  // didn't get any data, stop spinning.\n                  break;else len = state.length;\n              }\n              state.readingMore = false;\n            }\n\n            // abstract method.  to be overridden in specific implementation classes.\n            // call cb(er, data) where data is <= n in length.\n            // for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n            // arbitrary, and perhaps not very meaningful.\n            Readable.prototype._read = function (n) {\n              this.emit('error', new Error('not implemented'));\n            };\n\n            Readable.prototype.pipe = function (dest, pipeOpts) {\n              var src = this;\n              var state = this._readableState;\n\n              switch (state.pipesCount) {\n                case 0:\n                  state.pipes = dest;\n                  break;\n                case 1:\n                  state.pipes = [state.pipes, dest];\n                  break;\n                default:\n                  state.pipes.push(dest);\n                  break;\n              }\n              state.pipesCount += 1;\n              debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n\n              var doEnd = (!pipeOpts || pipeOpts.end !== false);\n\n              var endFn = doEnd ? onend : cleanup;\n              if (state.endEmitted) nextTick(endFn);else src.once('end', endFn);\n\n              dest.on('unpipe', onunpipe);\n              function onunpipe(readable) {\n                debug('onunpipe');\n                if (readable === src) {\n                  cleanup();\n                }\n              }\n\n              function onend() {\n                debug('onend');\n                dest.end();\n              }\n\n              // when the dest drains, it reduces the awaitDrain counter\n              // on the source.  This would be more elegant with a .once()\n              // handler in flow(), but adding and removing repeatedly is\n              // too slow.\n              var ondrain = pipeOnDrain(src);\n              dest.on('drain', ondrain);\n\n              var cleanedUp = false;\n              function cleanup() {\n                debug('cleanup');\n                // cleanup event handlers once the pipe is broken\n                dest.removeListener('close', onclose);\n                dest.removeListener('finish', onfinish);\n                dest.removeListener('drain', ondrain);\n                dest.removeListener('error', onerror);\n                dest.removeListener('unpipe', onunpipe);\n                src.removeListener('end', onend);\n                src.removeListener('end', cleanup);\n                src.removeListener('data', ondata);\n\n                cleanedUp = true;\n\n                // if the reader is waiting for a drain event from this\n                // specific writer, then it would cause it to never start\n                // flowing again.\n                // So, if this is awaiting a drain, then we just call it now.\n                // If we don't know, then assume that we are waiting for one.\n                if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n              }\n\n              // If the user pushes more data while we're writing to dest then we'll end up\n              // in ondata again. However, we only want to increase awaitDrain once because\n              // dest will only emit one 'drain' event for the multiple writes.\n              // => Introduce a guard on increasing awaitDrain.\n              var increasedAwaitDrain = false;\n              src.on('data', ondata);\n              function ondata(chunk) {\n                debug('ondata');\n                increasedAwaitDrain = false;\n                var ret = dest.write(chunk);\n                if (false === ret && !increasedAwaitDrain) {\n                  // If the user unpiped during `dest.write()`, it is possible\n                  // to get stuck in a permanently paused state if that write\n                  // also returned false.\n                  // => Check whether `dest` is still a piping destination.\n                  if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n                    debug('false write response, pause', src._readableState.awaitDrain);\n                    src._readableState.awaitDrain++;\n                    increasedAwaitDrain = true;\n                  }\n                  src.pause();\n                }\n              }\n\n              // if the dest has an error, then stop piping into it.\n              // however, don't suppress the throwing behavior for this.\n              function onerror(er) {\n                debug('onerror', er);\n                unpipe();\n                dest.removeListener('error', onerror);\n                if (listenerCount$1(dest, 'error') === 0) dest.emit('error', er);\n              }\n\n              // Make sure our error handler is attached before userland ones.\n              prependListener(dest, 'error', onerror);\n\n              // Both close and finish should trigger unpipe, but only once.\n              function onclose() {\n                dest.removeListener('finish', onfinish);\n                unpipe();\n              }\n              dest.once('close', onclose);\n              function onfinish() {\n                debug('onfinish');\n                dest.removeListener('close', onclose);\n                unpipe();\n              }\n              dest.once('finish', onfinish);\n\n              function unpipe() {\n                debug('unpipe');\n                src.unpipe(dest);\n              }\n\n              // tell the dest that it's being piped to\n              dest.emit('pipe', src);\n\n              // start the flow if it hasn't been started already.\n              if (!state.flowing) {\n                debug('pipe resume');\n                src.resume();\n              }\n\n              return dest;\n            };\n\n            function pipeOnDrain(src) {\n              return function () {\n                var state = src._readableState;\n                debug('pipeOnDrain', state.awaitDrain);\n                if (state.awaitDrain) state.awaitDrain--;\n                if (state.awaitDrain === 0 && src.listeners('data').length) {\n                  state.flowing = true;\n                  flow(src);\n                }\n              };\n            }\n\n            Readable.prototype.unpipe = function (dest) {\n              var state = this._readableState;\n\n              // if we're not piping anywhere, then do nothing.\n              if (state.pipesCount === 0) return this;\n\n              // just one destination.  most common case.\n              if (state.pipesCount === 1) {\n                // passed in one, but it's not the right one.\n                if (dest && dest !== state.pipes) return this;\n\n                if (!dest) dest = state.pipes;\n\n                // got a match.\n                state.pipes = null;\n                state.pipesCount = 0;\n                state.flowing = false;\n                if (dest) dest.emit('unpipe', this);\n                return this;\n              }\n\n              // slow case. multiple pipe destinations.\n\n              if (!dest) {\n                // remove all.\n                var dests = state.pipes;\n                var len = state.pipesCount;\n                state.pipes = null;\n                state.pipesCount = 0;\n                state.flowing = false;\n\n                for (var _i = 0; _i < len; _i++) {\n                  dests[_i].emit('unpipe', this);\n                }return this;\n              }\n\n              // try to find the right one.\n              var i = indexOf(state.pipes, dest);\n              if (i === -1) return this;\n\n              state.pipes.splice(i, 1);\n              state.pipesCount -= 1;\n              if (state.pipesCount === 1) state.pipes = state.pipes[0];\n\n              dest.emit('unpipe', this);\n\n              return this;\n            };\n\n            // set up data events if they are asked for\n            // Ensure readable listeners eventually get something\n            Readable.prototype.on = function (ev, fn) {\n              var res = EventEmitter.prototype.on.call(this, ev, fn);\n\n              if (ev === 'data') {\n                // Start flowing on next tick if stream isn't explicitly paused\n                if (this._readableState.flowing !== false) this.resume();\n              } else if (ev === 'readable') {\n                var state = this._readableState;\n                if (!state.endEmitted && !state.readableListening) {\n                  state.readableListening = state.needReadable = true;\n                  state.emittedReadable = false;\n                  if (!state.reading) {\n                    nextTick(nReadingNextTick, this);\n                  } else if (state.length) {\n                    emitReadable(this, state);\n                  }\n                }\n              }\n\n              return res;\n            };\n            Readable.prototype.addListener = Readable.prototype.on;\n\n            function nReadingNextTick(self) {\n              debug('readable nexttick read 0');\n              self.read(0);\n            }\n\n            // pause() and resume() are remnants of the legacy readable stream API\n            // If the user uses them, then switch into old mode.\n            Readable.prototype.resume = function () {\n              var state = this._readableState;\n              if (!state.flowing) {\n                debug('resume');\n                state.flowing = true;\n                resume(this, state);\n              }\n              return this;\n            };\n\n            function resume(stream, state) {\n              if (!state.resumeScheduled) {\n                state.resumeScheduled = true;\n                nextTick(resume_, stream, state);\n              }\n            }\n\n            function resume_(stream, state) {\n              if (!state.reading) {\n                debug('resume read 0');\n                stream.read(0);\n              }\n\n              state.resumeScheduled = false;\n              state.awaitDrain = 0;\n              stream.emit('resume');\n              flow(stream);\n              if (state.flowing && !state.reading) stream.read(0);\n            }\n\n            Readable.prototype.pause = function () {\n              debug('call pause flowing=%j', this._readableState.flowing);\n              if (false !== this._readableState.flowing) {\n                debug('pause');\n                this._readableState.flowing = false;\n                this.emit('pause');\n              }\n              return this;\n            };\n\n            function flow(stream) {\n              var state = stream._readableState;\n              debug('flow', state.flowing);\n              while (state.flowing && stream.read() !== null) {}\n            }\n\n            // wrap an old-style stream as the async data source.\n            // This is *not* part of the readable stream interface.\n            // It is an ugly unfortunate mess of history.\n            Readable.prototype.wrap = function (stream) {\n              var state = this._readableState;\n              var paused = false;\n\n              var self = this;\n              stream.on('end', function () {\n                debug('wrapped end');\n                if (state.decoder && !state.ended) {\n                  var chunk = state.decoder.end();\n                  if (chunk && chunk.length) self.push(chunk);\n                }\n\n                self.push(null);\n              });\n\n              stream.on('data', function (chunk) {\n                debug('wrapped data');\n                if (state.decoder) chunk = state.decoder.write(chunk);\n\n                // don't skip over falsy values in objectMode\n                if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n                var ret = self.push(chunk);\n                if (!ret) {\n                  paused = true;\n                  stream.pause();\n                }\n              });\n\n              // proxy all the other methods.\n              // important when wrapping filters and duplexes.\n              for (var i in stream) {\n                if (this[i] === undefined && typeof stream[i] === 'function') {\n                  this[i] = function (method) {\n                    return function () {\n                      return stream[method].apply(stream, arguments);\n                    };\n                  }(i);\n                }\n              }\n\n              // proxy certain important events.\n              var events = ['error', 'close', 'destroy', 'pause', 'resume'];\n              forEach(events, function (ev) {\n                stream.on(ev, self.emit.bind(self, ev));\n              });\n\n              // when we try to consume some more bytes, simply unpause the\n              // underlying stream.\n              self._read = function (n) {\n                debug('wrapped _read', n);\n                if (paused) {\n                  paused = false;\n                  stream.resume();\n                }\n              };\n\n              return self;\n            };\n\n            // exposed for testing purposes only.\n            Readable._fromList = fromList;\n\n            // Pluck off n bytes from an array of buffers.\n            // Length is the combined lengths of all the buffers in the list.\n            // This function is designed to be inlinable, so please take care when making\n            // changes to the function body.\n            function fromList(n, state) {\n              // nothing buffered\n              if (state.length === 0) return null;\n\n              var ret;\n              if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n                // read it all, truncate the list\n                if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);\n                state.buffer.clear();\n              } else {\n                // read part of list\n                ret = fromListPartial(n, state.buffer, state.decoder);\n              }\n\n              return ret;\n            }\n\n            // Extracts only enough buffered data to satisfy the amount requested.\n            // This function is designed to be inlinable, so please take care when making\n            // changes to the function body.\n            function fromListPartial(n, list, hasStrings) {\n              var ret;\n              if (n < list.head.data.length) {\n                // slice is the same for buffers and strings\n                ret = list.head.data.slice(0, n);\n                list.head.data = list.head.data.slice(n);\n              } else if (n === list.head.data.length) {\n                // first chunk is a perfect match\n                ret = list.shift();\n              } else {\n                // result spans more than one buffer\n                ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);\n              }\n              return ret;\n            }\n\n            // Copies a specified amount of characters from the list of buffered data\n            // chunks.\n            // This function is designed to be inlinable, so please take care when making\n            // changes to the function body.\n            function copyFromBufferString(n, list) {\n              var p = list.head;\n              var c = 1;\n              var ret = p.data;\n              n -= ret.length;\n              while (p = p.next) {\n                var str = p.data;\n                var nb = n > str.length ? str.length : n;\n                if (nb === str.length) ret += str;else ret += str.slice(0, n);\n                n -= nb;\n                if (n === 0) {\n                  if (nb === str.length) {\n                    ++c;\n                    if (p.next) list.head = p.next;else list.head = list.tail = null;\n                  } else {\n                    list.head = p;\n                    p.data = str.slice(nb);\n                  }\n                  break;\n                }\n                ++c;\n              }\n              list.length -= c;\n              return ret;\n            }\n\n            // Copies a specified amount of bytes from the list of buffered data chunks.\n            // This function is designed to be inlinable, so please take care when making\n            // changes to the function body.\n            function copyFromBuffer(n, list) {\n              var ret = Buffer.allocUnsafe(n);\n              var p = list.head;\n              var c = 1;\n              p.data.copy(ret);\n              n -= p.data.length;\n              while (p = p.next) {\n                var buf = p.data;\n                var nb = n > buf.length ? buf.length : n;\n                buf.copy(ret, ret.length - n, 0, nb);\n                n -= nb;\n                if (n === 0) {\n                  if (nb === buf.length) {\n                    ++c;\n                    if (p.next) list.head = p.next;else list.head = list.tail = null;\n                  } else {\n                    list.head = p;\n                    p.data = buf.slice(nb);\n                  }\n                  break;\n                }\n                ++c;\n              }\n              list.length -= c;\n              return ret;\n            }\n\n            function endReadable(stream) {\n              var state = stream._readableState;\n\n              // If we get here before consuming all the bytes, then that is a\n              // bug in node.  Should never happen.\n              if (state.length > 0) throw new Error('\"endReadable()\" called on non-empty stream');\n\n              if (!state.endEmitted) {\n                state.ended = true;\n                nextTick(endReadableNT, state, stream);\n              }\n            }\n\n            function endReadableNT(state, stream) {\n              // Check that we didn't get one last unshift.\n              if (!state.endEmitted && state.length === 0) {\n                state.endEmitted = true;\n                stream.readable = false;\n                stream.emit('end');\n              }\n            }\n\n            function forEach(xs, f) {\n              for (var i = 0, l = xs.length; i < l; i++) {\n                f(xs[i], i);\n              }\n            }\n\n            function indexOf(xs, x) {\n              for (var i = 0, l = xs.length; i < l; i++) {\n                if (xs[i] === x) return i;\n              }\n              return -1;\n            }\n\n            // A bit simpler than readable streams.\n            Writable.WritableState = WritableState;\n            inherits$2(Writable, EventEmitter);\n\n            function nop() {}\n\n            function WriteReq(chunk, encoding, cb) {\n              this.chunk = chunk;\n              this.encoding = encoding;\n              this.callback = cb;\n              this.next = null;\n            }\n\n            function WritableState(options, stream) {\n              Object.defineProperty(this, 'buffer', {\n                get: deprecate(function () {\n                  return this.getBuffer();\n                }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')\n              });\n              options = options || {};\n\n              // object stream flag to indicate whether or not this stream\n              // contains buffers or objects.\n              this.objectMode = !!options.objectMode;\n\n              if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n              // the point at which write() starts returning false\n              // Note: 0 is a valid value, means that we always return false if\n              // the entire buffer is not flushed immediately on write()\n              var hwm = options.highWaterMark;\n              var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n              this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;\n\n              // cast to ints.\n              this.highWaterMark = ~ ~this.highWaterMark;\n\n              this.needDrain = false;\n              // at the start of calling end()\n              this.ending = false;\n              // when end() has been called, and returned\n              this.ended = false;\n              // when 'finish' is emitted\n              this.finished = false;\n\n              // should we decode strings into buffers before passing to _write?\n              // this is here so that some node-core streams can optimize string\n              // handling at a lower level.\n              var noDecode = options.decodeStrings === false;\n              this.decodeStrings = !noDecode;\n\n              // Crypto is kind of old and crusty.  Historically, its default string\n              // encoding is 'binary' so we have to make this configurable.\n              // Everything else in the universe uses 'utf8', though.\n              this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n              // not an actual buffer we keep track of, but a measurement\n              // of how much we're waiting to get pushed to some underlying\n              // socket or file.\n              this.length = 0;\n\n              // a flag to see when we're in the middle of a write.\n              this.writing = false;\n\n              // when true all writes will be buffered until .uncork() call\n              this.corked = 0;\n\n              // a flag to be able to tell if the onwrite cb is called immediately,\n              // or on a later tick.  We set this to true at first, because any\n              // actions that shouldn't happen until \"later\" should generally also\n              // not happen before the first write call.\n              this.sync = true;\n\n              // a flag to know if we're processing previously buffered items, which\n              // may call the _write() callback in the same tick, so that we don't\n              // end up in an overlapped onwrite situation.\n              this.bufferProcessing = false;\n\n              // the callback that's passed to _write(chunk,cb)\n              this.onwrite = function (er) {\n                onwrite(stream, er);\n              };\n\n              // the callback that the user supplies to write(chunk,encoding,cb)\n              this.writecb = null;\n\n              // the amount that is being written when _write is called.\n              this.writelen = 0;\n\n              this.bufferedRequest = null;\n              this.lastBufferedRequest = null;\n\n              // number of pending user-supplied write callbacks\n              // this must be 0 before 'finish' can be emitted\n              this.pendingcb = 0;\n\n              // emit prefinish if the only thing we're waiting for is _write cbs\n              // This is relevant for synchronous Transform streams\n              this.prefinished = false;\n\n              // True if the error was already emitted and should not be thrown again\n              this.errorEmitted = false;\n\n              // count buffered requests\n              this.bufferedRequestCount = 0;\n\n              // allocate the first CorkedRequest, there is always\n              // one allocated and free to use, and we maintain at most two\n              this.corkedRequestsFree = new CorkedRequest(this);\n            }\n\n            WritableState.prototype.getBuffer = function writableStateGetBuffer() {\n              var current = this.bufferedRequest;\n              var out = [];\n              while (current) {\n                out.push(current);\n                current = current.next;\n              }\n              return out;\n            };\n            function Writable(options) {\n\n              // Writable ctor is applied to Duplexes, though they're not\n              // instanceof Writable, they're instanceof Readable.\n              if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);\n\n              this._writableState = new WritableState(options, this);\n\n              // legacy.\n              this.writable = true;\n\n              if (options) {\n                if (typeof options.write === 'function') this._write = options.write;\n\n                if (typeof options.writev === 'function') this._writev = options.writev;\n              }\n\n              EventEmitter.call(this);\n            }\n\n            // Otherwise people can pipe Writable streams, which is just wrong.\n            Writable.prototype.pipe = function () {\n              this.emit('error', new Error('Cannot pipe, not readable'));\n            };\n\n            function writeAfterEnd(stream, cb) {\n              var er = new Error('write after end');\n              // TODO: defer error events consistently everywhere, not just the cb\n              stream.emit('error', er);\n              nextTick(cb, er);\n            }\n\n            // If we get something that is not a buffer, string, null, or undefined,\n            // and we're not in objectMode, then that's an error.\n            // Otherwise stream chunks are all considered to be of length=1, and the\n            // watermarks determine how many objects to keep in the buffer, rather than\n            // how many bytes or characters.\n            function validChunk(stream, state, chunk, cb) {\n              var valid = true;\n              var er = false;\n              // Always throw error if a null is written\n              // if we are not in object mode then throw\n              // if it is not a buffer, string, or undefined.\n              if (chunk === null) {\n                er = new TypeError('May not write null values to stream');\n              } else if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n                er = new TypeError('Invalid non-string/buffer chunk');\n              }\n              if (er) {\n                stream.emit('error', er);\n                nextTick(cb, er);\n                valid = false;\n              }\n              return valid;\n            }\n\n            Writable.prototype.write = function (chunk, encoding, cb) {\n              var state = this._writableState;\n              var ret = false;\n\n              if (typeof encoding === 'function') {\n                cb = encoding;\n                encoding = null;\n              }\n\n              if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n\n              if (typeof cb !== 'function') cb = nop;\n\n              if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {\n                state.pendingcb++;\n                ret = writeOrBuffer(this, state, chunk, encoding, cb);\n              }\n\n              return ret;\n            };\n\n            Writable.prototype.cork = function () {\n              var state = this._writableState;\n\n              state.corked++;\n            };\n\n            Writable.prototype.uncork = function () {\n              var state = this._writableState;\n\n              if (state.corked) {\n                state.corked--;\n\n                if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n              }\n            };\n\n            Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n              // node::ParseEncoding() requires lower case.\n              if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n              if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);\n              this._writableState.defaultEncoding = encoding;\n              return this;\n            };\n\n            function decodeChunk(state, chunk, encoding) {\n              if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n                chunk = Buffer.from(chunk, encoding);\n              }\n              return chunk;\n            }\n\n            // if we're already writing something, then just put this\n            // in the queue, and wait our turn.  Otherwise, call _write\n            // If we return false, then we need a drain event, so set that flag.\n            function writeOrBuffer(stream, state, chunk, encoding, cb) {\n              chunk = decodeChunk(state, chunk, encoding);\n\n              if (Buffer.isBuffer(chunk)) encoding = 'buffer';\n              var len = state.objectMode ? 1 : chunk.length;\n\n              state.length += len;\n\n              var ret = state.length < state.highWaterMark;\n              // we must ensure that previous needDrain will not be reset to false.\n              if (!ret) state.needDrain = true;\n\n              if (state.writing || state.corked) {\n                var last = state.lastBufferedRequest;\n                state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);\n                if (last) {\n                  last.next = state.lastBufferedRequest;\n                } else {\n                  state.bufferedRequest = state.lastBufferedRequest;\n                }\n                state.bufferedRequestCount += 1;\n              } else {\n                doWrite(stream, state, false, len, chunk, encoding, cb);\n              }\n\n              return ret;\n            }\n\n            function doWrite(stream, state, writev, len, chunk, encoding, cb) {\n              state.writelen = len;\n              state.writecb = cb;\n              state.writing = true;\n              state.sync = true;\n              if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n              state.sync = false;\n            }\n\n            function onwriteError(stream, state, sync, er, cb) {\n              --state.pendingcb;\n              if (sync) nextTick(cb, er);else cb(er);\n\n              stream._writableState.errorEmitted = true;\n              stream.emit('error', er);\n            }\n\n            function onwriteStateUpdate(state) {\n              state.writing = false;\n              state.writecb = null;\n              state.length -= state.writelen;\n              state.writelen = 0;\n            }\n\n            function onwrite(stream, er) {\n              var state = stream._writableState;\n              var sync = state.sync;\n              var cb = state.writecb;\n\n              onwriteStateUpdate(state);\n\n              if (er) onwriteError(stream, state, sync, er, cb);else {\n                // Check if we're actually ready to finish, but don't emit yet\n                var finished = needFinish(state);\n\n                if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n                  clearBuffer(stream, state);\n                }\n\n                if (sync) {\n                  /*<replacement>*/\n                    nextTick(afterWrite, stream, state, finished, cb);\n                  /*</replacement>*/\n                } else {\n                    afterWrite(stream, state, finished, cb);\n                  }\n              }\n            }\n\n            function afterWrite(stream, state, finished, cb) {\n              if (!finished) onwriteDrain(stream, state);\n              state.pendingcb--;\n              cb();\n              finishMaybe(stream, state);\n            }\n\n            // Must force callback to be called on nextTick, so that we don't\n            // emit 'drain' before the write() consumer gets the 'false' return\n            // value, and has a chance to attach a 'drain' listener.\n            function onwriteDrain(stream, state) {\n              if (state.length === 0 && state.needDrain) {\n                state.needDrain = false;\n                stream.emit('drain');\n              }\n            }\n\n            // if there's something in the buffer waiting, then process it\n            function clearBuffer(stream, state) {\n              state.bufferProcessing = true;\n              var entry = state.bufferedRequest;\n\n              if (stream._writev && entry && entry.next) {\n                // Fast case, write everything using _writev()\n                var l = state.bufferedRequestCount;\n                var buffer = new Array(l);\n                var holder = state.corkedRequestsFree;\n                holder.entry = entry;\n\n                var count = 0;\n                while (entry) {\n                  buffer[count] = entry;\n                  entry = entry.next;\n                  count += 1;\n                }\n\n                doWrite(stream, state, true, state.length, buffer, '', holder.finish);\n\n                // doWrite is almost always async, defer these to save a bit of time\n                // as the hot path ends with doWrite\n                state.pendingcb++;\n                state.lastBufferedRequest = null;\n                if (holder.next) {\n                  state.corkedRequestsFree = holder.next;\n                  holder.next = null;\n                } else {\n                  state.corkedRequestsFree = new CorkedRequest(state);\n                }\n              } else {\n                // Slow case, write chunks one-by-one\n                while (entry) {\n                  var chunk = entry.chunk;\n                  var encoding = entry.encoding;\n                  var cb = entry.callback;\n                  var len = state.objectMode ? 1 : chunk.length;\n\n                  doWrite(stream, state, false, len, chunk, encoding, cb);\n                  entry = entry.next;\n                  // if we didn't call the onwrite immediately, then\n                  // it means that we need to wait until it does.\n                  // also, that means that the chunk and cb are currently\n                  // being processed, so move the buffer counter past them.\n                  if (state.writing) {\n                    break;\n                  }\n                }\n\n                if (entry === null) state.lastBufferedRequest = null;\n              }\n\n              state.bufferedRequestCount = 0;\n              state.bufferedRequest = entry;\n              state.bufferProcessing = false;\n            }\n\n            Writable.prototype._write = function (chunk, encoding, cb) {\n              cb(new Error('not implemented'));\n            };\n\n            Writable.prototype._writev = null;\n\n            Writable.prototype.end = function (chunk, encoding, cb) {\n              var state = this._writableState;\n\n              if (typeof chunk === 'function') {\n                cb = chunk;\n                chunk = null;\n                encoding = null;\n              } else if (typeof encoding === 'function') {\n                cb = encoding;\n                encoding = null;\n              }\n\n              if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);\n\n              // .end() fully uncorks\n              if (state.corked) {\n                state.corked = 1;\n                this.uncork();\n              }\n\n              // ignore unnecessary end() calls.\n              if (!state.ending && !state.finished) endWritable(this, state, cb);\n            };\n\n            function needFinish(state) {\n              return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n            }\n\n            function prefinish(stream, state) {\n              if (!state.prefinished) {\n                state.prefinished = true;\n                stream.emit('prefinish');\n              }\n            }\n\n            function finishMaybe(stream, state) {\n              var need = needFinish(state);\n              if (need) {\n                if (state.pendingcb === 0) {\n                  prefinish(stream, state);\n                  state.finished = true;\n                  stream.emit('finish');\n                } else {\n                  prefinish(stream, state);\n                }\n              }\n              return need;\n            }\n\n            function endWritable(stream, state, cb) {\n              state.ending = true;\n              finishMaybe(stream, state);\n              if (cb) {\n                if (state.finished) nextTick(cb);else stream.once('finish', cb);\n              }\n              state.ended = true;\n              stream.writable = false;\n            }\n\n            // It seems a linked list but it is not\n            // there will be only 2 of these for each stream\n            function CorkedRequest(state) {\n              var _this = this;\n\n              this.next = null;\n              this.entry = null;\n\n              this.finish = function (err) {\n                var entry = _this.entry;\n                _this.entry = null;\n                while (entry) {\n                  var cb = entry.callback;\n                  state.pendingcb--;\n                  cb(err);\n                  entry = entry.next;\n                }\n                if (state.corkedRequestsFree) {\n                  state.corkedRequestsFree.next = _this;\n                } else {\n                  state.corkedRequestsFree = _this;\n                }\n              };\n            }\n\n            inherits$2(Duplex, Readable);\n\n            var keys = Object.keys(Writable.prototype);\n            for (var v = 0; v < keys.length; v++) {\n              var method = keys[v];\n              if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n            }\n            function Duplex(options) {\n              if (!(this instanceof Duplex)) return new Duplex(options);\n\n              Readable.call(this, options);\n              Writable.call(this, options);\n\n              if (options && options.readable === false) this.readable = false;\n\n              if (options && options.writable === false) this.writable = false;\n\n              this.allowHalfOpen = true;\n              if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;\n\n              this.once('end', onend);\n            }\n\n            // the no-half-open enforcer\n            function onend() {\n              // if we allow half-open state, or if the writable side ended,\n              // then we're ok.\n              if (this.allowHalfOpen || this._writableState.ended) return;\n\n              // no more data can be written.\n              // But allow more writes to happen in this tick.\n              nextTick(onEndNT, this);\n            }\n\n            function onEndNT(self) {\n              self.end();\n            }\n\n            // a transform stream is a readable/writable stream where you do\n            inherits$2(Transform, Duplex);\n\n            function TransformState(stream) {\n              this.afterTransform = function (er, data) {\n                return afterTransform(stream, er, data);\n              };\n\n              this.needTransform = false;\n              this.transforming = false;\n              this.writecb = null;\n              this.writechunk = null;\n              this.writeencoding = null;\n            }\n\n            function afterTransform(stream, er, data) {\n              var ts = stream._transformState;\n              ts.transforming = false;\n\n              var cb = ts.writecb;\n\n              if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));\n\n              ts.writechunk = null;\n              ts.writecb = null;\n\n              if (data !== null && data !== undefined) stream.push(data);\n\n              cb(er);\n\n              var rs = stream._readableState;\n              rs.reading = false;\n              if (rs.needReadable || rs.length < rs.highWaterMark) {\n                stream._read(rs.highWaterMark);\n              }\n            }\n            function Transform(options) {\n              if (!(this instanceof Transform)) return new Transform(options);\n\n              Duplex.call(this, options);\n\n              this._transformState = new TransformState(this);\n\n              // when the writable side finishes, then flush out anything remaining.\n              var stream = this;\n\n              // start out asking for a readable event once data is transformed.\n              this._readableState.needReadable = true;\n\n              // we have implemented the _read method, and done the other things\n              // that Readable wants before the first _read call, so unset the\n              // sync guard flag.\n              this._readableState.sync = false;\n\n              if (options) {\n                if (typeof options.transform === 'function') this._transform = options.transform;\n\n                if (typeof options.flush === 'function') this._flush = options.flush;\n              }\n\n              this.once('prefinish', function () {\n                if (typeof this._flush === 'function') this._flush(function (er) {\n                  done(stream, er);\n                });else done(stream);\n              });\n            }\n\n            Transform.prototype.push = function (chunk, encoding) {\n              this._transformState.needTransform = false;\n              return Duplex.prototype.push.call(this, chunk, encoding);\n            };\n\n            // This is the part where you do stuff!\n            // override this function in implementation classes.\n            // 'chunk' is an input chunk.\n            //\n            // Call `push(newChunk)` to pass along transformed output\n            // to the readable side.  You may call 'push' zero or more times.\n            //\n            // Call `cb(err)` when you are done with this chunk.  If you pass\n            // an error, then that'll put the hurt on the whole operation.  If you\n            // never call cb(), then you'll never get another chunk.\n            Transform.prototype._transform = function (chunk, encoding, cb) {\n              throw new Error('Not implemented');\n            };\n\n            Transform.prototype._write = function (chunk, encoding, cb) {\n              var ts = this._transformState;\n              ts.writecb = cb;\n              ts.writechunk = chunk;\n              ts.writeencoding = encoding;\n              if (!ts.transforming) {\n                var rs = this._readableState;\n                if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n              }\n            };\n\n            // Doesn't matter what the args are here.\n            // _transform does all the work.\n            // That we got here means that the readable side wants more data.\n            Transform.prototype._read = function (n) {\n              var ts = this._transformState;\n\n              if (ts.writechunk !== null && ts.writecb && !ts.transforming) {\n                ts.transforming = true;\n                this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n              } else {\n                // mark that we need a transform, so that any data that comes in\n                // will get processed, now that we've asked for it.\n                ts.needTransform = true;\n              }\n            };\n\n            function done(stream, er) {\n              if (er) return stream.emit('error', er);\n\n              // if there's nothing in the write buffer, then that means\n              // that nothing more will ever be provided\n              var ws = stream._writableState;\n              var ts = stream._transformState;\n\n              if (ws.length) throw new Error('Calling transform done when ws.length != 0');\n\n              if (ts.transforming) throw new Error('Calling transform done when still transforming');\n\n              return stream.push(null);\n            }\n\n            inherits$2(PassThrough, Transform);\n            function PassThrough(options) {\n              if (!(this instanceof PassThrough)) return new PassThrough(options);\n\n              Transform.call(this, options);\n            }\n\n            PassThrough.prototype._transform = function (chunk, encoding, cb) {\n              cb(null, chunk);\n            };\n\n            inherits$2(Stream, EventEmitter);\n            Stream.Readable = Readable;\n            Stream.Writable = Writable;\n            Stream.Duplex = Duplex;\n            Stream.Transform = Transform;\n            Stream.PassThrough = PassThrough;\n\n            // Backwards-compat with node 0.4.x\n            Stream.Stream = Stream;\n\n            // old-style streams.  Note that the pipe method (the only relevant\n            // part of this class) is overridden in the Readable class.\n\n            function Stream() {\n              EventEmitter.call(this);\n            }\n\n            Stream.prototype.pipe = function(dest, options) {\n              var source = this;\n\n              function ondata(chunk) {\n                if (dest.writable) {\n                  if (false === dest.write(chunk) && source.pause) {\n                    source.pause();\n                  }\n                }\n              }\n\n              source.on('data', ondata);\n\n              function ondrain() {\n                if (source.readable && source.resume) {\n                  source.resume();\n                }\n              }\n\n              dest.on('drain', ondrain);\n\n              // If the 'end' option is not supplied, dest.end() will be called when\n              // source gets the 'end' or 'close' events.  Only dest.end() once.\n              if (!dest._isStdio && (!options || options.end !== false)) {\n                source.on('end', onend);\n                source.on('close', onclose);\n              }\n\n              var didOnEnd = false;\n              function onend() {\n                if (didOnEnd) return;\n                didOnEnd = true;\n\n                dest.end();\n              }\n\n\n              function onclose() {\n                if (didOnEnd) return;\n                didOnEnd = true;\n\n                if (typeof dest.destroy === 'function') dest.destroy();\n              }\n\n              // don't leave dangling pipes when there are errors.\n              function onerror(er) {\n                cleanup();\n                if (EventEmitter.listenerCount(this, 'error') === 0) {\n                  throw er; // Unhandled stream error in pipe.\n                }\n              }\n\n              source.on('error', onerror);\n              dest.on('error', onerror);\n\n              // remove all the event listeners that were added.\n              function cleanup() {\n                source.removeListener('data', ondata);\n                dest.removeListener('drain', ondrain);\n\n                source.removeListener('end', onend);\n                source.removeListener('close', onclose);\n\n                source.removeListener('error', onerror);\n                dest.removeListener('error', onerror);\n\n                source.removeListener('end', cleanup);\n                source.removeListener('close', cleanup);\n\n                dest.removeListener('close', cleanup);\n              }\n\n              source.on('end', cleanup);\n              source.on('close', cleanup);\n\n              dest.on('close', cleanup);\n\n              dest.emit('pipe', source);\n\n              // Allow for unix-like usage: A.pipe(B).pipe(C)\n              return dest;\n            };\n\n            var stream = /*#__PURE__*/Object.freeze({\n                        default: Stream,\n                        Readable: Readable,\n                        Writable: Writable,\n                        Duplex: Duplex,\n                        Transform: Transform,\n                        PassThrough: PassThrough,\n                        Stream: Stream\n            });\n\n            /*global Buffer*/\n            // Named constants with unique integer values\n            var C = {};\n            // Tokens\n            var LEFT_BRACE    = C.LEFT_BRACE    = 0x1;\n            var RIGHT_BRACE   = C.RIGHT_BRACE   = 0x2;\n            var LEFT_BRACKET  = C.LEFT_BRACKET  = 0x3;\n            var RIGHT_BRACKET = C.RIGHT_BRACKET = 0x4;\n            var COLON         = C.COLON         = 0x5;\n            var COMMA         = C.COMMA         = 0x6;\n            var TRUE          = C.TRUE          = 0x7;\n            var FALSE         = C.FALSE         = 0x8;\n            var NULL          = C.NULL          = 0x9;\n            var STRING        = C.STRING        = 0xa;\n            var NUMBER        = C.NUMBER        = 0xb;\n            // Tokenizer States\n            var START   = C.START   = 0x11;\n            var STOP    = C.STOP    = 0x12;\n            var TRUE1   = C.TRUE1   = 0x21;\n            var TRUE2   = C.TRUE2   = 0x22;\n            var TRUE3   = C.TRUE3   = 0x23;\n            var FALSE1  = C.FALSE1  = 0x31;\n            var FALSE2  = C.FALSE2  = 0x32;\n            var FALSE3  = C.FALSE3  = 0x33;\n            var FALSE4  = C.FALSE4  = 0x34;\n            var NULL1   = C.NULL1   = 0x41;\n            var NULL2   = C.NULL2   = 0x42;\n            var NULL3   = C.NULL3   = 0x43;\n            var NUMBER1 = C.NUMBER1 = 0x51;\n            var NUMBER3 = C.NUMBER3 = 0x53;\n            var STRING1 = C.STRING1 = 0x61;\n            var STRING2 = C.STRING2 = 0x62;\n            var STRING3 = C.STRING3 = 0x63;\n            var STRING4 = C.STRING4 = 0x64;\n            var STRING5 = C.STRING5 = 0x65;\n            var STRING6 = C.STRING6 = 0x66;\n            // Parser States\n            var VALUE   = C.VALUE   = 0x71;\n            var KEY     = C.KEY     = 0x72;\n            // Parser Modes\n            var OBJECT  = C.OBJECT  = 0x81;\n            var ARRAY   = C.ARRAY   = 0x82;\n            // Character constants\n            var BACK_SLASH =      \"\\\\\".charCodeAt(0);\n            var FORWARD_SLASH =   \"\\/\".charCodeAt(0);\n            var BACKSPACE =       \"\\b\".charCodeAt(0);\n            var FORM_FEED =       \"\\f\".charCodeAt(0);\n            var NEWLINE =         \"\\n\".charCodeAt(0);\n            var CARRIAGE_RETURN = \"\\r\".charCodeAt(0);\n            var TAB =             \"\\t\".charCodeAt(0);\n\n            var STRING_BUFFER_SIZE = 64 * 1024;\n\n            function Parser() {\n              this.tState = START;\n              this.value = undefined;\n\n              this.string = undefined; // string data\n              this.stringBuffer = Buffer.alloc ? Buffer.alloc(STRING_BUFFER_SIZE) : new Buffer(STRING_BUFFER_SIZE);\n              this.stringBufferOffset = 0;\n              this.unicode = undefined; // unicode escapes\n              this.highSurrogate = undefined;\n\n              this.key = undefined;\n              this.mode = undefined;\n              this.stack = [];\n              this.state = VALUE;\n              this.bytes_remaining = 0; // number of bytes remaining in multi byte utf8 char to read after split boundary\n              this.bytes_in_sequence = 0; // bytes in multi byte utf8 char to read\n              this.temp_buffs = { \"2\": new Buffer(2), \"3\": new Buffer(3), \"4\": new Buffer(4) }; // for rebuilding chars split before boundary is reached\n\n              // Stream offset\n              this.offset = -1;\n            }\n\n            // Slow code to string converter (only used when throwing syntax errors)\n            Parser.toknam = function (code) {\n              var keys = Object.keys(C);\n              for (var i = 0, l = keys.length; i < l; i++) {\n                var key = keys[i];\n                if (C[key] === code) { return key; }\n              }\n              return code && (\"0x\" + code.toString(16));\n            };\n\n            var proto = Parser.prototype;\n            proto.onError = function (err) { throw err; };\n            proto.charError = function (buffer, i) {\n              this.tState = STOP;\n              this.onError(new Error(\"Unexpected \" + JSON.stringify(String.fromCharCode(buffer[i])) + \" at position \" + i + \" in state \" + Parser.toknam(this.tState)));\n            };\n            proto.appendStringChar = function (char) {\n              if (this.stringBufferOffset >= STRING_BUFFER_SIZE) {\n                this.string += this.stringBuffer.toString('utf8');\n                this.stringBufferOffset = 0;\n              }\n\n              this.stringBuffer[this.stringBufferOffset++] = char;\n            };\n            proto.appendStringBuf = function (buf, start, end) {\n              var size = buf.length;\n              if (typeof start === 'number') {\n                if (typeof end === 'number') {\n                  if (end < 0) {\n                    // adding a negative end decreeses the size\n                    size = buf.length - start + end;\n                  } else {\n                    size = end - start;\n                  }\n                } else {\n                  size = buf.length - start;\n                }\n              }\n\n              if (size < 0) {\n                size = 0;\n              }\n\n              if (this.stringBufferOffset + size > STRING_BUFFER_SIZE) {\n                this.string += this.stringBuffer.toString('utf8', 0, this.stringBufferOffset);\n                this.stringBufferOffset = 0;\n              }\n\n              buf.copy(this.stringBuffer, this.stringBufferOffset, start, end);\n              this.stringBufferOffset += size;\n            };\n            proto.write = function (buffer) {\n              if (typeof buffer === \"string\") buffer = new Buffer(buffer);\n              var n;\n              for (var i = 0, l = buffer.length; i < l; i++) {\n                if (this.tState === START){\n                  n = buffer[i];\n                  this.offset++;\n                  if(n === 0x7b){ this.onToken(LEFT_BRACE, \"{\"); // {\n                  }else if(n === 0x7d){ this.onToken(RIGHT_BRACE, \"}\"); // }\n                  }else if(n === 0x5b){ this.onToken(LEFT_BRACKET, \"[\"); // [\n                  }else if(n === 0x5d){ this.onToken(RIGHT_BRACKET, \"]\"); // ]\n                  }else if(n === 0x3a){ this.onToken(COLON, \":\");  // :\n                  }else if(n === 0x2c){ this.onToken(COMMA, \",\"); // ,\n                  }else if(n === 0x74){ this.tState = TRUE1;  // t\n                  }else if(n === 0x66){ this.tState = FALSE1;  // f\n                  }else if(n === 0x6e){ this.tState = NULL1; // n\n                  }else if(n === 0x22){ // \"\n                    this.string = \"\";\n                    this.stringBufferOffset = 0;\n                    this.tState = STRING1;\n                  }else if(n === 0x2d){ this.string = \"-\"; this.tState = NUMBER1; // -\n                  }else{\n                    if (n >= 0x30 && n < 0x40) { // 1-9\n                      this.string = String.fromCharCode(n); this.tState = NUMBER3;\n                    } else if (n === 0x20 || n === 0x09 || n === 0x0a || n === 0x0d) ; else {\n                      return this.charError(buffer, i);\n                    }\n                  }\n                }else if (this.tState === STRING1){ // After open quote\n                  n = buffer[i]; // get current byte from buffer\n                  // check for carry over of a multi byte char split between data chunks\n                  // & fill temp buffer it with start of this data chunk up to the boundary limit set in the last iteration\n                  if (this.bytes_remaining > 0) {\n                    for (var j = 0; j < this.bytes_remaining; j++) {\n                      this.temp_buffs[this.bytes_in_sequence][this.bytes_in_sequence - this.bytes_remaining + j] = buffer[j];\n                    }\n\n                    this.appendStringBuf(this.temp_buffs[this.bytes_in_sequence]);\n                    this.bytes_in_sequence = this.bytes_remaining = 0;\n                    i = i + j - 1;\n                  } else if (this.bytes_remaining === 0 && n >= 128) { // else if no remainder bytes carried over, parse multi byte (>=128) chars one at a time\n                    if (n <= 193 || n > 244) {\n                      return this.onError(new Error(\"Invalid UTF-8 character at position \" + i + \" in state \" + Parser.toknam(this.tState)));\n                    }\n                    if ((n >= 194) && (n <= 223)) this.bytes_in_sequence = 2;\n                    if ((n >= 224) && (n <= 239)) this.bytes_in_sequence = 3;\n                    if ((n >= 240) && (n <= 244)) this.bytes_in_sequence = 4;\n                    if ((this.bytes_in_sequence + i) > buffer.length) { // if bytes needed to complete char fall outside buffer length, we have a boundary split\n                      for (var k = 0; k <= (buffer.length - 1 - i); k++) {\n                        this.temp_buffs[this.bytes_in_sequence][k] = buffer[i + k]; // fill temp buffer of correct size with bytes available in this chunk\n                      }\n                      this.bytes_remaining = (i + this.bytes_in_sequence) - buffer.length;\n                      i = buffer.length - 1;\n                    } else {\n                      this.appendStringBuf(buffer, i, i + this.bytes_in_sequence);\n                      i = i + this.bytes_in_sequence - 1;\n                    }\n                  } else if (n === 0x22) {\n                    this.tState = START;\n                    this.string += this.stringBuffer.toString('utf8', 0, this.stringBufferOffset);\n                    this.stringBufferOffset = 0;\n                    this.onToken(STRING, this.string);\n                    this.offset += Buffer.byteLength(this.string, 'utf8') + 1;\n                    this.string = undefined;\n                  }\n                  else if (n === 0x5c) {\n                    this.tState = STRING2;\n                  }\n                  else if (n >= 0x20) { this.appendStringChar(n); }\n                  else {\n                      return this.charError(buffer, i);\n                  }\n                }else if (this.tState === STRING2){ // After backslash\n                  n = buffer[i];\n                  if(n === 0x22){ this.appendStringChar(n); this.tState = STRING1;\n                  }else if(n === 0x5c){ this.appendStringChar(BACK_SLASH); this.tState = STRING1;\n                  }else if(n === 0x2f){ this.appendStringChar(FORWARD_SLASH); this.tState = STRING1;\n                  }else if(n === 0x62){ this.appendStringChar(BACKSPACE); this.tState = STRING1;\n                  }else if(n === 0x66){ this.appendStringChar(FORM_FEED); this.tState = STRING1;\n                  }else if(n === 0x6e){ this.appendStringChar(NEWLINE); this.tState = STRING1;\n                  }else if(n === 0x72){ this.appendStringChar(CARRIAGE_RETURN); this.tState = STRING1;\n                  }else if(n === 0x74){ this.appendStringChar(TAB); this.tState = STRING1;\n                  }else if(n === 0x75){ this.unicode = \"\"; this.tState = STRING3;\n                  }else{\n                    return this.charError(buffer, i);\n                  }\n                }else if (this.tState === STRING3 || this.tState === STRING4 || this.tState === STRING5 || this.tState === STRING6){ // unicode hex codes\n                  n = buffer[i];\n                  // 0-9 A-F a-f\n                  if ((n >= 0x30 && n < 0x40) || (n > 0x40 && n <= 0x46) || (n > 0x60 && n <= 0x66)) {\n                    this.unicode += String.fromCharCode(n);\n                    if (this.tState++ === STRING6) {\n                      var intVal = parseInt(this.unicode, 16);\n                      this.unicode = undefined;\n                      if (this.highSurrogate !== undefined && intVal >= 0xDC00 && intVal < (0xDFFF + 1)) { //<56320,57343> - lowSurrogate\n                        this.appendStringBuf(new Buffer(String.fromCharCode(this.highSurrogate, intVal)));\n                        this.highSurrogate = undefined;\n                      } else if (this.highSurrogate === undefined && intVal >= 0xD800 && intVal < (0xDBFF + 1)) { //<55296,56319> - highSurrogate\n                        this.highSurrogate = intVal;\n                      } else {\n                        if (this.highSurrogate !== undefined) {\n                          this.appendStringBuf(new Buffer(String.fromCharCode(this.highSurrogate)));\n                          this.highSurrogate = undefined;\n                        }\n                        this.appendStringBuf(new Buffer(String.fromCharCode(intVal)));\n                      }\n                      this.tState = STRING1;\n                    }\n                  } else {\n                    return this.charError(buffer, i);\n                  }\n                } else if (this.tState === NUMBER1 || this.tState === NUMBER3) {\n                    n = buffer[i];\n\n                    switch (n) {\n                      case 0x30: // 0\n                      case 0x31: // 1\n                      case 0x32: // 2\n                      case 0x33: // 3\n                      case 0x34: // 4\n                      case 0x35: // 5\n                      case 0x36: // 6\n                      case 0x37: // 7\n                      case 0x38: // 8\n                      case 0x39: // 9\n                      case 0x2e: // .\n                      case 0x65: // e\n                      case 0x45: // E\n                      case 0x2b: // +\n                      case 0x2d: // -\n                        this.string += String.fromCharCode(n);\n                        this.tState = NUMBER3;\n                        break;\n                      default:\n                        this.tState = START;\n                        var result = Number(this.string);\n\n                        if (isNaN(result)){\n                          return this.charError(buffer, i);\n                        }\n\n                        if ((this.string.match(/[0-9]+/) == this.string) && (result.toString() != this.string)) {\n                          // Long string of digits which is an ID string and not valid and/or safe JavaScript integer Number\n                          this.onToken(STRING, this.string);\n                        } else {\n                          this.onToken(NUMBER, result);\n                        }\n\n                        this.offset += this.string.length - 1;\n                        this.string = undefined;\n                        i--;\n                        break;\n                    }\n                }else if (this.tState === TRUE1){ // r\n                  if (buffer[i] === 0x72) { this.tState = TRUE2; }\n                  else { return this.charError(buffer, i); }\n                }else if (this.tState === TRUE2){ // u\n                  if (buffer[i] === 0x75) { this.tState = TRUE3; }\n                  else { return this.charError(buffer, i); }\n                }else if (this.tState === TRUE3){ // e\n                  if (buffer[i] === 0x65) { this.tState = START; this.onToken(TRUE, true); this.offset+= 3; }\n                  else { return this.charError(buffer, i); }\n                }else if (this.tState === FALSE1){ // a\n                  if (buffer[i] === 0x61) { this.tState = FALSE2; }\n                  else { return this.charError(buffer, i); }\n                }else if (this.tState === FALSE2){ // l\n                  if (buffer[i] === 0x6c) { this.tState = FALSE3; }\n                  else { return this.charError(buffer, i); }\n                }else if (this.tState === FALSE3){ // s\n                  if (buffer[i] === 0x73) { this.tState = FALSE4; }\n                  else { return this.charError(buffer, i); }\n                }else if (this.tState === FALSE4){ // e\n                  if (buffer[i] === 0x65) { this.tState = START; this.onToken(FALSE, false); this.offset+= 4; }\n                  else { return this.charError(buffer, i); }\n                }else if (this.tState === NULL1){ // u\n                  if (buffer[i] === 0x75) { this.tState = NULL2; }\n                  else { return this.charError(buffer, i); }\n                }else if (this.tState === NULL2){ // l\n                  if (buffer[i] === 0x6c) { this.tState = NULL3; }\n                  else { return this.charError(buffer, i); }\n                }else if (this.tState === NULL3){ // l\n                  if (buffer[i] === 0x6c) { this.tState = START; this.onToken(NULL, null); this.offset += 3; }\n                  else { return this.charError(buffer, i); }\n                }\n              }\n            };\n            proto.onToken = function (token, value) {\n              // Override this to get events\n            };\n\n            proto.parseError = function (token, value) {\n              this.tState = STOP;\n              this.onError(new Error(\"Unexpected \" + Parser.toknam(token) + (value ? (\"(\" + JSON.stringify(value) + \")\") : \"\") + \" in state \" + Parser.toknam(this.state)));\n            };\n            proto.push = function () {\n              this.stack.push({value: this.value, key: this.key, mode: this.mode});\n            };\n            proto.pop = function () {\n              var value = this.value;\n              var parent = this.stack.pop();\n              this.value = parent.value;\n              this.key = parent.key;\n              this.mode = parent.mode;\n              this.emit(value);\n              if (!this.mode) { this.state = VALUE; }\n            };\n            proto.emit = function (value) {\n              if (this.mode) { this.state = COMMA; }\n              this.onValue(value);\n            };\n            proto.onValue = function (value) {\n              // Override me\n            };\n            proto.onToken = function (token, value) {\n              if(this.state === VALUE){\n                if(token === STRING || token === NUMBER || token === TRUE || token === FALSE || token === NULL){\n                  if (this.value) {\n                    this.value[this.key] = value;\n                  }\n                  this.emit(value);\n                }else if(token === LEFT_BRACE){\n                  this.push();\n                  if (this.value) {\n                    this.value = this.value[this.key] = {};\n                  } else {\n                    this.value = {};\n                  }\n                  this.key = undefined;\n                  this.state = KEY;\n                  this.mode = OBJECT;\n                }else if(token === LEFT_BRACKET){\n                  this.push();\n                  if (this.value) {\n                    this.value = this.value[this.key] = [];\n                  } else {\n                    this.value = [];\n                  }\n                  this.key = 0;\n                  this.mode = ARRAY;\n                  this.state = VALUE;\n                }else if(token === RIGHT_BRACE){\n                  if (this.mode === OBJECT) {\n                    this.pop();\n                  } else {\n                    return this.parseError(token, value);\n                  }\n                }else if(token === RIGHT_BRACKET){\n                  if (this.mode === ARRAY) {\n                    this.pop();\n                  } else {\n                    return this.parseError(token, value);\n                  }\n                }else{\n                  return this.parseError(token, value);\n                }\n              }else if(this.state === KEY){\n                if (token === STRING) {\n                  this.key = value;\n                  this.state = COLON;\n                } else if (token === RIGHT_BRACE) {\n                  this.pop();\n                } else {\n                  return this.parseError(token, value);\n                }\n              }else if(this.state === COLON){\n                if (token === COLON) { this.state = VALUE; }\n                else { return this.parseError(token, value); }\n              }else if(this.state === COMMA){\n                if (token === COMMA) {\n                  if (this.mode === ARRAY) { this.key++; this.state = VALUE; }\n                  else if (this.mode === OBJECT) { this.state = KEY; }\n\n                } else if (token === RIGHT_BRACKET && this.mode === ARRAY || token === RIGHT_BRACE && this.mode === OBJECT) {\n                  this.pop();\n                } else {\n                  return this.parseError(token, value);\n                }\n              }else{\n                return this.parseError(token, value);\n              }\n            };\n\n            Parser.C = C;\n\n            var jsonparse = Parser;\n\n            var require$$0 = ( stream && Stream ) || stream;\n\n            var Transform$1 = require$$0.Transform;\n\n            var JSON2CSVTransform = function (_Transform) {\n              inherits(JSON2CSVTransform, _Transform);\n\n              function JSON2CSVTransform(opts, transformOpts) {\n                classCallCheck(this, JSON2CSVTransform);\n\n                // Inherit methods from JSON2CSVBase since extends doesn't\n                // allow multiple inheritance and manually preprocess opts\n                var _this = possibleConstructorReturn(this, (JSON2CSVTransform.__proto__ || Object.getPrototypeOf(JSON2CSVTransform)).call(this, transformOpts));\n\n                Object.getOwnPropertyNames(JSON2CSVBase_1.prototype).forEach(function (key) {\n                  return _this[key] = JSON2CSVBase_1.prototype[key];\n                });\n                _this.opts = _this.preprocessOpts(opts);\n\n                _this._data = '';\n                _this._hasWritten = false;\n\n                if (_this.opts.ndjson) {\n                  _this.initNDJSONParse();\n                } else {\n                  _this.initJSONParser();\n                }\n\n                if (_this.opts.withBOM) {\n                  _this.push('\\uFEFF');\n                }\n\n                if (_this.opts.fields) {\n                  _this.pushHeader();\n                }\n\n                return _this;\n              }\n\n              /**\n               * Init the transform with a parser to process NDJSON data.\n               * It maintains a buffer of received data, parses each line\n               * as JSON and send it to `pushLine for processing.\n               */\n\n\n              createClass(JSON2CSVTransform, [{\n                key: 'initNDJSONParse',\n                value: function initNDJSONParse() {\n                  var transform = this;\n\n                  this.parser = {\n                    _data: '',\n                    write: function write(chunk) {\n                      this._data += chunk.toString();\n                      var lines = this._data.split('\\n').map(function (line) {\n                        return line.trim();\n                      }).filter(function (line) {\n                        return line !== '';\n                      });\n\n                      var pendingData = false;\n                      lines.forEach(function (line, i) {\n                        try {\n                          transform.pushLine(JSON.parse(line));\n                        } catch (e) {\n                          if (i === lines.length - 1) {\n                            pendingData = true;\n                          } else {\n                            e.message = 'Invalid JSON (' + line + ')';\n                            transform.emit('error', e);\n                          }\n                        }\n                      });\n                      this._data = pendingData ? this._data.slice(this._data.lastIndexOf('\\n')) : '';\n                    },\n                    getPendingData: function getPendingData() {\n                      return this._data;\n                    }\n                  };\n                }\n\n                /**\n                 * Init the transform with a parser to process JSON data.\n                 * It maintains a buffer of received data, parses each as JSON \n                 * item if the data is an array or the data itself otherwise\n                 * and send it to `pushLine` for processing.\n                 */\n\n              }, {\n                key: 'initJSONParser',\n                value: function initJSONParser() {\n                  var transform = this;\n                  this.parser = new jsonparse();\n                  this.parser.onValue = function (value) {\n                    if (this.stack.length !== this.depthToEmit) return;\n                    transform.pushLine(value);\n                  };\n\n                  this.parser._onToken = this.parser.onToken;\n\n                  this.parser.onToken = function (token, value) {\n                    transform.parser._onToken(token, value);\n\n                    if (this.stack.length === 0 && !transform.opts.fields && this.mode !== jsonparse.C.ARRAY && this.mode !== jsonparse.C.OBJECT) {\n                      this.onError(new Error('Data should not be empty or the \"fields\" option should be included'));\n                    }\n                    if (this.stack.length === 1) {\n                      if (this.depthToEmit === undefined) {\n                        // If Array emit its content, else emit itself\n                        this.depthToEmit = this.mode === jsonparse.C.ARRAY ? 1 : 0;\n                      }\n\n                      if (this.depthToEmit !== 0 && this.stack.length === 1) {\n                        // No need to store the whole root array in memory\n                        this.value = undefined;\n                      }\n                    }\n                  };\n\n                  this.parser.getPendingData = function () {\n                    return this.value;\n                  };\n\n                  this.parser.onError = function (err) {\n                    if (err.message.indexOf('Unexpected') > -1) {\n                      err.message = 'Invalid JSON (' + err.message + ')';\n                    }\n                    transform.emit('error', err);\n                  };\n                }\n\n                /**\n                 * Main function that send data to the parse to be processed.\n                 *\n                 * @param {Buffer} chunk Incoming data\n                 * @param {String} encoding Encoding of the incoming data. Defaults to 'utf8'\n                 * @param {Function} done Called when the proceesing of the supplied chunk is done\n                 */\n\n              }, {\n                key: '_transform',\n                value: function _transform(chunk, encoding, done) {\n                  this.parser.write(chunk);\n                  done();\n                }\n              }, {\n                key: '_flush',\n                value: function _flush(done) {\n                  if (this.parser.getPendingData()) {\n                    done(new Error('Invalid data received from stdin', this.parser.getPendingData()));\n                  }\n\n                  done();\n                }\n\n                /**\n                 * Generate the csv header and pushes it downstream.\n                 */\n\n              }, {\n                key: 'pushHeader',\n                value: function pushHeader() {\n                  if (this.opts.header) {\n                    var header = this.getHeader(this.opts);\n                    this.emit('header', header);\n                    this.push(header);\n                    this._hasWritten = true;\n                  }\n                }\n\n                /**\n                 * Transforms an incoming json data to csv and pushes it downstream.\n                 *\n                 * @param {Object} data JSON object to be converted in a CSV row\n                 */\n\n              }, {\n                key: 'pushLine',\n                value: function pushLine(data) {\n                  var _this2 = this;\n\n                  var processedData = this.preprocessRow(data);\n\n                  if (!this._hasWritten) {\n                    this.opts.fields = this.opts.fields || Object.keys(processedData[0]);\n                    this.pushHeader();\n                  }\n\n                  processedData.forEach(function (row) {\n                    var line = _this2.processRow(row, _this2.opts);\n                    if (line === undefined) return;\n                    var eoledLine = (_this2._hasWritten ? _this2.opts.eol : '') + line;\n                    _this2.emit('line', line);\n                    _this2.push(eoledLine);\n                    _this2._hasWritten = true;\n                  });\n                }\n              }]);\n              return JSON2CSVTransform;\n            }(Transform$1);\n\n            var JSON2CSVTransform_1 = JSON2CSVTransform;\n\n            var Parser$1 = JSON2CSVParser_1;\n            var Transform$2 = JSON2CSVTransform_1;\n\n            // Convenience method to keep the API similar to version 3.X\n            var parse = function parse(data, opts) {\n            \treturn new JSON2CSVParser_1(opts).parse(data);\n            };\n\n            var json2csv = {\n            \tParser: Parser$1,\n            \tTransform: Transform$2,\n            \tparse: parse\n            };\n\n            exports.default = json2csv;\n            exports.Parser = Parser$1;\n            exports.Transform = Transform$2;\n            exports.parse = parse;\n\n            Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./node_modules/json2csv/dist/json2csv.umd.js?");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n//# sourceURL=webpack:///./node_modules/process/browser.js?");

/***/ }),

/***/ "./node_modules/setimmediate/setImmediate.js":
/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/setimmediate/setImmediate.js?");

/***/ }),

/***/ "./node_modules/timers-browserify/main.js":
/*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\n__webpack_require__(/*! setimmediate */ \"./node_modules/setimmediate/setImmediate.js\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./node_modules/timers-browserify/main.js?");

/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/CsvDownload.vue?vue&type=template&id=ca751b76&":
/*!******************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./src/CsvDownload.vue?vue&type=template&id=ca751b76& ***!
  \******************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"staticRenderFns\", function() { return staticRenderFns; });\nvar render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"a\",\n    {\n      attrs: {\n        download: _vm.downloadName,\n        href: _vm.downloadUrl,\n        disabled: this.data.length === 0\n      }\n    },\n    [\n      _vm._t(\"default\", [\n        _c(\"i\", {\n          staticClass: \"fa fa-file-excel-o\",\n          attrs: { \"aria-hidden\": \"true\" }\n        })\n      ])\n    ],\n    2\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\n\n\n//# sourceURL=webpack:///./src/CsvDownload.vue?./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options");

/***/ }),

/***/ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js":
/*!********************************************************************!*\
  !*** ./node_modules/vue-loader/lib/runtime/componentNormalizer.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return normalizeComponent; });\n/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nfunction normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode /* vue-cli only */\n) {\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n\n\n//# sourceURL=webpack:///./node_modules/vue-loader/lib/runtime/componentNormalizer.js?");

/***/ }),

/***/ "./node_modules/vue/dist/vue.esm.js":
/*!******************************************!*\
  !*** ./node_modules/vue/dist/vue.esm.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global, setImmediate) {/*!\n * Vue.js v2.5.17\n * (c) 2014-2018 Evan You\n * Released under the MIT License.\n */\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n// these helpers produces better vm code in JS engines due to their\n// explicitness and function inlining\nfunction isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined && v !== null\n}\n\nfunction isTrue (v) {\n  return v === true\n}\n\nfunction isFalse (v) {\n  return v === false\n}\n\n/**\n * Check if value is primitive\n */\nfunction isPrimitive (value) {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    // $flow-disable-line\n    typeof value === 'symbol' ||\n    typeof value === 'boolean'\n  )\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\n/**\n * Get the raw type string of a value e.g. [object Object]\n */\nvar _toString = Object.prototype.toString;\n\nfunction toRawType (value) {\n  return _toString.call(value).slice(8, -1)\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === '[object Object]'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === '[object RegExp]'\n}\n\n/**\n * Check if val is a valid array index.\n */\nfunction isValidArrayIndex (val) {\n  var n = parseFloat(String(val));\n  return n >= 0 && Math.floor(n) === n && isFinite(val)\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? ''\n    : typeof val === 'object'\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert a input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Check if a attribute is a reserved attribute.\n */\nvar isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');\n\n/**\n * Remove an item from an array\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether the object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /\\B([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str.replace(hyphenateRE, '-$1').toLowerCase()\n});\n\n/**\n * Simple bind polyfill for environments that do not support it... e.g.\n * PhantomJS 1.x. Technically we don't need this anymore since native bind is\n * now more performant in most browsers, but removing it would be breaking for\n * code that was able to run in PhantomJS 1.x, so this must be kept for\n * backwards compatibility.\n */\n\n/* istanbul ignore next */\nfunction polyfillBind (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n\n  boundFn._length = fn.length;\n  return boundFn\n}\n\nfunction nativeBind (fn, ctx) {\n  return fn.bind(ctx)\n}\n\nvar bind = Function.prototype.bind\n  ? nativeBind\n  : polyfillBind;\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/**\n * Perform no operation.\n * Stubbing args to make Flow happy without leaving useless transpiled code\n * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/)\n */\nfunction noop (a, b, c) {}\n\n/**\n * Always return false.\n */\nvar no = function (a, b, c) { return false; };\n\n/**\n * Return same value\n */\nvar identity = function (_) { return _; };\n\n/**\n * Generate a static keys string from compiler modules.\n */\nfunction genStaticKeys (modules) {\n  return modules.reduce(function (keys, m) {\n    return keys.concat(m.staticKeys || [])\n  }, []).join(',')\n}\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  if (a === b) { return true }\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      var isArrayA = Array.isArray(a);\n      var isArrayB = Array.isArray(b);\n      if (isArrayA && isArrayB) {\n        return a.length === b.length && a.every(function (e, i) {\n          return looseEqual(e, b[i])\n        })\n      } else if (!isArrayA && !isArrayB) {\n        var keysA = Object.keys(a);\n        var keysB = Object.keys(b);\n        return keysA.length === keysB.length && keysA.every(function (key) {\n          return looseEqual(a[key], b[key])\n        })\n      } else {\n        /* istanbul ignore next */\n        return false\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      return false\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n\nvar SSR_ATTR = 'data-server-rendered';\n\nvar ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n];\n\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',\n  'created',\n  'beforeMount',\n  'mounted',\n  'beforeUpdate',\n  'updated',\n  'beforeDestroy',\n  'destroyed',\n  'activated',\n  'deactivated',\n  'errorCaptured'\n];\n\n/*  */\n\nvar config = ({\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  // $flow-disable-line\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: \"development\" !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: \"development\" !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Warn handler for watcher warns\n   */\n  warnHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  // $flow-disable-line\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n})\n\n/*  */\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = /[^\\w.$]/;\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) { return }\n      obj = obj[segments[i]];\n    }\n    return obj\n  }\n}\n\n/*  */\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;\nvar weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');\nvar isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\n\n// Firefox has a \"watch\" function on Object.prototype...\nvar nativeWatch = ({}).watch;\n\nvar supportsPassive = false;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', ({\n      get: function get () {\n        /* istanbul ignore next */\n        supportsPassive = true;\n      }\n    })); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && !inWeex && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n}\n\nvar hasSymbol =\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\nvar _Set;\n/* istanbul ignore if */ // $flow-disable-line\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = (function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar generateComponentTrace = (noop); // work around flow check\nvar formatComponentName = (noop);\n\nif (true) {\n  var hasConsole = typeof console !== 'undefined';\n  var classifyRE = /(?:^|[-_])(\\w)/g;\n  var classify = function (str) { return str\n    .replace(classifyRE, function (c) { return c.toUpperCase(); })\n    .replace(/[-_]/g, ''); };\n\n  warn = function (msg, vm) {\n    var trace = vm ? generateComponentTrace(vm) : '';\n\n    if (config.warnHandler) {\n      config.warnHandler.call(null, msg, vm, trace);\n    } else if (hasConsole && (!config.silent)) {\n      console.error((\"[Vue warn]: \" + msg + trace));\n    }\n  };\n\n  tip = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.warn(\"[Vue tip]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  formatComponentName = function (vm, includeFile) {\n    if (vm.$root === vm) {\n      return '<Root>'\n    }\n    var options = typeof vm === 'function' && vm.cid != null\n      ? vm.options\n      : vm._isVue\n        ? vm.$options || vm.constructor.options\n        : vm || {};\n    var name = options.name || options._componentTag;\n    var file = options.__file;\n    if (!name && file) {\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\n      name = match && match[1];\n    }\n\n    return (\n      (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\n      (file && includeFile !== false ? (\" at \" + file) : '')\n    )\n  };\n\n  var repeat = function (str, n) {\n    var res = '';\n    while (n) {\n      if (n % 2 === 1) { res += str; }\n      if (n > 1) { str += str; }\n      n >>= 1;\n    }\n    return res\n  };\n\n  generateComponentTrace = function (vm) {\n    if (vm._isVue && vm.$parent) {\n      var tree = [];\n      var currentRecursiveSequence = 0;\n      while (vm) {\n        if (tree.length > 0) {\n          var last = tree[tree.length - 1];\n          if (last.constructor === vm.constructor) {\n            currentRecursiveSequence++;\n            vm = vm.$parent;\n            continue\n          } else if (currentRecursiveSequence > 0) {\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\n            currentRecursiveSequence = 0;\n          }\n        }\n        tree.push(vm);\n        vm = vm.$parent;\n      }\n      return '\\n\\nfound in\\n\\n' + tree\n        .map(function (vm, i) { return (\"\" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)\n            ? ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\n            : formatComponentName(vm))); })\n        .join('\\n')\n    } else {\n      return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\n    }\n  };\n}\n\n/*  */\n\n\nvar uid = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  this.id = uid++;\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.target) {\n    Dep.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// the current target watcher being evaluated.\n// this is globally unique because there could be only one\n// watcher being evaluated at any time.\nDep.target = null;\nvar targetStack = [];\n\nfunction pushTarget (_target) {\n  if (Dep.target) { targetStack.push(Dep.target); }\n  Dep.target = _target;\n}\n\nfunction popTarget () {\n  Dep.target = targetStack.pop();\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions,\n  asyncFactory\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.fnContext = undefined;\n  this.fnOptions = undefined;\n  this.fnScopeId = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n  this.asyncFactory = asyncFactory;\n  this.asyncMeta = undefined;\n  this.isAsyncPlaceholder = false;\n};\n\nvar prototypeAccessors = { child: { configurable: true } };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function (text) {\n  if ( text === void 0 ) text = '';\n\n  var node = new VNode();\n  node.text = text;\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode) {\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    vnode.children,\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions,\n    vnode.asyncFactory\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.fnContext = vnode.fnContext;\n  cloned.fnOptions = vnode.fnOptions;\n  cloned.fnScopeId = vnode.fnScopeId;\n  cloned.isCloned = true;\n  return cloned\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);\n\nvar methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n];\n\n/**\n * Intercept mutating methods and emit events\n */\nmethodsToPatch.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * In some cases we may want to disable observation inside a component's\n * update computation.\n */\nvar shouldObserve = true;\n\nfunction toggleObserving (value) {\n  shouldObserve = value;\n}\n\n/**\n * Observer class that is attached to each observed\n * object. Once attached, the observer converts the target\n * object's property keys into getter/setters that\n * collect dependencies and dispatch updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    var augment = hasProto\n      ? protoAugment\n      : copyAugment;\n    augment(value, arrayMethods, arrayKeys);\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through each property and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive(obj, keys[i]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment an target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src, keys) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment an target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value) || value instanceof VNode) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    shouldObserve &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive (\n  obj,\n  key,\n  val,\n  customSetter,\n  shallow\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  if (!getter && arguments.length === 2) {\n    val = obj[key];\n  }\n  var setter = property && property.set;\n\n  var childOb = !shallow && observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.target) {\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n          if (Array.isArray(value)) {\n            dependArray(value);\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if (\"development\" !== 'production' && customSetter) {\n        customSetter();\n      }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = !shallow && observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set (target, key, val) {\n  if (\"development\" !== 'production' &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot set reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (key in target && !(key in Object.prototype)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    \"development\" !== 'production' && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (target, key) {\n  if (\"development\" !== 'production' &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot delete reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.splice(key, 1);\n    return\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    \"development\" !== 'production' && warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    );\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (true) {\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n        'creation with the `new` keyword.'\n      );\n    }\n    return defaultStrat(parent, child)\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n  var keys = Object.keys(from);\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nfunction mergeDataOrFn (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        typeof childVal === 'function' ? childVal.call(this, this) : childVal,\n        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal\n      )\n    }\n  } else {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm, vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm, vm)\n        : parentVal;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n}\n\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    if (childVal && typeof childVal !== 'function') {\n      \"development\" !== 'production' && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      );\n\n      return parentVal\n    }\n    return mergeDataOrFn(parentVal, childVal)\n  }\n\n  return mergeDataOrFn(parentVal, childVal, vm)\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  return childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  var res = Object.create(parentVal || null);\n  if (childVal) {\n    \"development\" !== 'production' && assertObjectType(key, childVal, vm);\n    return extend(res, childVal)\n  } else {\n    return res\n  }\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  // work around Firefox's Object.prototype.watch...\n  if (parentVal === nativeWatch) { parentVal = undefined; }\n  if (childVal === nativeWatch) { childVal = undefined; }\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (true) {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key$1 in childVal) {\n    var parent = ret[key$1];\n    var child = childVal[key$1];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key$1] = parent\n      ? parent.concat(child)\n      : Array.isArray(child) ? child : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.inject =\nstrats.computed = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  if (childVal && \"development\" !== 'production') {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  if (childVal) { extend(ret, childVal); }\n  return ret\n};\nstrats.provide = mergeDataOrFn;\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    validateComponentName(key);\n  }\n}\n\nfunction validateComponentName (name) {\n  if (!/^[a-zA-Z][\\w-]*$/.test(name)) {\n    warn(\n      'Invalid component name: \"' + name + '\". Component names ' +\n      'can only contain alphanumeric characters and the hyphen, ' +\n      'and must start with a letter.'\n    );\n  }\n  if (isBuiltInTag(name) || config.isReservedTag(name)) {\n    warn(\n      'Do not use built-in or reserved HTML elements as component ' +\n      'id: ' + name\n    );\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options, vm) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (true) {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  } else if (true) {\n    warn(\n      \"Invalid value for option \\\"props\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(props)) + \".\",\n      vm\n    );\n  }\n  options.props = res;\n}\n\n/**\n * Normalize all injections into Object-based format\n */\nfunction normalizeInject (options, vm) {\n  var inject = options.inject;\n  if (!inject) { return }\n  var normalized = options.inject = {};\n  if (Array.isArray(inject)) {\n    for (var i = 0; i < inject.length; i++) {\n      normalized[inject[i]] = { from: inject[i] };\n    }\n  } else if (isPlainObject(inject)) {\n    for (var key in inject) {\n      var val = inject[key];\n      normalized[key] = isPlainObject(val)\n        ? extend({ from: key }, val)\n        : { from: val };\n    }\n  } else if (true) {\n    warn(\n      \"Invalid value for option \\\"inject\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(inject)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def = dirs[key];\n      if (typeof def === 'function') {\n        dirs[key] = { bind: def, update: def };\n      }\n    }\n  }\n}\n\nfunction assertObjectType (name, value, vm) {\n  if (!isPlainObject(value)) {\n    warn(\n      \"Invalid value for option \\\"\" + name + \"\\\": expected an Object, \" +\n      \"but got \" + (toRawType(value)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  if (true) {\n    checkComponents(child);\n  }\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child, vm);\n  normalizeInject(child, vm);\n  normalizeDirectives(child);\n  var extendsFrom = child.extends;\n  if (extendsFrom) {\n    parent = mergeOptions(parent, extendsFrom, vm);\n  }\n  if (child.mixins) {\n    for (var i = 0, l = child.mixins.length; i < l; i++) {\n      parent = mergeOptions(parent, child.mixins[i], vm);\n    }\n  }\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if (\"development\" !== 'production' && warnMissing && !res) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    );\n  }\n  return res\n}\n\n/*  */\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // boolean casting\n  var booleanIndex = getTypeIndex(Boolean, prop.type);\n  if (booleanIndex > -1) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (value === '' || value === hyphenate(key)) {\n      // only cast empty string / same name to boolean if\n      // boolean has higher priority\n      var stringIndex = getTypeIndex(String, prop.type);\n      if (stringIndex < 0 || booleanIndex < stringIndex) {\n        value = true;\n      }\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldObserve = shouldObserve;\n    toggleObserving(true);\n    observe(value);\n    toggleObserving(prevShouldObserve);\n  }\n  if (\n    true\n  ) {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if (\"development\" !== 'production' && isObject(def)) {\n    warn(\n      'Invalid default value for prop \"' + key + '\": ' +\n      'Props with type Object/Array must use a factory function ' +\n      'to return the default value.',\n      vm\n    );\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm._props[key] !== undefined\n  ) {\n    return vm._props[key]\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n  if (!valid) {\n    warn(\n      \"Invalid prop: type check failed for prop \\\"\" + name + \"\\\".\" +\n      \" Expected \" + (expectedTypes.map(capitalize).join(', ')) +\n      \", got \" + (toRawType(value)) + \".\",\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    var t = typeof value;\n    valid = t === expectedType.toLowerCase();\n    // for primitive wrapper objects\n    if (!valid && t === 'object') {\n      valid = value instanceof type;\n    }\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : ''\n}\n\nfunction isSameType (a, b) {\n  return getType(a) === getType(b)\n}\n\nfunction getTypeIndex (type, expectedTypes) {\n  if (!Array.isArray(expectedTypes)) {\n    return isSameType(expectedTypes, type) ? 0 : -1\n  }\n  for (var i = 0, len = expectedTypes.length; i < len; i++) {\n    if (isSameType(expectedTypes[i], type)) {\n      return i\n    }\n  }\n  return -1\n}\n\n/*  */\n\nfunction handleError (err, vm, info) {\n  if (vm) {\n    var cur = vm;\n    while ((cur = cur.$parent)) {\n      var hooks = cur.$options.errorCaptured;\n      if (hooks) {\n        for (var i = 0; i < hooks.length; i++) {\n          try {\n            var capture = hooks[i].call(cur, err, vm, info) === false;\n            if (capture) { return }\n          } catch (e) {\n            globalHandleError(e, cur, 'errorCaptured hook');\n          }\n        }\n      }\n    }\n  }\n  globalHandleError(err, vm, info);\n}\n\nfunction globalHandleError (err, vm, info) {\n  if (config.errorHandler) {\n    try {\n      return config.errorHandler.call(null, err, vm, info)\n    } catch (e) {\n      logError(e, null, 'config.errorHandler');\n    }\n  }\n  logError(err, vm, info);\n}\n\nfunction logError (err, vm, info) {\n  if (true) {\n    warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\n  }\n  /* istanbul ignore else */\n  if ((inBrowser || inWeex) && typeof console !== 'undefined') {\n    console.error(err);\n  } else {\n    throw err\n  }\n}\n\n/*  */\n/* globals MessageChannel */\n\nvar callbacks = [];\nvar pending = false;\n\nfunction flushCallbacks () {\n  pending = false;\n  var copies = callbacks.slice(0);\n  callbacks.length = 0;\n  for (var i = 0; i < copies.length; i++) {\n    copies[i]();\n  }\n}\n\n// Here we have async deferring wrappers using both microtasks and (macro) tasks.\n// In < 2.4 we used microtasks everywhere, but there are some scenarios where\n// microtasks have too high a priority and fire in between supposedly\n// sequential events (e.g. #4521, #6690) or even between bubbling of the same\n// event (#6566). However, using (macro) tasks everywhere also has subtle problems\n// when state is changed right before repaint (e.g. #6813, out-in transitions).\n// Here we use microtask by default, but expose a way to force (macro) task when\n// needed (e.g. in event handlers attached by v-on).\nvar microTimerFunc;\nvar macroTimerFunc;\nvar useMacroTask = false;\n\n// Determine (macro) task defer implementation.\n// Technically setImmediate should be the ideal choice, but it's only available\n// in IE. The only polyfill that consistently queues the callback after all DOM\n// events triggered in the same loop is by using MessageChannel.\n/* istanbul ignore if */\nif (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  macroTimerFunc = function () {\n    setImmediate(flushCallbacks);\n  };\n} else if (typeof MessageChannel !== 'undefined' && (\n  isNative(MessageChannel) ||\n  // PhantomJS\n  MessageChannel.toString() === '[object MessageChannelConstructor]'\n)) {\n  var channel = new MessageChannel();\n  var port = channel.port2;\n  channel.port1.onmessage = flushCallbacks;\n  macroTimerFunc = function () {\n    port.postMessage(1);\n  };\n} else {\n  /* istanbul ignore next */\n  macroTimerFunc = function () {\n    setTimeout(flushCallbacks, 0);\n  };\n}\n\n// Determine microtask defer implementation.\n/* istanbul ignore next, $flow-disable-line */\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  var p = Promise.resolve();\n  microTimerFunc = function () {\n    p.then(flushCallbacks);\n    // in problematic UIWebViews, Promise.then doesn't completely break, but\n    // it can get stuck in a weird state where callbacks are pushed into the\n    // microtask queue but the queue isn't being flushed, until the browser\n    // needs to do some other work, e.g. handle a timer. Therefore we can\n    // \"force\" the microtask queue to be flushed by adding an empty timer.\n    if (isIOS) { setTimeout(noop); }\n  };\n} else {\n  // fallback to macro\n  microTimerFunc = macroTimerFunc;\n}\n\n/**\n * Wrap a function so that if any code inside triggers state change,\n * the changes are queued using a (macro) task instead of a microtask.\n */\nfunction withMacroTask (fn) {\n  return fn._withTask || (fn._withTask = function () {\n    useMacroTask = true;\n    var res = fn.apply(null, arguments);\n    useMacroTask = false;\n    return res\n  })\n}\n\nfunction nextTick (cb, ctx) {\n  var _resolve;\n  callbacks.push(function () {\n    if (cb) {\n      try {\n        cb.call(ctx);\n      } catch (e) {\n        handleError(e, ctx, 'nextTick');\n      }\n    } else if (_resolve) {\n      _resolve(ctx);\n    }\n  });\n  if (!pending) {\n    pending = true;\n    if (useMacroTask) {\n      macroTimerFunc();\n    } else {\n      microTimerFunc();\n    }\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(function (resolve) {\n      _resolve = resolve;\n    })\n  }\n}\n\n/*  */\n\nvar mark;\nvar measure;\n\nif (true) {\n  var perf = inBrowser && window.performance;\n  /* istanbul ignore if */\n  if (\n    perf &&\n    perf.mark &&\n    perf.measure &&\n    perf.clearMarks &&\n    perf.clearMeasures\n  ) {\n    mark = function (tag) { return perf.mark(tag); };\n    measure = function (name, startTag, endTag) {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n      perf.clearMeasures(name);\n    };\n  }\n}\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (true) {\n  var allowedGlobals = makeMap(\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n    'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function (target, key) {\n    warn(\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n      'referenced during render. Make sure that this property is reactive, ' +\n      'either in the data option, or for class-based components, by ' +\n      'initializing the property. ' +\n      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',\n      target\n    );\n  };\n\n  var hasProxy =\n    typeof Proxy !== 'undefined' && isNative(Proxy);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n          return false\n        } else {\n          target[key] = value;\n          return true\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has (target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';\n      if (!has && !isAllowed) {\n        warnNonPresent(target, key);\n      }\n      return has || !isAllowed\n    }\n  };\n\n  var getHandler = {\n    get: function get (target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        warnNonPresent(target, key);\n      }\n      return target[key]\n    }\n  };\n\n  initProxy = function initProxy (vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped\n        ? getHandler\n        : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\n/*  */\n\nvar seenObjects = new _Set();\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nfunction traverse (val) {\n  _traverse(val, seenObjects);\n  seenObjects.clear();\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  }\n});\n\nfunction createFnInvoker (fns) {\n  function invoker () {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      var cloned = fns.slice();\n      for (var i = 0; i < cloned.length; i++) {\n        cloned[i].apply(null, arguments$1);\n      }\n    } else {\n      // return handler return value for single handlers\n      return fns.apply(null, arguments)\n    }\n  }\n  invoker.fns = fns;\n  return invoker\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  vm\n) {\n  var name, def, cur, old, event;\n  for (name in on) {\n    def = cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    /* istanbul ignore if */\n    if (isUndef(cur)) {\n      \"development\" !== 'production' && warn(\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur);\n      }\n      add(event.name, cur, event.once, event.capture, event.passive, event.params);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\nfunction mergeVNodeHook (def, hookKey, hook) {\n  if (def instanceof VNode) {\n    def = def.data.hook || (def.data.hook = {});\n  }\n  var invoker;\n  var oldHook = def[hookKey];\n\n  function wrappedHook () {\n    hook.apply(this, arguments);\n    // important: remove merged hook to ensure it's called only once\n    // and prevent memory leak\n    remove(invoker.fns, wrappedHook);\n  }\n\n  if (isUndef(oldHook)) {\n    // no existing hook\n    invoker = createFnInvoker([wrappedHook]);\n  } else {\n    /* istanbul ignore if */\n    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {\n      // already a merged invoker\n      invoker = oldHook;\n      invoker.fns.push(wrappedHook);\n    } else {\n      // existing plain hook\n      invoker = createFnInvoker([oldHook, wrappedHook]);\n    }\n  }\n\n  invoker.merged = true;\n  def[hookKey] = invoker;\n}\n\n/*  */\n\nfunction extractPropsFromVNodeData (\n  data,\n  Ctor,\n  tag\n) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    return\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      if (true) {\n        var keyInLowerCase = key.toLowerCase();\n        if (\n          key !== keyInLowerCase &&\n          attrs && hasOwn(attrs, keyInLowerCase)\n        ) {\n          tip(\n            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\n            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\n            \" \\\"\" + key + \"\\\". \" +\n            \"Note that HTML attributes are case-insensitive and camelCased \" +\n            \"props need to use their kebab-case equivalents when using in-DOM \" +\n            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\n          );\n        }\n      }\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  return res\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction isTextNode (node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, lastIndex, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') { continue }\n    lastIndex = res.length - 1;\n    last = res[lastIndex];\n    //  nested\n    if (Array.isArray(c)) {\n      if (c.length > 0) {\n        c = normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i));\n        // merge adjacent text nodes\n        if (isTextNode(c[0]) && isTextNode(last)) {\n          res[lastIndex] = createTextVNode(last.text + (c[0]).text);\n          c.shift();\n        }\n        res.push.apply(res, c);\n      }\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        res[lastIndex] = createTextVNode(last.text + c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[lastIndex] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) &&\n          isDef(c.tag) &&\n          isUndef(c.key) &&\n          isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction ensureCtor (comp, base) {\n  if (\n    comp.__esModule ||\n    (hasSymbol && comp[Symbol.toStringTag] === 'Module')\n  ) {\n    comp = comp.default;\n  }\n  return isObject(comp)\n    ? base.extend(comp)\n    : comp\n}\n\nfunction createAsyncPlaceholder (\n  factory,\n  data,\n  context,\n  children,\n  tag\n) {\n  var node = createEmptyVNode();\n  node.asyncFactory = factory;\n  node.asyncMeta = { data: data, context: context, children: children, tag: tag };\n  return node\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor,\n  context\n) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp\n  }\n\n  if (isDef(factory.contexts)) {\n    // already pending\n    factory.contexts.push(context);\n  } else {\n    var contexts = factory.contexts = [context];\n    var sync = true;\n\n    var forceRender = function () {\n      for (var i = 0, l = contexts.length; i < l; i++) {\n        contexts[i].$forceUpdate();\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender();\n      }\n    });\n\n    var reject = once(function (reason) {\n      \"development\" !== 'production' && warn(\n        \"Failed to resolve async component: \" + (String(factory)) +\n        (reason ? (\"\\nReason: \" + reason) : '')\n      );\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender();\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (typeof res.then === 'function') {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isDef(res.component) && typeof res.component.then === 'function') {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            setTimeout(function () {\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender();\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          setTimeout(function () {\n            if (isUndef(factory.resolved)) {\n              reject(\n                 true\n                  ? (\"timeout (\" + (res.timeout) + \"ms)\")\n                  : undefined\n              );\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading\n      ? factory.loadingComp\n      : factory.resolved\n  }\n}\n\n/*  */\n\nfunction isAsyncPlaceholder (node) {\n  return node.isComment && node.asyncFactory\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\n        return c\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add (event, fn, once) {\n  if (once) {\n    target.$once(event, fn);\n  } else {\n    target.$on(event, fn);\n  }\n}\n\nfunction remove$1 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, vm);\n  target = undefined;\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var this$1 = this;\n\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        this$1.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var this$1 = this;\n\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        this$1.$off(event[i], fn);\n      }\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (!fn) {\n      vm._events[event] = null;\n      return vm\n    }\n    if (fn) {\n      // specific handler\n      var cb;\n      var i$1 = cbs.length;\n      while (i$1--) {\n        cb = cbs[i$1];\n        if (cb === fn || cb.fn === fn) {\n          cbs.splice(i$1, 1);\n          break\n        }\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    if (true) {\n      var lowerCaseEvent = event.toLowerCase();\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n        tip(\n          \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n          (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n          \"Note that HTML attributes are case-insensitive and you cannot use \" +\n          \"v-on to listen to camelCase events when using in-DOM templates. \" +\n          \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n        );\n      }\n    }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        try {\n          cbs[i].apply(vm, args);\n        } catch (e) {\n          handleError(e, vm, (\"event handler for \\\"\" + event + \"\\\"\"));\n        }\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\n\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots (\n  children,\n  context\n) {\n  var slots = {};\n  if (!children) {\n    return slots\n  }\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    var data = child.data;\n    // remove slot attribute if the node is resolved as a Vue slot node\n    if (data && data.attrs && data.attrs.slot) {\n      delete data.attrs.slot;\n    }\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.fnContext === context) &&\n      data && data.slot != null\n    ) {\n      var name = data.slot;\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children || []);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      (slots.default || (slots.default = [])).push(child);\n    }\n  }\n  // ignore slots that contains only whitespace\n  for (var name$1 in slots) {\n    if (slots[name$1].every(isWhitespace)) {\n      delete slots[name$1];\n    }\n  }\n  return slots\n}\n\nfunction isWhitespace (node) {\n  return (node.isComment && !node.asyncFactory) || node.text === ' '\n}\n\nfunction resolveScopedSlots (\n  fns, // see flow/vnode\n  res\n) {\n  res = res || {};\n  for (var i = 0; i < fns.length; i++) {\n    if (Array.isArray(fns[i])) {\n      resolveScopedSlots(fns[i], res);\n    } else {\n      res[fns[i].key] = fns[i].fn;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar activeInstance = null;\nvar isUpdatingChildComponent = false;\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    if (vm._isMounted) {\n      callHook(vm, 'beforeUpdate');\n    }\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var prevActiveInstance = activeInstance;\n    activeInstance = vm;\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(\n        vm.$el, vnode, hydrating, false /* removeOnly */,\n        vm.$options._parentElm,\n        vm.$options._refElm\n      );\n      // no need for the ref nodes after initial patch\n      // this prevents keeping a detached DOM tree in memory (#5851)\n      vm.$options._parentElm = vm.$options._refElm = null;\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    activeInstance = prevActiveInstance;\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // release circular reference (#6759)\n    if (vm.$vnode) {\n      vm.$vnode.parent = null;\n    }\n  };\n}\n\nfunction mountComponent (\n  vm,\n  el,\n  hydrating\n) {\n  vm.$el = el;\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyVNode;\n    if (true) {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        );\n      } else {\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        );\n      }\n    }\n  }\n  callHook(vm, 'beforeMount');\n\n  var updateComponent;\n  /* istanbul ignore if */\n  if (\"development\" !== 'production' && config.performance && mark) {\n    updateComponent = function () {\n      var name = vm._name;\n      var id = vm._uid;\n      var startTag = \"vue-perf-start:\" + id;\n      var endTag = \"vue-perf-end:\" + id;\n\n      mark(startTag);\n      var vnode = vm._render();\n      mark(endTag);\n      measure((\"vue \" + name + \" render\"), startTag, endTag);\n\n      mark(startTag);\n      vm._update(vnode, hydrating);\n      mark(endTag);\n      measure((\"vue \" + name + \" patch\"), startTag, endTag);\n    };\n  } else {\n    updateComponent = function () {\n      vm._update(vm._render(), hydrating);\n    };\n  }\n\n  // we set this to vm._watcher inside the watcher's constructor\n  // since the watcher's initial patch may call $forceUpdate (e.g. inside child\n  // component's mounted hook), which relies on vm._watcher being already defined\n  new Watcher(vm, updateComponent, noop, null, true /* isRenderWatcher */);\n  hydrating = false;\n\n  // manually mounted instance, call mounted on self\n  // mounted is called for render-created child components in its inserted hook\n  if (vm.$vnode == null) {\n    vm._isMounted = true;\n    callHook(vm, 'mounted');\n  }\n  return vm\n}\n\nfunction updateChildComponent (\n  vm,\n  propsData,\n  listeners,\n  parentVnode,\n  renderChildren\n) {\n  if (true) {\n    isUpdatingChildComponent = true;\n  }\n\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren\n  var hasChildren = !!(\n    renderChildren ||               // has new static slots\n    vm.$options._renderChildren ||  // has old static slots\n    parentVnode.data.scopedSlots || // has new scoped slots\n    vm.$scopedSlots !== emptyObject // has old scoped slots\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n\n  if (vm._vnode) { // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update $attrs and $listeners hash\n  // these are also reactive so they may trigger child update if the child\n  // used them during render\n  vm.$attrs = parentVnode.data.attrs || emptyObject;\n  vm.$listeners = listeners || emptyObject;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    toggleObserving(false);\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      var propOptions = vm.$options.props; // wtf flow?\n      props[key] = validateProp(key, propOptions, propsData, vm);\n    }\n    toggleObserving(true);\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n\n  // update listeners\n  listeners = listeners || emptyObject;\n  var oldListeners = vm.$options._parentListeners;\n  vm.$options._parentListeners = listeners;\n  updateComponentListeners(vm, listeners, oldListeners);\n\n  // resolve slots + force update if has children\n  if (hasChildren) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n\n  if (true) {\n    isUpdatingChildComponent = false;\n  }\n}\n\nfunction isInInactiveTree (vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) { return true }\n  }\n  return false\n}\n\nfunction activateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  } else if (vm._directInactive) {\n    return\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook (vm, hook) {\n  // #7573 disable dep collection when invoking lifecycle hooks\n  pushTarget();\n  var handlers = vm.$options[hook];\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      try {\n        handlers[i].call(vm);\n      } catch (e) {\n        handleError(e, vm, (hook + \" hook\"));\n      }\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n  popTarget();\n}\n\n/*  */\n\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  if (true) {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if (\"development\" !== 'production' && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n              : \"in a component render function.\"\n          ),\n          watcher.vm\n        );\n        break\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdatedHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdatedHooks (queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent (vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\nvar uid$1 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options,\n  isRenderWatcher\n) {\n  this.vm = vm;\n  if (isRenderWatcher) {\n    vm._watcher = this;\n  }\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$1; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression =  true\n    ? expOrFn.toString()\n    : undefined;\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = function () {};\n      \"development\" !== 'production' && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  try {\n    value = this.getter.call(vm, vm);\n  } catch (e) {\n    if (this.user) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    } else {\n      throw e\n    }\n  } finally {\n    // \"touch\" every property so they are all tracked as\n    // dependencies for deep watching\n    if (this.deep) {\n      traverse(value);\n    }\n    popTarget();\n    this.cleanupDeps();\n  }\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n    var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this$1.deps[i];\n    if (!this$1.newDepIds.has(dep.id)) {\n      dep.removeSub(this$1);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n    var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    this$1.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n    var this$1 = this;\n\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this$1.deps[i].removeSub(this$1);\n    }\n    this.active = false;\n  }\n};\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  };\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch);\n  }\n}\n\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  if (!isRoot) {\n    toggleObserving(false);\n  }\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (true) {\n      var hyphenatedKey = hyphenate(key);\n      if (isReservedAttribute(hyphenatedKey) ||\n          config.isReservedAttr(hyphenatedKey)) {\n        warn(\n          (\"\\\"\" + hyphenatedKey + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive(props, key, value, function () {\n        if (vm.$parent && !isUpdatingChildComponent) {\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    } else {}\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  toggleObserving(true);\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n    \"development\" !== 'production' && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var methods = vm.$options.methods;\n  var i = keys.length;\n  while (i--) {\n    var key = keys[i];\n    if (true) {\n      if (methods && hasOwn(methods, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a data property.\"),\n          vm\n        );\n      }\n    }\n    if (props && hasOwn(props, key)) {\n      \"development\" !== 'production' && warn(\n        \"The data property \\\"\" + key + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else if (!isReserved(key)) {\n      proxy(vm, \"_data\", key);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData (data, vm) {\n  // #7573 disable dep collection when invoking data getters\n  pushTarget();\n  try {\n    return data.call(vm, vm)\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {}\n  } finally {\n    popTarget();\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed (vm, computed) {\n  // $flow-disable-line\n  var watchers = vm._computedWatchers = Object.create(null);\n  // computed properties are just getters during SSR\n  var isSSR = isServerRendering();\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if (\"development\" !== 'production' && getter == null) {\n      warn(\n        (\"Getter is missing for computed property \\\"\" + key + \"\\\".\"),\n        vm\n      );\n    }\n\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      );\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (true) {\n      if (key in vm.$data) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n      }\n    }\n  }\n}\n\nfunction defineComputed (\n  target,\n  key,\n  userDef\n) {\n  var shouldCache = !isServerRendering();\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = shouldCache\n      ? createComputedGetter(key)\n      : userDef;\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? shouldCache && userDef.cache !== false\n        ? createComputedGetter(key)\n        : userDef.get\n      : noop;\n    sharedPropertyDefinition.set = userDef.set\n      ? userDef.set\n      : noop;\n  }\n  if (\"development\" !== 'production' &&\n      sharedPropertyDefinition.set === noop) {\n    sharedPropertyDefinition.set = function () {\n      warn(\n        (\"Computed property \\\"\" + key + \"\\\" was assigned to but it has no setter.\"),\n        this\n      );\n    };\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.target) {\n        watcher.depend();\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction initMethods (vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    if (true) {\n      if (methods[key] == null) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" has an undefined value in the component definition. \" +\n          \"Did you reference the function correctly?\",\n          vm\n        );\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n          vm\n        );\n      }\n      if ((key in vm) && isReserved(key)) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" conflicts with an existing Vue instance method. \" +\n          \"Avoid defining component methods that start with _ or $.\"\n        );\n      }\n    }\n    vm[key] = methods[key] == null ? noop : bind(methods[key], vm);\n  }\n}\n\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (\n  vm,\n  expOrFn,\n  handler,\n  options\n) {\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  return vm.$watch(expOrFn, handler, options)\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () { return this._data };\n  var propsDef = {};\n  propsDef.get = function () { return this._props };\n  if (true) {\n    dataDef.set = function (newData) {\n      warn(\n        'Avoid replacing instance root $data. ' +\n        'Use nested data properties instead.',\n        this\n      );\n    };\n    propsDef.set = function () {\n      warn(\"$props is readonly.\", this);\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    if (isPlainObject(cb)) {\n      return createWatcher(vm, expOrFn, cb, options)\n    }\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      cb.call(vm, watcher.value);\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\n/*  */\n\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    toggleObserving(false);\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (true) {\n        defineReactive(vm, key, result[key], function () {\n          warn(\n            \"Avoid mutating an injected value directly since the changes will be \" +\n            \"overwritten whenever the provided component re-renders. \" +\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        });\n      } else {}\n    });\n    toggleObserving(true);\n  }\n}\n\nfunction resolveInject (inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    var result = Object.create(null);\n    var keys = hasSymbol\n      ? Reflect.ownKeys(inject).filter(function (key) {\n        /* istanbul ignore next */\n        return Object.getOwnPropertyDescriptor(inject, key).enumerable\n      })\n      : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var provideKey = inject[key].from;\n      var source = vm;\n      while (source) {\n        if (source._provided && hasOwn(source._provided, provideKey)) {\n          result[key] = source._provided[provideKey];\n          break\n        }\n        source = source.$parent;\n      }\n      if (!source) {\n        if ('default' in inject[key]) {\n          var provideDefault = inject[key].default;\n          result[key] = typeof provideDefault === 'function'\n            ? provideDefault.call(vm)\n            : provideDefault;\n        } else if (true) {\n          warn((\"Injection \\\"\" + key + \"\\\" not found\"), vm);\n        }\n      }\n    }\n    return result\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList (\n  val,\n  render\n) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i);\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i);\n    }\n  } else if (isObject(val)) {\n    keys = Object.keys(val);\n    ret = new Array(keys.length);\n    for (i = 0, l = keys.length; i < l; i++) {\n      key = keys[i];\n      ret[i] = render(val[key], key, i);\n    }\n  }\n  if (isDef(ret)) {\n    (ret)._isVList = true;\n  }\n  return ret\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  var nodes;\n  if (scopedSlotFn) { // scoped slot\n    props = props || {};\n    if (bindObject) {\n      if (\"development\" !== 'production' && !isObject(bindObject)) {\n        warn(\n          'slot v-bind without argument expects an Object',\n          this\n        );\n      }\n      props = extend(extend({}, bindObject), props);\n    }\n    nodes = scopedSlotFn(props) || fallback;\n  } else {\n    var slotNodes = this.$slots[name];\n    // warn duplicate slot usage\n    if (slotNodes) {\n      if (\"development\" !== 'production' && slotNodes._rendered) {\n        warn(\n          \"Duplicate presence of slot \\\"\" + name + \"\\\" found in the same render tree \" +\n          \"- this will likely cause render errors.\",\n          this\n        );\n      }\n      slotNodes._rendered = true;\n    }\n    nodes = slotNodes || fallback;\n  }\n\n  var target = props && props.slot;\n  if (target) {\n    return this.$createElement('template', { slot: target }, nodes)\n  } else {\n    return nodes\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/*  */\n\nfunction isKeyNotMatch (expect, actual) {\n  if (Array.isArray(expect)) {\n    return expect.indexOf(actual) === -1\n  } else {\n    return expect !== actual\n  }\n}\n\n/**\n * Runtime helper for checking keyCodes from config.\n * exposed as Vue.prototype._k\n * passing in eventKeyName as last argument separately for backwards compat\n */\nfunction checkKeyCodes (\n  eventKeyCode,\n  key,\n  builtInKeyCode,\n  eventKeyName,\n  builtInKeyName\n) {\n  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;\n  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {\n    return isKeyNotMatch(builtInKeyName, eventKeyName)\n  } else if (mappedKeyCode) {\n    return isKeyNotMatch(mappedKeyCode, eventKeyCode)\n  } else if (eventKeyName) {\n    return hyphenate(eventKeyName) !== key\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps (\n  data,\n  tag,\n  value,\n  asProp,\n  isSync\n) {\n  if (value) {\n    if (!isObject(value)) {\n      \"development\" !== 'production' && warn(\n        'v-bind without argument expects an Object or Array value',\n        this\n      );\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      var loop = function ( key ) {\n        if (\n          key === 'class' ||\n          key === 'style' ||\n          isReservedAttribute(key)\n        ) {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key)\n            ? data.domProps || (data.domProps = {})\n            : data.attrs || (data.attrs = {});\n        }\n        if (!(key in hash)) {\n          hash[key] = value[key];\n\n          if (isSync) {\n            var on = data.on || (data.on = {});\n            on[(\"update:\" + key)] = function ($event) {\n              value[key] = $event;\n            };\n          }\n        }\n      };\n\n      for (var key in value) loop( key );\n    }\n  }\n  return data\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic (\n  index,\n  isInFor\n) {\n  var cached = this._staticTrees || (this._staticTrees = []);\n  var tree = cached[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree.\n  if (tree && !isInFor) {\n    return tree\n  }\n  // otherwise, render a fresh tree.\n  tree = cached[index] = this.$options.staticRenderFns[index].call(\n    this._renderProxy,\n    null,\n    this // for render fns generated for functional component templates\n  );\n  markStatic(tree, (\"__static__\" + index), false);\n  return tree\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce (\n  tree,\n  index,\n  key\n) {\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n  return tree\n}\n\nfunction markStatic (\n  tree,\n  key,\n  isOnce\n) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode (node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction bindObjectListeners (data, value) {\n  if (value) {\n    if (!isPlainObject(value)) {\n      \"development\" !== 'production' && warn(\n        'v-on without argument expects an Object value',\n        this\n      );\n    } else {\n      var on = data.on = data.on ? extend({}, data.on) : {};\n      for (var key in value) {\n        var existing = on[key];\n        var ours = value[key];\n        on[key] = existing ? [].concat(existing, ours) : ours;\n      }\n    }\n  }\n  return data\n}\n\n/*  */\n\nfunction installRenderHelpers (target) {\n  target._o = markOnce;\n  target._n = toNumber;\n  target._s = toString;\n  target._l = renderList;\n  target._t = renderSlot;\n  target._q = looseEqual;\n  target._i = looseIndexOf;\n  target._m = renderStatic;\n  target._f = resolveFilter;\n  target._k = checkKeyCodes;\n  target._b = bindObjectProps;\n  target._v = createTextVNode;\n  target._e = createEmptyVNode;\n  target._u = resolveScopedSlots;\n  target._g = bindObjectListeners;\n}\n\n/*  */\n\nfunction FunctionalRenderContext (\n  data,\n  props,\n  children,\n  parent,\n  Ctor\n) {\n  var options = Ctor.options;\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var contextVm;\n  if (hasOwn(parent, '_uid')) {\n    contextVm = Object.create(parent);\n    // $flow-disable-line\n    contextVm._original = parent;\n  } else {\n    // the context vm passed in is a functional context as well.\n    // in this case we want to make sure we are able to get a hold to the\n    // real context instance.\n    contextVm = parent;\n    // $flow-disable-line\n    parent = parent._original;\n  }\n  var isCompiled = isTrue(options._compiled);\n  var needNormalization = !isCompiled;\n\n  this.data = data;\n  this.props = props;\n  this.children = children;\n  this.parent = parent;\n  this.listeners = data.on || emptyObject;\n  this.injections = resolveInject(options.inject, parent);\n  this.slots = function () { return resolveSlots(children, parent); };\n\n  // support for compiled functional template\n  if (isCompiled) {\n    // exposing $options for renderStatic()\n    this.$options = options;\n    // pre-resolve slots for renderSlot()\n    this.$slots = this.slots();\n    this.$scopedSlots = data.scopedSlots || emptyObject;\n  }\n\n  if (options._scopeId) {\n    this._c = function (a, b, c, d) {\n      var vnode = createElement(contextVm, a, b, c, d, needNormalization);\n      if (vnode && !Array.isArray(vnode)) {\n        vnode.fnScopeId = options._scopeId;\n        vnode.fnContext = parent;\n      }\n      return vnode\n    };\n  } else {\n    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };\n  }\n}\n\ninstallRenderHelpers(FunctionalRenderContext.prototype);\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  contextVm,\n  children\n) {\n  var options = Ctor.options;\n  var props = {};\n  var propOptions = options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || emptyObject);\n    }\n  } else {\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\n    if (isDef(data.props)) { mergeProps(props, data.props); }\n  }\n\n  var renderContext = new FunctionalRenderContext(\n    data,\n    props,\n    children,\n    contextVm,\n    Ctor\n  );\n\n  var vnode = options.render.call(null, renderContext._c, renderContext);\n\n  if (vnode instanceof VNode) {\n    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options)\n  } else if (Array.isArray(vnode)) {\n    var vnodes = normalizeChildren(vnode) || [];\n    var res = new Array(vnodes.length);\n    for (var i = 0; i < vnodes.length; i++) {\n      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options);\n    }\n    return res\n  }\n}\n\nfunction cloneAndMarkFunctionalResult (vnode, data, contextVm, options) {\n  // #7817 clone node before setting fnContext, otherwise if the node is reused\n  // (e.g. it was from a cached normal slot) the fnContext causes named slots\n  // that should not be matched to match.\n  var clone = cloneVNode(vnode);\n  clone.fnContext = contextVm;\n  clone.fnOptions = options;\n  if (data.slot) {\n    (clone.data || (clone.data = {})).slot = data.slot;\n  }\n  return clone\n}\n\nfunction mergeProps (to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n\n\n\n// Register the component hook to weex native render engine.\n// The hook will be triggered by native, not javascript.\n\n\n// Updates the state of the component to weex native render engine.\n\n/*  */\n\n// https://github.com/Hanks10100/weex-native-directive/tree/master/component\n\n// listening on native callback\n\n/*  */\n\n/*  */\n\n// inline hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init (\n    vnode,\n    hydrating,\n    parentElm,\n    refElm\n  ) {\n    if (\n      vnode.componentInstance &&\n      !vnode.componentInstance._isDestroyed &&\n      vnode.data.keepAlive\n    ) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    } else {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance,\n        parentElm,\n        refElm\n      );\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    }\n  },\n\n  prepatch: function prepatch (oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(\n      child,\n      options.propsData, // updated props\n      options.listeners, // updated listeners\n      vnode, // new parent vnode\n      options.children // new children\n    );\n  },\n\n  insert: function insert (vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy (vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (isUndef(Ctor)) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    if (true) {\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n    }\n    return\n  }\n\n  // async component\n  var asyncFactory;\n  if (isUndef(Ctor.cid)) {\n    asyncFactory = Ctor;\n    Ctor = resolveAsyncComponent(asyncFactory, baseCtor, context);\n    if (Ctor === undefined) {\n      // return a placeholder node for async component, which is rendered\n      // as a comment node but preserves all the raw information for the node.\n      // the information will be used for async server-rendering and hydration.\n      return createAsyncPlaceholder(\n        asyncFactory,\n        data,\n        context,\n        children,\n        tag\n      )\n    }\n  }\n\n  data = data || {};\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag);\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  // so it gets processed during parent component patch.\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners & slot\n\n    // work around flow\n    var slot = data.slot;\n    data = {};\n    if (slot) {\n      data.slot = slot;\n    }\n  }\n\n  // install component management hooks onto the placeholder node\n  installComponentHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },\n    asyncFactory\n  );\n\n  // Weex specific: invoke recycle-list optimized @render function for\n  // extracting cell-slot template.\n  // https://github.com/Hanks10100/weex-native-directive/tree/master/component\n  /* istanbul ignore if */\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent, // activeInstance in lifecycle state\n  parentElm,\n  refElm\n) {\n  var options = {\n    _isComponent: true,\n    parent: parent,\n    _parentVnode: vnode,\n    _parentElm: parentElm || null,\n    _refElm: refElm || null\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnode.componentOptions.Ctor(options)\n}\n\nfunction installComponentHooks (data) {\n  var hooks = data.hook || (data.hook = {});\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    hooks[key] = componentVNodeHooks[key];\n  }\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel (options, data) {\n  var prop = (options.model && options.model.prop) || 'value';\n  var event = (options.model && options.model.event) || 'input';(data.props || (data.props = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  if (isDef(on[event])) {\n    on[event] = [data.model.callback].concat(on[event]);\n  } else {\n    on[event] = data.model.callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (isDef(data) && isDef((data).__ob__)) {\n    \"development\" !== 'production' && warn(\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n      'Always create fresh vnode data objects in each render!',\n      context\n    );\n    return createEmptyVNode()\n  }\n  // object syntax in v-bind\n  if (isDef(data) && isDef(data.is)) {\n    tag = data.is;\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // warn against non-primitive key\n  if (\"development\" !== 'production' &&\n    isDef(data) && isDef(data.key) && !isPrimitive(data.key)\n  ) {\n    {\n      warn(\n        'Avoid using non-primitive value as key, ' +\n        'use string/number value instead.',\n        context\n      );\n    }\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (Array.isArray(vnode)) {\n    return vnode\n  } else if (isDef(vnode)) {\n    if (isDef(ns)) { applyNS(vnode, ns); }\n    if (isDef(data)) { registerDeepBindings(data); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns, force) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    ns = undefined;\n    force = true;\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && (\n        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {\n        applyNS(child, ns, force);\n      }\n    }\n  }\n}\n\n// ref #5318\n// necessary to ensure parent re-render when deep bindings like :style and\n// :class are used on slot nodes\nfunction registerDeepBindings (data) {\n  if (isObject(data.style)) {\n    traverse(data.style);\n  }\n  if (isObject(data.class)) {\n    traverse(data.class);\n  }\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null; // v-once cached trees\n  var options = vm.$options;\n  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n\n  // $attrs & $listeners are exposed for easier HOC creation.\n  // they need to be reactive so that HOCs using them are always updated\n  var parentData = parentVnode && parentVnode.data;\n\n  /* istanbul ignore else */\n  if (true) {\n    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$attrs is readonly.\", vm);\n    }, true);\n    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$listeners is readonly.\", vm);\n    }, true);\n  } else {}\n}\n\nfunction renderMixin (Vue) {\n  // install runtime convenience helpers\n  installRenderHelpers(Vue.prototype);\n\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var _parentVnode = ref._parentVnode;\n\n    // reset _rendered flag on slots for duplicate slot check\n    if (true) {\n      for (var key in vm.$slots) {\n        // $flow-disable-line\n        vm.$slots[key]._rendered = false;\n      }\n    }\n\n    if (_parentVnode) {\n      vm.$scopedSlots = _parentVnode.data.scopedSlots || emptyObject;\n    }\n\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if (true) {\n        if (vm.$options.renderError) {\n          try {\n            vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);\n          } catch (e) {\n            handleError(e, vm, \"renderError\");\n            vnode = vm._vnode;\n          }\n        } else {\n          vnode = vm._vnode;\n        }\n      } else {}\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if (\"development\" !== 'production' && Array.isArray(vnode)) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        );\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n}\n\n/*  */\n\nvar uid$3 = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid$3++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if (\"development\" !== 'production' && config.performance && mark) {\n      startTag = \"vue-perf-start:\" + (vm._uid);\n      endTag = \"vue-perf-end:\" + (vm._uid);\n      mark(startTag);\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    if (true) {\n      initProxy(vm);\n    } else {}\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    initInjections(vm); // resolve injections before data/props\n    initState(vm);\n    initProvide(vm); // resolve provide after data/props\n    callHook(vm, 'created');\n\n    /* istanbul ignore if */\n    if (\"development\" !== 'production' && config.performance && mark) {\n      vm._name = formatComponentName(vm, false);\n      mark(endTag);\n      measure((\"vue \" + (vm._name) + \" init\"), startTag, endTag);\n    }\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  var parentVnode = options._parentVnode;\n  opts.parent = options.parent;\n  opts._parentVnode = parentVnode;\n  opts._parentElm = options._parentElm;\n  opts._refElm = options._refElm;\n\n  var vnodeComponentOptions = parentVnode.componentOptions;\n  opts.propsData = vnodeComponentOptions.propsData;\n  opts._parentListeners = vnodeComponentOptions.listeners;\n  opts._renderChildren = vnodeComponentOptions.children;\n  opts._componentTag = vnodeComponentOptions.tag;\n\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction resolveModifiedOptions (Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var extended = Ctor.extendOptions;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) { modified = {}; }\n      modified[key] = dedupe(latest[key], extended[key], sealed[key]);\n    }\n  }\n  return modified\n}\n\nfunction dedupe (latest, extended, sealed) {\n  // compare latest and sealed to ensure lifecycle hooks won't be duplicated\n  // between merges\n  if (Array.isArray(latest)) {\n    var res = [];\n    sealed = Array.isArray(sealed) ? sealed : [sealed];\n    extended = Array.isArray(extended) ? extended : [extended];\n    for (var i = 0; i < latest.length; i++) {\n      // push original options and not sealed options to exclude duplicated options\n      if (extended.indexOf(latest[i]) >= 0 || sealed.indexOf(latest[i]) < 0) {\n        res.push(latest[i]);\n      }\n    }\n    return res\n  } else {\n    return latest\n  }\n}\n\nfunction Vue (options) {\n  if (\"development\" !== 'production' &&\n    !(this instanceof Vue)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue);\nstateMixin(Vue);\neventsMixin(Vue);\nlifecycleMixin(Vue);\nrenderMixin(Vue);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));\n    if (installedPlugins.indexOf(plugin) > -1) {\n      return this\n    }\n\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    installedPlugins.push(plugin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if (\"development\" !== 'production' && name) {\n      validateComponentName(name);\n    }\n\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\nfunction initProps$1 (Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1 (Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if (\"development\" !== 'production' && type === 'component') {\n          validateComponentName(id);\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (Array.isArray(pattern)) {\n    return pattern.indexOf(name) > -1\n  } else if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  /* istanbul ignore next */\n  return false\n}\n\nfunction pruneCache (keepAliveInstance, filter) {\n  var cache = keepAliveInstance.cache;\n  var keys = keepAliveInstance.keys;\n  var _vnode = keepAliveInstance._vnode;\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        pruneCacheEntry(cache, key, keys, _vnode);\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (\n  cache,\n  key,\n  keys,\n  current\n) {\n  var cached$$1 = cache[key];\n  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {\n    cached$$1.componentInstance.$destroy();\n  }\n  cache[key] = null;\n  remove(keys, key);\n}\n\nvar patternTypes = [String, RegExp, Array];\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes,\n    max: [String, Number]\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n    this.keys = [];\n  },\n\n  destroyed: function destroyed () {\n    var this$1 = this;\n\n    for (var key in this$1.cache) {\n      pruneCacheEntry(this$1.cache, key, this$1.keys);\n    }\n  },\n\n  mounted: function mounted () {\n    var this$1 = this;\n\n    this.$watch('include', function (val) {\n      pruneCache(this$1, function (name) { return matches(val, name); });\n    });\n    this.$watch('exclude', function (val) {\n      pruneCache(this$1, function (name) { return !matches(val, name); });\n    });\n  },\n\n  render: function render () {\n    var slot = this.$slots.default;\n    var vnode = getFirstComponentChild(slot);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      var ref = this;\n      var include = ref.include;\n      var exclude = ref.exclude;\n      if (\n        // not included\n        (include && (!name || !matches(include, name))) ||\n        // excluded\n        (exclude && name && matches(exclude, name))\n      ) {\n        return vnode\n      }\n\n      var ref$1 = this;\n      var cache = ref$1.cache;\n      var keys = ref$1.keys;\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (cache[key]) {\n        vnode.componentInstance = cache[key].componentInstance;\n        // make current key freshest\n        remove(keys, key);\n        keys.push(key);\n      } else {\n        cache[key] = vnode;\n        keys.push(key);\n        // prune oldest entry\n        if (this.max && keys.length > parseInt(this.max)) {\n          pruneCacheEntry(cache, keys[0], keys, this._vnode);\n        }\n      }\n\n      vnode.data.keepAlive = true;\n    }\n    return vnode || (slot && slot[0])\n  }\n}\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n}\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  if (true) {\n    configDef.set = function () {\n      warn(\n        'Do not replace the Vue.config object, set individual fields instead.'\n      );\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue);\n\nObject.defineProperty(Vue.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue.prototype, '$ssrContext', {\n  get: function get () {\n    /* istanbul ignore next */\n    return this.$vnode && this.$vnode.ssrContext\n  }\n});\n\n// expose FunctionalRenderContext for ssr runtime helper installation\nObject.defineProperty(Vue, 'FunctionalRenderContext', {\n  value: FunctionalRenderContext\n});\n\nVue.version = '2.5.17';\n\n/*  */\n\n// these are reserved for web because they are directly compiled away\n// during template compilation\nvar isReservedAttr = makeMap('style,class');\n\n// attributes that should be using props for binding\nvar acceptValue = makeMap('input,textarea,option,select,progress');\nvar mustUseProp = function (tag, type, attr) {\n  return (\n    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||\n    (attr === 'selected' && tag === 'option') ||\n    (attr === 'checked' && tag === 'input') ||\n    (attr === 'muted' && tag === 'video')\n  )\n};\n\nvar isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');\n\nvar isBooleanAttr = makeMap(\n  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +\n  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +\n  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +\n  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +\n  'required,reversed,scoped,seamless,selected,sortable,translate,' +\n  'truespeed,typemustmatch,visible'\n);\n\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\n\nvar isXlink = function (name) {\n  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'\n};\n\nvar getXlinkProp = function (name) {\n  return isXlink(name) ? name.slice(6, name.length) : ''\n};\n\nvar isFalsyAttrValue = function (val) {\n  return val == null || val === false\n};\n\n/*  */\n\nfunction genClassForVnode (vnode) {\n  var data = vnode.data;\n  var parentNode = vnode;\n  var childNode = vnode;\n  while (isDef(childNode.componentInstance)) {\n    childNode = childNode.componentInstance._vnode;\n    if (childNode && childNode.data) {\n      data = mergeClassData(childNode.data, data);\n    }\n  }\n  while (isDef(parentNode = parentNode.parent)) {\n    if (parentNode && parentNode.data) {\n      data = mergeClassData(data, parentNode.data);\n    }\n  }\n  return renderClass(data.staticClass, data.class)\n}\n\nfunction mergeClassData (child, parent) {\n  return {\n    staticClass: concat(child.staticClass, parent.staticClass),\n    class: isDef(child.class)\n      ? [child.class, parent.class]\n      : parent.class\n  }\n}\n\nfunction renderClass (\n  staticClass,\n  dynamicClass\n) {\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  if (Array.isArray(value)) {\n    return stringifyArray(value)\n  }\n  if (isObject(value)) {\n    return stringifyObject(value)\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction stringifyArray (value) {\n  var res = '';\n  var stringified;\n  for (var i = 0, l = value.length; i < l; i++) {\n    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n      if (res) { res += ' '; }\n      res += stringified;\n    }\n  }\n  return res\n}\n\nfunction stringifyObject (value) {\n  var res = '';\n  for (var key in value) {\n    if (value[key]) {\n      if (res) { res += ' '; }\n      res += key;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar namespaceMap = {\n  svg: 'http://www.w3.org/2000/svg',\n  math: 'http://www.w3.org/1998/Math/MathML'\n};\n\nvar isHTMLTag = makeMap(\n  'html,body,base,head,link,meta,style,title,' +\n  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +\n  'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +\n  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +\n  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +\n  'embed,object,param,source,canvas,script,noscript,del,ins,' +\n  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +\n  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +\n  'output,progress,select,textarea,' +\n  'details,dialog,menu,menuitem,summary,' +\n  'content,element,shadow,template,blockquote,iframe,tfoot'\n);\n\n// this map is intentionally selective, only covering SVG elements that may\n// contain child elements.\nvar isSVG = makeMap(\n  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +\n  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +\n  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',\n  true\n);\n\nvar isPreTag = function (tag) { return tag === 'pre'; };\n\nvar isReservedTag = function (tag) {\n  return isHTMLTag(tag) || isSVG(tag)\n};\n\nfunction getTagNamespace (tag) {\n  if (isSVG(tag)) {\n    return 'svg'\n  }\n  // basic support for MathML\n  // note it doesn't support other MathML elements being component roots\n  if (tag === 'math') {\n    return 'math'\n  }\n}\n\nvar unknownElementCache = Object.create(null);\nfunction isUnknownElement (tag) {\n  /* istanbul ignore if */\n  if (!inBrowser) {\n    return true\n  }\n  if (isReservedTag(tag)) {\n    return false\n  }\n  tag = tag.toLowerCase();\n  /* istanbul ignore if */\n  if (unknownElementCache[tag] != null) {\n    return unknownElementCache[tag]\n  }\n  var el = document.createElement(tag);\n  if (tag.indexOf('-') > -1) {\n    // http://stackoverflow.com/a/28210364/1070244\n    return (unknownElementCache[tag] = (\n      el.constructor === window.HTMLUnknownElement ||\n      el.constructor === window.HTMLElement\n    ))\n  } else {\n    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))\n  }\n}\n\nvar isTextInputType = makeMap('text,number,password,search,email,tel,url');\n\n/*  */\n\n/**\n * Query an element selector if it's not an element already.\n */\nfunction query (el) {\n  if (typeof el === 'string') {\n    var selected = document.querySelector(el);\n    if (!selected) {\n      \"development\" !== 'production' && warn(\n        'Cannot find element: ' + el\n      );\n      return document.createElement('div')\n    }\n    return selected\n  } else {\n    return el\n  }\n}\n\n/*  */\n\nfunction createElement$1 (tagName, vnode) {\n  var elm = document.createElement(tagName);\n  if (tagName !== 'select') {\n    return elm\n  }\n  // false or null will remove the attribute but undefined will not\n  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {\n    elm.setAttribute('multiple', 'multiple');\n  }\n  return elm\n}\n\nfunction createElementNS (namespace, tagName) {\n  return document.createElementNS(namespaceMap[namespace], tagName)\n}\n\nfunction createTextNode (text) {\n  return document.createTextNode(text)\n}\n\nfunction createComment (text) {\n  return document.createComment(text)\n}\n\nfunction insertBefore (parentNode, newNode, referenceNode) {\n  parentNode.insertBefore(newNode, referenceNode);\n}\n\nfunction removeChild (node, child) {\n  node.removeChild(child);\n}\n\nfunction appendChild (node, child) {\n  node.appendChild(child);\n}\n\nfunction parentNode (node) {\n  return node.parentNode\n}\n\nfunction nextSibling (node) {\n  return node.nextSibling\n}\n\nfunction tagName (node) {\n  return node.tagName\n}\n\nfunction setTextContent (node, text) {\n  node.textContent = text;\n}\n\nfunction setStyleScope (node, scopeId) {\n  node.setAttribute(scopeId, '');\n}\n\n\nvar nodeOps = Object.freeze({\n\tcreateElement: createElement$1,\n\tcreateElementNS: createElementNS,\n\tcreateTextNode: createTextNode,\n\tcreateComment: createComment,\n\tinsertBefore: insertBefore,\n\tremoveChild: removeChild,\n\tappendChild: appendChild,\n\tparentNode: parentNode,\n\tnextSibling: nextSibling,\n\ttagName: tagName,\n\tsetTextContent: setTextContent,\n\tsetStyleScope: setStyleScope\n});\n\n/*  */\n\nvar ref = {\n  create: function create (_, vnode) {\n    registerRef(vnode);\n  },\n  update: function update (oldVnode, vnode) {\n    if (oldVnode.data.ref !== vnode.data.ref) {\n      registerRef(oldVnode, true);\n      registerRef(vnode);\n    }\n  },\n  destroy: function destroy (vnode) {\n    registerRef(vnode, true);\n  }\n}\n\nfunction registerRef (vnode, isRemoval) {\n  var key = vnode.data.ref;\n  if (!isDef(key)) { return }\n\n  var vm = vnode.context;\n  var ref = vnode.componentInstance || vnode.elm;\n  var refs = vm.$refs;\n  if (isRemoval) {\n    if (Array.isArray(refs[key])) {\n      remove(refs[key], ref);\n    } else if (refs[key] === ref) {\n      refs[key] = undefined;\n    }\n  } else {\n    if (vnode.data.refInFor) {\n      if (!Array.isArray(refs[key])) {\n        refs[key] = [ref];\n      } else if (refs[key].indexOf(ref) < 0) {\n        // $flow-disable-line\n        refs[key].push(ref);\n      }\n    } else {\n      refs[key] = ref;\n    }\n  }\n}\n\n/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/paldepind/snabbdom/blob/master/LICENSE\n *\n * modified by Evan You (@yyx990803)\n *\n * Not type-checking this because this file is perf-critical and the cost\n * of making flow understand it is not worth it.\n */\n\nvar emptyNode = new VNode('', {}, []);\n\nvar hooks = ['create', 'activate', 'update', 'remove', 'destroy'];\n\nfunction sameVnode (a, b) {\n  return (\n    a.key === b.key && (\n      (\n        a.tag === b.tag &&\n        a.isComment === b.isComment &&\n        isDef(a.data) === isDef(b.data) &&\n        sameInputType(a, b)\n      ) || (\n        isTrue(a.isAsyncPlaceholder) &&\n        a.asyncFactory === b.asyncFactory &&\n        isUndef(b.asyncFactory.error)\n      )\n    )\n  )\n}\n\nfunction sameInputType (a, b) {\n  if (a.tag !== 'input') { return true }\n  var i;\n  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;\n  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;\n  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)\n}\n\nfunction createKeyToOldIdx (children, beginIdx, endIdx) {\n  var i, key;\n  var map = {};\n  for (i = beginIdx; i <= endIdx; ++i) {\n    key = children[i].key;\n    if (isDef(key)) { map[key] = i; }\n  }\n  return map\n}\n\nfunction createPatchFunction (backend) {\n  var i, j;\n  var cbs = {};\n\n  var modules = backend.modules;\n  var nodeOps = backend.nodeOps;\n\n  for (i = 0; i < hooks.length; ++i) {\n    cbs[hooks[i]] = [];\n    for (j = 0; j < modules.length; ++j) {\n      if (isDef(modules[j][hooks[i]])) {\n        cbs[hooks[i]].push(modules[j][hooks[i]]);\n      }\n    }\n  }\n\n  function emptyNodeAt (elm) {\n    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)\n  }\n\n  function createRmCb (childElm, listeners) {\n    function remove () {\n      if (--remove.listeners === 0) {\n        removeNode(childElm);\n      }\n    }\n    remove.listeners = listeners;\n    return remove\n  }\n\n  function removeNode (el) {\n    var parent = nodeOps.parentNode(el);\n    // element may have already been removed due to v-html / v-text\n    if (isDef(parent)) {\n      nodeOps.removeChild(parent, el);\n    }\n  }\n\n  function isUnknownElement$$1 (vnode, inVPre) {\n    return (\n      !inVPre &&\n      !vnode.ns &&\n      !(\n        config.ignoredElements.length &&\n        config.ignoredElements.some(function (ignore) {\n          return isRegExp(ignore)\n            ? ignore.test(vnode.tag)\n            : ignore === vnode.tag\n        })\n      ) &&\n      config.isUnknownElement(vnode.tag)\n    )\n  }\n\n  var creatingElmInVPre = 0;\n\n  function createElm (\n    vnode,\n    insertedVnodeQueue,\n    parentElm,\n    refElm,\n    nested,\n    ownerArray,\n    index\n  ) {\n    if (isDef(vnode.elm) && isDef(ownerArray)) {\n      // This vnode was used in a previous render!\n      // now it's used as a new node, overwriting its elm would cause\n      // potential patch errors down the road when it's used as an insertion\n      // reference node. Instead, we clone the node on-demand before creating\n      // associated DOM element for it.\n      vnode = ownerArray[index] = cloneVNode(vnode);\n    }\n\n    vnode.isRootInsert = !nested; // for transition enter check\n    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {\n      return\n    }\n\n    var data = vnode.data;\n    var children = vnode.children;\n    var tag = vnode.tag;\n    if (isDef(tag)) {\n      if (true) {\n        if (data && data.pre) {\n          creatingElmInVPre++;\n        }\n        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {\n          warn(\n            'Unknown custom element: <' + tag + '> - did you ' +\n            'register the component correctly? For recursive components, ' +\n            'make sure to provide the \"name\" option.',\n            vnode.context\n          );\n        }\n      }\n\n      vnode.elm = vnode.ns\n        ? nodeOps.createElementNS(vnode.ns, tag)\n        : nodeOps.createElement(tag, vnode);\n      setScope(vnode);\n\n      /* istanbul ignore if */\n      {\n        createChildren(vnode, children, insertedVnodeQueue);\n        if (isDef(data)) {\n          invokeCreateHooks(vnode, insertedVnodeQueue);\n        }\n        insert(parentElm, vnode.elm, refElm);\n      }\n\n      if (\"development\" !== 'production' && data && data.pre) {\n        creatingElmInVPre--;\n      }\n    } else if (isTrue(vnode.isComment)) {\n      vnode.elm = nodeOps.createComment(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    } else {\n      vnode.elm = nodeOps.createTextNode(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    }\n  }\n\n  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i = vnode.data;\n    if (isDef(i)) {\n      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;\n      if (isDef(i = i.hook) && isDef(i = i.init)) {\n        i(vnode, false /* hydrating */, parentElm, refElm);\n      }\n      // after calling the init hook, if the vnode is a child component\n      // it should've created a child instance and mounted it. the child\n      // component also has set the placeholder vnode's elm.\n      // in that case we can just return the element and be done.\n      if (isDef(vnode.componentInstance)) {\n        initComponent(vnode, insertedVnodeQueue);\n        if (isTrue(isReactivated)) {\n          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);\n        }\n        return true\n      }\n    }\n  }\n\n  function initComponent (vnode, insertedVnodeQueue) {\n    if (isDef(vnode.data.pendingInsert)) {\n      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);\n      vnode.data.pendingInsert = null;\n    }\n    vnode.elm = vnode.componentInstance.$el;\n    if (isPatchable(vnode)) {\n      invokeCreateHooks(vnode, insertedVnodeQueue);\n      setScope(vnode);\n    } else {\n      // empty component root.\n      // skip all element-related modules except for ref (#3455)\n      registerRef(vnode);\n      // make sure to invoke the insert hook\n      insertedVnodeQueue.push(vnode);\n    }\n  }\n\n  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i;\n    // hack for #4339: a reactivated component with inner transition\n    // does not trigger because the inner node's created hooks are not called\n    // again. It's not ideal to involve module-specific logic in here but\n    // there doesn't seem to be a better way to do it.\n    var innerNode = vnode;\n    while (innerNode.componentInstance) {\n      innerNode = innerNode.componentInstance._vnode;\n      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {\n        for (i = 0; i < cbs.activate.length; ++i) {\n          cbs.activate[i](emptyNode, innerNode);\n        }\n        insertedVnodeQueue.push(innerNode);\n        break\n      }\n    }\n    // unlike a newly created component,\n    // a reactivated keep-alive component doesn't insert itself\n    insert(parentElm, vnode.elm, refElm);\n  }\n\n  function insert (parent, elm, ref$$1) {\n    if (isDef(parent)) {\n      if (isDef(ref$$1)) {\n        if (ref$$1.parentNode === parent) {\n          nodeOps.insertBefore(parent, elm, ref$$1);\n        }\n      } else {\n        nodeOps.appendChild(parent, elm);\n      }\n    }\n  }\n\n  function createChildren (vnode, children, insertedVnodeQueue) {\n    if (Array.isArray(children)) {\n      if (true) {\n        checkDuplicateKeys(children);\n      }\n      for (var i = 0; i < children.length; ++i) {\n        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);\n      }\n    } else if (isPrimitive(vnode.text)) {\n      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));\n    }\n  }\n\n  function isPatchable (vnode) {\n    while (vnode.componentInstance) {\n      vnode = vnode.componentInstance._vnode;\n    }\n    return isDef(vnode.tag)\n  }\n\n  function invokeCreateHooks (vnode, insertedVnodeQueue) {\n    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n      cbs.create[i$1](emptyNode, vnode);\n    }\n    i = vnode.data.hook; // Reuse variable\n    if (isDef(i)) {\n      if (isDef(i.create)) { i.create(emptyNode, vnode); }\n      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }\n    }\n  }\n\n  // set scope id attribute for scoped CSS.\n  // this is implemented as a special case to avoid the overhead\n  // of going through the normal attribute patching process.\n  function setScope (vnode) {\n    var i;\n    if (isDef(i = vnode.fnScopeId)) {\n      nodeOps.setStyleScope(vnode.elm, i);\n    } else {\n      var ancestor = vnode;\n      while (ancestor) {\n        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {\n          nodeOps.setStyleScope(vnode.elm, i);\n        }\n        ancestor = ancestor.parent;\n      }\n    }\n    // for slot content they should also get the scopeId from the host instance.\n    if (isDef(i = activeInstance) &&\n      i !== vnode.context &&\n      i !== vnode.fnContext &&\n      isDef(i = i.$options._scopeId)\n    ) {\n      nodeOps.setStyleScope(vnode.elm, i);\n    }\n  }\n\n  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);\n    }\n  }\n\n  function invokeDestroyHook (vnode) {\n    var i, j;\n    var data = vnode.data;\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }\n      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }\n    }\n    if (isDef(i = vnode.children)) {\n      for (j = 0; j < vnode.children.length; ++j) {\n        invokeDestroyHook(vnode.children[j]);\n      }\n    }\n  }\n\n  function removeVnodes (parentElm, vnodes, startIdx, endIdx) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      var ch = vnodes[startIdx];\n      if (isDef(ch)) {\n        if (isDef(ch.tag)) {\n          removeAndInvokeRemoveHook(ch);\n          invokeDestroyHook(ch);\n        } else { // Text node\n          removeNode(ch.elm);\n        }\n      }\n    }\n  }\n\n  function removeAndInvokeRemoveHook (vnode, rm) {\n    if (isDef(rm) || isDef(vnode.data)) {\n      var i;\n      var listeners = cbs.remove.length + 1;\n      if (isDef(rm)) {\n        // we have a recursively passed down rm callback\n        // increase the listeners count\n        rm.listeners += listeners;\n      } else {\n        // directly removing\n        rm = createRmCb(vnode.elm, listeners);\n      }\n      // recursively invoke hooks on child component root node\n      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {\n        removeAndInvokeRemoveHook(i, rm);\n      }\n      for (i = 0; i < cbs.remove.length; ++i) {\n        cbs.remove[i](vnode, rm);\n      }\n      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {\n        i(vnode, rm);\n      } else {\n        rm();\n      }\n    } else {\n      removeNode(vnode.elm);\n    }\n  }\n\n  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\n    var oldStartIdx = 0;\n    var newStartIdx = 0;\n    var oldEndIdx = oldCh.length - 1;\n    var oldStartVnode = oldCh[0];\n    var oldEndVnode = oldCh[oldEndIdx];\n    var newEndIdx = newCh.length - 1;\n    var newStartVnode = newCh[0];\n    var newEndVnode = newCh[newEndIdx];\n    var oldKeyToIdx, idxInOld, vnodeToMove, refElm;\n\n    // removeOnly is a special flag used only by <transition-group>\n    // to ensure removed elements stay in correct relative positions\n    // during leaving transitions\n    var canMove = !removeOnly;\n\n    if (true) {\n      checkDuplicateKeys(newCh);\n    }\n\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n      if (isUndef(oldStartVnode)) {\n        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left\n      } else if (isUndef(oldEndVnode)) {\n        oldEndVnode = oldCh[--oldEndIdx];\n      } else if (sameVnode(oldStartVnode, newStartVnode)) {\n        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);\n        oldStartVnode = oldCh[++oldStartIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else if (sameVnode(oldEndVnode, newEndVnode)) {\n        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\n        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\n        oldStartVnode = oldCh[++oldStartIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else {\n        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }\n        idxInOld = isDef(newStartVnode.key)\n          ? oldKeyToIdx[newStartVnode.key]\n          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);\n        if (isUndef(idxInOld)) { // New element\n          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\n        } else {\n          vnodeToMove = oldCh[idxInOld];\n          if (sameVnode(vnodeToMove, newStartVnode)) {\n            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue);\n            oldCh[idxInOld] = undefined;\n            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);\n          } else {\n            // same key but different element. treat as new element\n            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\n          }\n        }\n        newStartVnode = newCh[++newStartIdx];\n      }\n    }\n    if (oldStartIdx > oldEndIdx) {\n      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;\n      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n    } else if (newStartIdx > newEndIdx) {\n      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\n    }\n  }\n\n  function checkDuplicateKeys (children) {\n    var seenKeys = {};\n    for (var i = 0; i < children.length; i++) {\n      var vnode = children[i];\n      var key = vnode.key;\n      if (isDef(key)) {\n        if (seenKeys[key]) {\n          warn(\n            (\"Duplicate keys detected: '\" + key + \"'. This may cause an update error.\"),\n            vnode.context\n          );\n        } else {\n          seenKeys[key] = true;\n        }\n      }\n    }\n  }\n\n  function findIdxInOld (node, oldCh, start, end) {\n    for (var i = start; i < end; i++) {\n      var c = oldCh[i];\n      if (isDef(c) && sameVnode(node, c)) { return i }\n    }\n  }\n\n  function patchVnode (oldVnode, vnode, insertedVnodeQueue, removeOnly) {\n    if (oldVnode === vnode) {\n      return\n    }\n\n    var elm = vnode.elm = oldVnode.elm;\n\n    if (isTrue(oldVnode.isAsyncPlaceholder)) {\n      if (isDef(vnode.asyncFactory.resolved)) {\n        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);\n      } else {\n        vnode.isAsyncPlaceholder = true;\n      }\n      return\n    }\n\n    // reuse element for static trees.\n    // note we only do this if the vnode is cloned -\n    // if the new node is not cloned it means the render functions have been\n    // reset by the hot-reload-api and we need to do a proper re-render.\n    if (isTrue(vnode.isStatic) &&\n      isTrue(oldVnode.isStatic) &&\n      vnode.key === oldVnode.key &&\n      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))\n    ) {\n      vnode.componentInstance = oldVnode.componentInstance;\n      return\n    }\n\n    var i;\n    var data = vnode.data;\n    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {\n      i(oldVnode, vnode);\n    }\n\n    var oldCh = oldVnode.children;\n    var ch = vnode.children;\n    if (isDef(data) && isPatchable(vnode)) {\n      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }\n      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }\n    }\n    if (isUndef(vnode.text)) {\n      if (isDef(oldCh) && isDef(ch)) {\n        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }\n      } else if (isDef(ch)) {\n        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }\n        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n      } else if (isDef(oldCh)) {\n        removeVnodes(elm, oldCh, 0, oldCh.length - 1);\n      } else if (isDef(oldVnode.text)) {\n        nodeOps.setTextContent(elm, '');\n      }\n    } else if (oldVnode.text !== vnode.text) {\n      nodeOps.setTextContent(elm, vnode.text);\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }\n    }\n  }\n\n  function invokeInsertHook (vnode, queue, initial) {\n    // delay insert hooks for component root nodes, invoke them after the\n    // element is really inserted\n    if (isTrue(initial) && isDef(vnode.parent)) {\n      vnode.parent.data.pendingInsert = queue;\n    } else {\n      for (var i = 0; i < queue.length; ++i) {\n        queue[i].data.hook.insert(queue[i]);\n      }\n    }\n  }\n\n  var hydrationBailed = false;\n  // list of modules that can skip create hook during hydration because they\n  // are already rendered on the client or has no need for initialization\n  // Note: style is excluded because it relies on initial clone for future\n  // deep updates (#7063).\n  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');\n\n  // Note: this is a browser-only function so we can assume elms are DOM nodes.\n  function hydrate (elm, vnode, insertedVnodeQueue, inVPre) {\n    var i;\n    var tag = vnode.tag;\n    var data = vnode.data;\n    var children = vnode.children;\n    inVPre = inVPre || (data && data.pre);\n    vnode.elm = elm;\n\n    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {\n      vnode.isAsyncPlaceholder = true;\n      return true\n    }\n    // assert node match\n    if (true) {\n      if (!assertNodeMatch(elm, vnode, inVPre)) {\n        return false\n      }\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }\n      if (isDef(i = vnode.componentInstance)) {\n        // child component. it should have hydrated its own tree.\n        initComponent(vnode, insertedVnodeQueue);\n        return true\n      }\n    }\n    if (isDef(tag)) {\n      if (isDef(children)) {\n        // empty element, allow client to pick up and populate children\n        if (!elm.hasChildNodes()) {\n          createChildren(vnode, children, insertedVnodeQueue);\n        } else {\n          // v-html and domProps: innerHTML\n          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {\n            if (i !== elm.innerHTML) {\n              /* istanbul ignore if */\n              if (\"development\" !== 'production' &&\n                typeof console !== 'undefined' &&\n                !hydrationBailed\n              ) {\n                hydrationBailed = true;\n                console.warn('Parent: ', elm);\n                console.warn('server innerHTML: ', i);\n                console.warn('client innerHTML: ', elm.innerHTML);\n              }\n              return false\n            }\n          } else {\n            // iterate and compare children lists\n            var childrenMatch = true;\n            var childNode = elm.firstChild;\n            for (var i$1 = 0; i$1 < children.length; i$1++) {\n              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {\n                childrenMatch = false;\n                break\n              }\n              childNode = childNode.nextSibling;\n            }\n            // if childNode is not null, it means the actual childNodes list is\n            // longer than the virtual children list.\n            if (!childrenMatch || childNode) {\n              /* istanbul ignore if */\n              if (\"development\" !== 'production' &&\n                typeof console !== 'undefined' &&\n                !hydrationBailed\n              ) {\n                hydrationBailed = true;\n                console.warn('Parent: ', elm);\n                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);\n              }\n              return false\n            }\n          }\n        }\n      }\n      if (isDef(data)) {\n        var fullInvoke = false;\n        for (var key in data) {\n          if (!isRenderedModule(key)) {\n            fullInvoke = true;\n            invokeCreateHooks(vnode, insertedVnodeQueue);\n            break\n          }\n        }\n        if (!fullInvoke && data['class']) {\n          // ensure collecting deps for deep class bindings for future updates\n          traverse(data['class']);\n        }\n      }\n    } else if (elm.data !== vnode.text) {\n      elm.data = vnode.text;\n    }\n    return true\n  }\n\n  function assertNodeMatch (node, vnode, inVPre) {\n    if (isDef(vnode.tag)) {\n      return vnode.tag.indexOf('vue-component') === 0 || (\n        !isUnknownElement$$1(vnode, inVPre) &&\n        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())\n      )\n    } else {\n      return node.nodeType === (vnode.isComment ? 8 : 3)\n    }\n  }\n\n  return function patch (oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {\n    if (isUndef(vnode)) {\n      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }\n      return\n    }\n\n    var isInitialPatch = false;\n    var insertedVnodeQueue = [];\n\n    if (isUndef(oldVnode)) {\n      // empty mount (likely as component), create new root element\n      isInitialPatch = true;\n      createElm(vnode, insertedVnodeQueue, parentElm, refElm);\n    } else {\n      var isRealElement = isDef(oldVnode.nodeType);\n      if (!isRealElement && sameVnode(oldVnode, vnode)) {\n        // patch existing root node\n        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);\n      } else {\n        if (isRealElement) {\n          // mounting to a real element\n          // check if this is server-rendered content and if we can perform\n          // a successful hydration.\n          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {\n            oldVnode.removeAttribute(SSR_ATTR);\n            hydrating = true;\n          }\n          if (isTrue(hydrating)) {\n            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\n              invokeInsertHook(vnode, insertedVnodeQueue, true);\n              return oldVnode\n            } else if (true) {\n              warn(\n                'The client-side rendered virtual DOM tree is not matching ' +\n                'server-rendered content. This is likely caused by incorrect ' +\n                'HTML markup, for example nesting block-level elements inside ' +\n                '<p>, or missing <tbody>. Bailing hydration and performing ' +\n                'full client-side render.'\n              );\n            }\n          }\n          // either not server-rendered, or hydration failed.\n          // create an empty node and replace it\n          oldVnode = emptyNodeAt(oldVnode);\n        }\n\n        // replacing existing element\n        var oldElm = oldVnode.elm;\n        var parentElm$1 = nodeOps.parentNode(oldElm);\n\n        // create new node\n        createElm(\n          vnode,\n          insertedVnodeQueue,\n          // extremely rare edge case: do not insert if old element is in a\n          // leaving transition. Only happens when combining transition +\n          // keep-alive + HOCs. (#4590)\n          oldElm._leaveCb ? null : parentElm$1,\n          nodeOps.nextSibling(oldElm)\n        );\n\n        // update parent placeholder node element, recursively\n        if (isDef(vnode.parent)) {\n          var ancestor = vnode.parent;\n          var patchable = isPatchable(vnode);\n          while (ancestor) {\n            for (var i = 0; i < cbs.destroy.length; ++i) {\n              cbs.destroy[i](ancestor);\n            }\n            ancestor.elm = vnode.elm;\n            if (patchable) {\n              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n                cbs.create[i$1](emptyNode, ancestor);\n              }\n              // #6513\n              // invoke insert hooks that may have been merged by create hooks.\n              // e.g. for directives that uses the \"inserted\" hook.\n              var insert = ancestor.data.hook.insert;\n              if (insert.merged) {\n                // start at index 1 to avoid re-invoking component mounted hook\n                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {\n                  insert.fns[i$2]();\n                }\n              }\n            } else {\n              registerRef(ancestor);\n            }\n            ancestor = ancestor.parent;\n          }\n        }\n\n        // destroy old node\n        if (isDef(parentElm$1)) {\n          removeVnodes(parentElm$1, [oldVnode], 0, 0);\n        } else if (isDef(oldVnode.tag)) {\n          invokeDestroyHook(oldVnode);\n        }\n      }\n    }\n\n    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);\n    return vnode.elm\n  }\n}\n\n/*  */\n\nvar directives = {\n  create: updateDirectives,\n  update: updateDirectives,\n  destroy: function unbindDirectives (vnode) {\n    updateDirectives(vnode, emptyNode);\n  }\n}\n\nfunction updateDirectives (oldVnode, vnode) {\n  if (oldVnode.data.directives || vnode.data.directives) {\n    _update(oldVnode, vnode);\n  }\n}\n\nfunction _update (oldVnode, vnode) {\n  var isCreate = oldVnode === emptyNode;\n  var isDestroy = vnode === emptyNode;\n  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);\n  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);\n\n  var dirsWithInsert = [];\n  var dirsWithPostpatch = [];\n\n  var key, oldDir, dir;\n  for (key in newDirs) {\n    oldDir = oldDirs[key];\n    dir = newDirs[key];\n    if (!oldDir) {\n      // new directive, bind\n      callHook$1(dir, 'bind', vnode, oldVnode);\n      if (dir.def && dir.def.inserted) {\n        dirsWithInsert.push(dir);\n      }\n    } else {\n      // existing directive, update\n      dir.oldValue = oldDir.value;\n      callHook$1(dir, 'update', vnode, oldVnode);\n      if (dir.def && dir.def.componentUpdated) {\n        dirsWithPostpatch.push(dir);\n      }\n    }\n  }\n\n  if (dirsWithInsert.length) {\n    var callInsert = function () {\n      for (var i = 0; i < dirsWithInsert.length; i++) {\n        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);\n      }\n    };\n    if (isCreate) {\n      mergeVNodeHook(vnode, 'insert', callInsert);\n    } else {\n      callInsert();\n    }\n  }\n\n  if (dirsWithPostpatch.length) {\n    mergeVNodeHook(vnode, 'postpatch', function () {\n      for (var i = 0; i < dirsWithPostpatch.length; i++) {\n        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);\n      }\n    });\n  }\n\n  if (!isCreate) {\n    for (key in oldDirs) {\n      if (!newDirs[key]) {\n        // no longer present, unbind\n        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);\n      }\n    }\n  }\n}\n\nvar emptyModifiers = Object.create(null);\n\nfunction normalizeDirectives$1 (\n  dirs,\n  vm\n) {\n  var res = Object.create(null);\n  if (!dirs) {\n    // $flow-disable-line\n    return res\n  }\n  var i, dir;\n  for (i = 0; i < dirs.length; i++) {\n    dir = dirs[i];\n    if (!dir.modifiers) {\n      // $flow-disable-line\n      dir.modifiers = emptyModifiers;\n    }\n    res[getRawDirName(dir)] = dir;\n    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);\n  }\n  // $flow-disable-line\n  return res\n}\n\nfunction getRawDirName (dir) {\n  return dir.rawName || ((dir.name) + \".\" + (Object.keys(dir.modifiers || {}).join('.')))\n}\n\nfunction callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {\n  var fn = dir.def && dir.def[hook];\n  if (fn) {\n    try {\n      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);\n    } catch (e) {\n      handleError(e, vnode.context, (\"directive \" + (dir.name) + \" \" + hook + \" hook\"));\n    }\n  }\n}\n\nvar baseModules = [\n  ref,\n  directives\n]\n\n/*  */\n\nfunction updateAttrs (oldVnode, vnode) {\n  var opts = vnode.componentOptions;\n  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {\n    return\n  }\n  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {\n    return\n  }\n  var key, cur, old;\n  var elm = vnode.elm;\n  var oldAttrs = oldVnode.data.attrs || {};\n  var attrs = vnode.data.attrs || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(attrs.__ob__)) {\n    attrs = vnode.data.attrs = extend({}, attrs);\n  }\n\n  for (key in attrs) {\n    cur = attrs[key];\n    old = oldAttrs[key];\n    if (old !== cur) {\n      setAttr(elm, key, cur);\n    }\n  }\n  // #4391: in IE9, setting type can reset value for input[type=radio]\n  // #6666: IE/Edge forces progress value down to 1 before setting a max\n  /* istanbul ignore if */\n  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {\n    setAttr(elm, 'value', attrs.value);\n  }\n  for (key in oldAttrs) {\n    if (isUndef(attrs[key])) {\n      if (isXlink(key)) {\n        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));\n      } else if (!isEnumeratedAttr(key)) {\n        elm.removeAttribute(key);\n      }\n    }\n  }\n}\n\nfunction setAttr (el, key, value) {\n  if (el.tagName.indexOf('-') > -1) {\n    baseSetAttr(el, key, value);\n  } else if (isBooleanAttr(key)) {\n    // set attribute for blank value\n    // e.g. <option disabled>Select one</option>\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      // technically allowfullscreen is a boolean attribute for <iframe>,\n      // but Flash expects a value of \"true\" when used on <embed> tag\n      value = key === 'allowfullscreen' && el.tagName === 'EMBED'\n        ? 'true'\n        : key;\n      el.setAttribute(key, value);\n    }\n  } else if (isEnumeratedAttr(key)) {\n    el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');\n  } else if (isXlink(key)) {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttributeNS(xlinkNS, getXlinkProp(key));\n    } else {\n      el.setAttributeNS(xlinkNS, key, value);\n    }\n  } else {\n    baseSetAttr(el, key, value);\n  }\n}\n\nfunction baseSetAttr (el, key, value) {\n  if (isFalsyAttrValue(value)) {\n    el.removeAttribute(key);\n  } else {\n    // #7138: IE10 & 11 fires input event when setting placeholder on\n    // <textarea>... block the first input event and remove the blocker\n    // immediately.\n    /* istanbul ignore if */\n    if (\n      isIE && !isIE9 &&\n      el.tagName === 'TEXTAREA' &&\n      key === 'placeholder' && !el.__ieph\n    ) {\n      var blocker = function (e) {\n        e.stopImmediatePropagation();\n        el.removeEventListener('input', blocker);\n      };\n      el.addEventListener('input', blocker);\n      // $flow-disable-line\n      el.__ieph = true; /* IE placeholder patched */\n    }\n    el.setAttribute(key, value);\n  }\n}\n\nvar attrs = {\n  create: updateAttrs,\n  update: updateAttrs\n}\n\n/*  */\n\nfunction updateClass (oldVnode, vnode) {\n  var el = vnode.elm;\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n  if (\n    isUndef(data.staticClass) &&\n    isUndef(data.class) && (\n      isUndef(oldData) || (\n        isUndef(oldData.staticClass) &&\n        isUndef(oldData.class)\n      )\n    )\n  ) {\n    return\n  }\n\n  var cls = genClassForVnode(vnode);\n\n  // handle transition classes\n  var transitionClass = el._transitionClasses;\n  if (isDef(transitionClass)) {\n    cls = concat(cls, stringifyClass(transitionClass));\n  }\n\n  // set the class\n  if (cls !== el._prevClass) {\n    el.setAttribute('class', cls);\n    el._prevClass = cls;\n  }\n}\n\nvar klass = {\n  create: updateClass,\n  update: updateClass\n}\n\n/*  */\n\nvar validDivisionCharRE = /[\\w).+\\-_$\\]]/;\n\nfunction parseFilters (exp) {\n  var inSingle = false;\n  var inDouble = false;\n  var inTemplateString = false;\n  var inRegex = false;\n  var curly = 0;\n  var square = 0;\n  var paren = 0;\n  var lastFilterIndex = 0;\n  var c, prev, i, expression, filters;\n\n  for (i = 0; i < exp.length; i++) {\n    prev = c;\n    c = exp.charCodeAt(i);\n    if (inSingle) {\n      if (c === 0x27 && prev !== 0x5C) { inSingle = false; }\n    } else if (inDouble) {\n      if (c === 0x22 && prev !== 0x5C) { inDouble = false; }\n    } else if (inTemplateString) {\n      if (c === 0x60 && prev !== 0x5C) { inTemplateString = false; }\n    } else if (inRegex) {\n      if (c === 0x2f && prev !== 0x5C) { inRegex = false; }\n    } else if (\n      c === 0x7C && // pipe\n      exp.charCodeAt(i + 1) !== 0x7C &&\n      exp.charCodeAt(i - 1) !== 0x7C &&\n      !curly && !square && !paren\n    ) {\n      if (expression === undefined) {\n        // first filter, end of expression\n        lastFilterIndex = i + 1;\n        expression = exp.slice(0, i).trim();\n      } else {\n        pushFilter();\n      }\n    } else {\n      switch (c) {\n        case 0x22: inDouble = true; break         // \"\n        case 0x27: inSingle = true; break         // '\n        case 0x60: inTemplateString = true; break // `\n        case 0x28: paren++; break                 // (\n        case 0x29: paren--; break                 // )\n        case 0x5B: square++; break                // [\n        case 0x5D: square--; break                // ]\n        case 0x7B: curly++; break                 // {\n        case 0x7D: curly--; break                 // }\n      }\n      if (c === 0x2f) { // /\n        var j = i - 1;\n        var p = (void 0);\n        // find first non-whitespace prev char\n        for (; j >= 0; j--) {\n          p = exp.charAt(j);\n          if (p !== ' ') { break }\n        }\n        if (!p || !validDivisionCharRE.test(p)) {\n          inRegex = true;\n        }\n      }\n    }\n  }\n\n  if (expression === undefined) {\n    expression = exp.slice(0, i).trim();\n  } else if (lastFilterIndex !== 0) {\n    pushFilter();\n  }\n\n  function pushFilter () {\n    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());\n    lastFilterIndex = i + 1;\n  }\n\n  if (filters) {\n    for (i = 0; i < filters.length; i++) {\n      expression = wrapFilter(expression, filters[i]);\n    }\n  }\n\n  return expression\n}\n\nfunction wrapFilter (exp, filter) {\n  var i = filter.indexOf('(');\n  if (i < 0) {\n    // _f: resolveFilter\n    return (\"_f(\\\"\" + filter + \"\\\")(\" + exp + \")\")\n  } else {\n    var name = filter.slice(0, i);\n    var args = filter.slice(i + 1);\n    return (\"_f(\\\"\" + name + \"\\\")(\" + exp + (args !== ')' ? ',' + args : args))\n  }\n}\n\n/*  */\n\nfunction baseWarn (msg) {\n  console.error((\"[Vue compiler]: \" + msg));\n}\n\nfunction pluckModuleFunction (\n  modules,\n  key\n) {\n  return modules\n    ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; })\n    : []\n}\n\nfunction addProp (el, name, value) {\n  (el.props || (el.props = [])).push({ name: name, value: value });\n  el.plain = false;\n}\n\nfunction addAttr (el, name, value) {\n  (el.attrs || (el.attrs = [])).push({ name: name, value: value });\n  el.plain = false;\n}\n\n// add a raw attr (use this in preTransforms)\nfunction addRawAttr (el, name, value) {\n  el.attrsMap[name] = value;\n  el.attrsList.push({ name: name, value: value });\n}\n\nfunction addDirective (\n  el,\n  name,\n  rawName,\n  value,\n  arg,\n  modifiers\n) {\n  (el.directives || (el.directives = [])).push({ name: name, rawName: rawName, value: value, arg: arg, modifiers: modifiers });\n  el.plain = false;\n}\n\nfunction addHandler (\n  el,\n  name,\n  value,\n  modifiers,\n  important,\n  warn\n) {\n  modifiers = modifiers || emptyObject;\n  // warn prevent and passive modifier\n  /* istanbul ignore if */\n  if (\n    \"development\" !== 'production' && warn &&\n    modifiers.prevent && modifiers.passive\n  ) {\n    warn(\n      'passive and prevent can\\'t be used together. ' +\n      'Passive handler can\\'t prevent default event.'\n    );\n  }\n\n  // check capture modifier\n  if (modifiers.capture) {\n    delete modifiers.capture;\n    name = '!' + name; // mark the event as captured\n  }\n  if (modifiers.once) {\n    delete modifiers.once;\n    name = '~' + name; // mark the event as once\n  }\n  /* istanbul ignore if */\n  if (modifiers.passive) {\n    delete modifiers.passive;\n    name = '&' + name; // mark the event as passive\n  }\n\n  // normalize click.right and click.middle since they don't actually fire\n  // this is technically browser-specific, but at least for now browsers are\n  // the only target envs that have right/middle clicks.\n  if (name === 'click') {\n    if (modifiers.right) {\n      name = 'contextmenu';\n      delete modifiers.right;\n    } else if (modifiers.middle) {\n      name = 'mouseup';\n    }\n  }\n\n  var events;\n  if (modifiers.native) {\n    delete modifiers.native;\n    events = el.nativeEvents || (el.nativeEvents = {});\n  } else {\n    events = el.events || (el.events = {});\n  }\n\n  var newHandler = {\n    value: value.trim()\n  };\n  if (modifiers !== emptyObject) {\n    newHandler.modifiers = modifiers;\n  }\n\n  var handlers = events[name];\n  /* istanbul ignore if */\n  if (Array.isArray(handlers)) {\n    important ? handlers.unshift(newHandler) : handlers.push(newHandler);\n  } else if (handlers) {\n    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];\n  } else {\n    events[name] = newHandler;\n  }\n\n  el.plain = false;\n}\n\nfunction getBindingAttr (\n  el,\n  name,\n  getStatic\n) {\n  var dynamicValue =\n    getAndRemoveAttr(el, ':' + name) ||\n    getAndRemoveAttr(el, 'v-bind:' + name);\n  if (dynamicValue != null) {\n    return parseFilters(dynamicValue)\n  } else if (getStatic !== false) {\n    var staticValue = getAndRemoveAttr(el, name);\n    if (staticValue != null) {\n      return JSON.stringify(staticValue)\n    }\n  }\n}\n\n// note: this only removes the attr from the Array (attrsList) so that it\n// doesn't get processed by processAttrs.\n// By default it does NOT remove it from the map (attrsMap) because the map is\n// needed during codegen.\nfunction getAndRemoveAttr (\n  el,\n  name,\n  removeFromMap\n) {\n  var val;\n  if ((val = el.attrsMap[name]) != null) {\n    var list = el.attrsList;\n    for (var i = 0, l = list.length; i < l; i++) {\n      if (list[i].name === name) {\n        list.splice(i, 1);\n        break\n      }\n    }\n  }\n  if (removeFromMap) {\n    delete el.attrsMap[name];\n  }\n  return val\n}\n\n/*  */\n\n/**\n * Cross-platform code generation for component v-model\n */\nfunction genComponentModel (\n  el,\n  value,\n  modifiers\n) {\n  var ref = modifiers || {};\n  var number = ref.number;\n  var trim = ref.trim;\n\n  var baseValueExpression = '$$v';\n  var valueExpression = baseValueExpression;\n  if (trim) {\n    valueExpression =\n      \"(typeof \" + baseValueExpression + \" === 'string'\" +\n      \"? \" + baseValueExpression + \".trim()\" +\n      \": \" + baseValueExpression + \")\";\n  }\n  if (number) {\n    valueExpression = \"_n(\" + valueExpression + \")\";\n  }\n  var assignment = genAssignmentCode(value, valueExpression);\n\n  el.model = {\n    value: (\"(\" + value + \")\"),\n    expression: (\"\\\"\" + value + \"\\\"\"),\n    callback: (\"function (\" + baseValueExpression + \") {\" + assignment + \"}\")\n  };\n}\n\n/**\n * Cross-platform codegen helper for generating v-model value assignment code.\n */\nfunction genAssignmentCode (\n  value,\n  assignment\n) {\n  var res = parseModel(value);\n  if (res.key === null) {\n    return (value + \"=\" + assignment)\n  } else {\n    return (\"$set(\" + (res.exp) + \", \" + (res.key) + \", \" + assignment + \")\")\n  }\n}\n\n/**\n * Parse a v-model expression into a base path and a final key segment.\n * Handles both dot-path and possible square brackets.\n *\n * Possible cases:\n *\n * - test\n * - test[key]\n * - test[test1[key]]\n * - test[\"a\"][key]\n * - xxx.test[a[a].test1[key]]\n * - test.xxx.a[\"asa\"][test1[key]]\n *\n */\n\nvar len;\nvar str;\nvar chr;\nvar index$1;\nvar expressionPos;\nvar expressionEndPos;\n\n\n\nfunction parseModel (val) {\n  // Fix https://github.com/vuejs/vue/pull/7730\n  // allow v-model=\"obj.val \" (trailing whitespace)\n  val = val.trim();\n  len = val.length;\n\n  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {\n    index$1 = val.lastIndexOf('.');\n    if (index$1 > -1) {\n      return {\n        exp: val.slice(0, index$1),\n        key: '\"' + val.slice(index$1 + 1) + '\"'\n      }\n    } else {\n      return {\n        exp: val,\n        key: null\n      }\n    }\n  }\n\n  str = val;\n  index$1 = expressionPos = expressionEndPos = 0;\n\n  while (!eof()) {\n    chr = next();\n    /* istanbul ignore if */\n    if (isStringStart(chr)) {\n      parseString(chr);\n    } else if (chr === 0x5B) {\n      parseBracket(chr);\n    }\n  }\n\n  return {\n    exp: val.slice(0, expressionPos),\n    key: val.slice(expressionPos + 1, expressionEndPos)\n  }\n}\n\nfunction next () {\n  return str.charCodeAt(++index$1)\n}\n\nfunction eof () {\n  return index$1 >= len\n}\n\nfunction isStringStart (chr) {\n  return chr === 0x22 || chr === 0x27\n}\n\nfunction parseBracket (chr) {\n  var inBracket = 1;\n  expressionPos = index$1;\n  while (!eof()) {\n    chr = next();\n    if (isStringStart(chr)) {\n      parseString(chr);\n      continue\n    }\n    if (chr === 0x5B) { inBracket++; }\n    if (chr === 0x5D) { inBracket--; }\n    if (inBracket === 0) {\n      expressionEndPos = index$1;\n      break\n    }\n  }\n}\n\nfunction parseString (chr) {\n  var stringQuote = chr;\n  while (!eof()) {\n    chr = next();\n    if (chr === stringQuote) {\n      break\n    }\n  }\n}\n\n/*  */\n\nvar warn$1;\n\n// in some cases, the event used has to be determined at runtime\n// so we used some reserved tokens during compile.\nvar RANGE_TOKEN = '__r';\nvar CHECKBOX_RADIO_TOKEN = '__c';\n\nfunction model (\n  el,\n  dir,\n  _warn\n) {\n  warn$1 = _warn;\n  var value = dir.value;\n  var modifiers = dir.modifiers;\n  var tag = el.tag;\n  var type = el.attrsMap.type;\n\n  if (true) {\n    // inputs with type=\"file\" are read only and setting the input's\n    // value will throw an error.\n    if (tag === 'input' && type === 'file') {\n      warn$1(\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\" type=\\\"file\\\">:\\n\" +\n        \"File inputs are read only. Use a v-on:change listener instead.\"\n      );\n    }\n  }\n\n  if (el.component) {\n    genComponentModel(el, value, modifiers);\n    // component v-model doesn't need extra runtime\n    return false\n  } else if (tag === 'select') {\n    genSelect(el, value, modifiers);\n  } else if (tag === 'input' && type === 'checkbox') {\n    genCheckboxModel(el, value, modifiers);\n  } else if (tag === 'input' && type === 'radio') {\n    genRadioModel(el, value, modifiers);\n  } else if (tag === 'input' || tag === 'textarea') {\n    genDefaultModel(el, value, modifiers);\n  } else if (!config.isReservedTag(tag)) {\n    genComponentModel(el, value, modifiers);\n    // component v-model doesn't need extra runtime\n    return false\n  } else if (true) {\n    warn$1(\n      \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\n      \"v-model is not supported on this element type. \" +\n      'If you are working with contenteditable, it\\'s recommended to ' +\n      'wrap a library dedicated for that purpose inside a custom component.'\n    );\n  }\n\n  // ensure runtime directive metadata\n  return true\n}\n\nfunction genCheckboxModel (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';\n  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';\n  addProp(el, 'checked',\n    \"Array.isArray(\" + value + \")\" +\n    \"?_i(\" + value + \",\" + valueBinding + \")>-1\" + (\n      trueValueBinding === 'true'\n        ? (\":(\" + value + \")\")\n        : (\":_q(\" + value + \",\" + trueValueBinding + \")\")\n    )\n  );\n  addHandler(el, 'change',\n    \"var $$a=\" + value + \",\" +\n        '$$el=$event.target,' +\n        \"$$c=$$el.checked?(\" + trueValueBinding + \"):(\" + falseValueBinding + \");\" +\n    'if(Array.isArray($$a)){' +\n      \"var $$v=\" + (number ? '_n(' + valueBinding + ')' : valueBinding) + \",\" +\n          '$$i=_i($$a,$$v);' +\n      \"if($$el.checked){$$i<0&&(\" + (genAssignmentCode(value, '$$a.concat([$$v])')) + \")}\" +\n      \"else{$$i>-1&&(\" + (genAssignmentCode(value, '$$a.slice(0,$$i).concat($$a.slice($$i+1))')) + \")}\" +\n    \"}else{\" + (genAssignmentCode(value, '$$c')) + \"}\",\n    null, true\n  );\n}\n\nfunction genRadioModel (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  valueBinding = number ? (\"_n(\" + valueBinding + \")\") : valueBinding;\n  addProp(el, 'checked', (\"_q(\" + value + \",\" + valueBinding + \")\"));\n  addHandler(el, 'change', genAssignmentCode(value, valueBinding), null, true);\n}\n\nfunction genSelect (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var selectedVal = \"Array.prototype.filter\" +\n    \".call($event.target.options,function(o){return o.selected})\" +\n    \".map(function(o){var val = \\\"_value\\\" in o ? o._value : o.value;\" +\n    \"return \" + (number ? '_n(val)' : 'val') + \"})\";\n\n  var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';\n  var code = \"var $$selectedVal = \" + selectedVal + \";\";\n  code = code + \" \" + (genAssignmentCode(value, assignment));\n  addHandler(el, 'change', code, null, true);\n}\n\nfunction genDefaultModel (\n  el,\n  value,\n  modifiers\n) {\n  var type = el.attrsMap.type;\n\n  // warn if v-bind:value conflicts with v-model\n  // except for inputs with v-bind:type\n  if (true) {\n    var value$1 = el.attrsMap['v-bind:value'] || el.attrsMap[':value'];\n    var typeBinding = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];\n    if (value$1 && !typeBinding) {\n      var binding = el.attrsMap['v-bind:value'] ? 'v-bind:value' : ':value';\n      warn$1(\n        binding + \"=\\\"\" + value$1 + \"\\\" conflicts with v-model on the same element \" +\n        'because the latter already expands to a value binding internally'\n      );\n    }\n  }\n\n  var ref = modifiers || {};\n  var lazy = ref.lazy;\n  var number = ref.number;\n  var trim = ref.trim;\n  var needCompositionGuard = !lazy && type !== 'range';\n  var event = lazy\n    ? 'change'\n    : type === 'range'\n      ? RANGE_TOKEN\n      : 'input';\n\n  var valueExpression = '$event.target.value';\n  if (trim) {\n    valueExpression = \"$event.target.value.trim()\";\n  }\n  if (number) {\n    valueExpression = \"_n(\" + valueExpression + \")\";\n  }\n\n  var code = genAssignmentCode(value, valueExpression);\n  if (needCompositionGuard) {\n    code = \"if($event.target.composing)return;\" + code;\n  }\n\n  addProp(el, 'value', (\"(\" + value + \")\"));\n  addHandler(el, event, code, null, true);\n  if (trim || number) {\n    addHandler(el, 'blur', '$forceUpdate()');\n  }\n}\n\n/*  */\n\n// normalize v-model event tokens that can only be determined at runtime.\n// it's important to place the event as the first in the array because\n// the whole point is ensuring the v-model callback gets called before\n// user-attached handlers.\nfunction normalizeEvents (on) {\n  /* istanbul ignore if */\n  if (isDef(on[RANGE_TOKEN])) {\n    // IE input[type=range] only supports `change` event\n    var event = isIE ? 'change' : 'input';\n    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);\n    delete on[RANGE_TOKEN];\n  }\n  // This was originally intended to fix #4521 but no longer necessary\n  // after 2.5. Keeping it for backwards compat with generated code from < 2.4\n  /* istanbul ignore if */\n  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {\n    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);\n    delete on[CHECKBOX_RADIO_TOKEN];\n  }\n}\n\nvar target$1;\n\nfunction createOnceHandler (handler, event, capture) {\n  var _target = target$1; // save current target element in closure\n  return function onceHandler () {\n    var res = handler.apply(null, arguments);\n    if (res !== null) {\n      remove$2(event, onceHandler, capture, _target);\n    }\n  }\n}\n\nfunction add$1 (\n  event,\n  handler,\n  once$$1,\n  capture,\n  passive\n) {\n  handler = withMacroTask(handler);\n  if (once$$1) { handler = createOnceHandler(handler, event, capture); }\n  target$1.addEventListener(\n    event,\n    handler,\n    supportsPassive\n      ? { capture: capture, passive: passive }\n      : capture\n  );\n}\n\nfunction remove$2 (\n  event,\n  handler,\n  capture,\n  _target\n) {\n  (_target || target$1).removeEventListener(\n    event,\n    handler._withTask || handler,\n    capture\n  );\n}\n\nfunction updateDOMListeners (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {\n    return\n  }\n  var on = vnode.data.on || {};\n  var oldOn = oldVnode.data.on || {};\n  target$1 = vnode.elm;\n  normalizeEvents(on);\n  updateListeners(on, oldOn, add$1, remove$2, vnode.context);\n  target$1 = undefined;\n}\n\nvar events = {\n  create: updateDOMListeners,\n  update: updateDOMListeners\n}\n\n/*  */\n\nfunction updateDOMProps (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {\n    return\n  }\n  var key, cur;\n  var elm = vnode.elm;\n  var oldProps = oldVnode.data.domProps || {};\n  var props = vnode.data.domProps || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(props.__ob__)) {\n    props = vnode.data.domProps = extend({}, props);\n  }\n\n  for (key in oldProps) {\n    if (isUndef(props[key])) {\n      elm[key] = '';\n    }\n  }\n  for (key in props) {\n    cur = props[key];\n    // ignore children if the node has textContent or innerHTML,\n    // as these will throw away existing DOM nodes and cause removal errors\n    // on subsequent patches (#3360)\n    if (key === 'textContent' || key === 'innerHTML') {\n      if (vnode.children) { vnode.children.length = 0; }\n      if (cur === oldProps[key]) { continue }\n      // #6601 work around Chrome version <= 55 bug where single textNode\n      // replaced by innerHTML/textContent retains its parentNode property\n      if (elm.childNodes.length === 1) {\n        elm.removeChild(elm.childNodes[0]);\n      }\n    }\n\n    if (key === 'value') {\n      // store value as _value as well since\n      // non-string values will be stringified\n      elm._value = cur;\n      // avoid resetting cursor position when value is the same\n      var strCur = isUndef(cur) ? '' : String(cur);\n      if (shouldUpdateValue(elm, strCur)) {\n        elm.value = strCur;\n      }\n    } else {\n      elm[key] = cur;\n    }\n  }\n}\n\n// check platforms/web/util/attrs.js acceptValue\n\n\nfunction shouldUpdateValue (elm, checkVal) {\n  return (!elm.composing && (\n    elm.tagName === 'OPTION' ||\n    isNotInFocusAndDirty(elm, checkVal) ||\n    isDirtyWithModifiers(elm, checkVal)\n  ))\n}\n\nfunction isNotInFocusAndDirty (elm, checkVal) {\n  // return true when textbox (.number and .trim) loses focus and its value is\n  // not equal to the updated value\n  var notInFocus = true;\n  // #6157\n  // work around IE bug when accessing document.activeElement in an iframe\n  try { notInFocus = document.activeElement !== elm; } catch (e) {}\n  return notInFocus && elm.value !== checkVal\n}\n\nfunction isDirtyWithModifiers (elm, newVal) {\n  var value = elm.value;\n  var modifiers = elm._vModifiers; // injected by v-model runtime\n  if (isDef(modifiers)) {\n    if (modifiers.lazy) {\n      // inputs with lazy should only be updated when not in focus\n      return false\n    }\n    if (modifiers.number) {\n      return toNumber(value) !== toNumber(newVal)\n    }\n    if (modifiers.trim) {\n      return value.trim() !== newVal.trim()\n    }\n  }\n  return value !== newVal\n}\n\nvar domProps = {\n  create: updateDOMProps,\n  update: updateDOMProps\n}\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// merge static and dynamic style data on the same vnode\nfunction normalizeStyleData (data) {\n  var style = normalizeStyleBinding(data.style);\n  // static style is pre-processed into an object during compilation\n  // and is always a fresh object, so it's safe to merge into it\n  return data.staticStyle\n    ? extend(data.staticStyle, style)\n    : style\n}\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/**\n * parent component style should be after child's\n * so that parent component's style could override it\n */\nfunction getStyle (vnode, checkChild) {\n  var res = {};\n  var styleData;\n\n  if (checkChild) {\n    var childNode = vnode;\n    while (childNode.componentInstance) {\n      childNode = childNode.componentInstance._vnode;\n      if (\n        childNode && childNode.data &&\n        (styleData = normalizeStyleData(childNode.data))\n      ) {\n        extend(res, styleData);\n      }\n    }\n  }\n\n  if ((styleData = normalizeStyleData(vnode.data))) {\n    extend(res, styleData);\n  }\n\n  var parentNode = vnode;\n  while ((parentNode = parentNode.parent)) {\n    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {\n      extend(res, styleData);\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar cssVarRE = /^--/;\nvar importantRE = /\\s*!important$/;\nvar setProp = function (el, name, val) {\n  /* istanbul ignore if */\n  if (cssVarRE.test(name)) {\n    el.style.setProperty(name, val);\n  } else if (importantRE.test(val)) {\n    el.style.setProperty(name, val.replace(importantRE, ''), 'important');\n  } else {\n    var normalizedName = normalize(name);\n    if (Array.isArray(val)) {\n      // Support values array created by autoprefixer, e.g.\n      // {display: [\"-webkit-box\", \"-ms-flexbox\", \"flex\"]}\n      // Set them one by one, and the browser will only set those it can recognize\n      for (var i = 0, len = val.length; i < len; i++) {\n        el.style[normalizedName] = val[i];\n      }\n    } else {\n      el.style[normalizedName] = val;\n    }\n  }\n};\n\nvar vendorNames = ['Webkit', 'Moz', 'ms'];\n\nvar emptyStyle;\nvar normalize = cached(function (prop) {\n  emptyStyle = emptyStyle || document.createElement('div').style;\n  prop = camelize(prop);\n  if (prop !== 'filter' && (prop in emptyStyle)) {\n    return prop\n  }\n  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);\n  for (var i = 0; i < vendorNames.length; i++) {\n    var name = vendorNames[i] + capName;\n    if (name in emptyStyle) {\n      return name\n    }\n  }\n});\n\nfunction updateStyle (oldVnode, vnode) {\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n\n  if (isUndef(data.staticStyle) && isUndef(data.style) &&\n    isUndef(oldData.staticStyle) && isUndef(oldData.style)\n  ) {\n    return\n  }\n\n  var cur, name;\n  var el = vnode.elm;\n  var oldStaticStyle = oldData.staticStyle;\n  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};\n\n  // if static style exists, stylebinding already merged into it when doing normalizeStyleData\n  var oldStyle = oldStaticStyle || oldStyleBinding;\n\n  var style = normalizeStyleBinding(vnode.data.style) || {};\n\n  // store normalized style under a different key for next diff\n  // make sure to clone it if it's reactive, since the user likely wants\n  // to mutate it.\n  vnode.data.normalizedStyle = isDef(style.__ob__)\n    ? extend({}, style)\n    : style;\n\n  var newStyle = getStyle(vnode, true);\n\n  for (name in oldStyle) {\n    if (isUndef(newStyle[name])) {\n      setProp(el, name, '');\n    }\n  }\n  for (name in newStyle) {\n    cur = newStyle[name];\n    if (cur !== oldStyle[name]) {\n      // ie9 setting to null has no effect, must use empty string\n      setProp(el, name, cur == null ? '' : cur);\n    }\n  }\n}\n\nvar style = {\n  create: updateStyle,\n  update: updateStyle\n}\n\n/*  */\n\n/**\n * Add class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction addClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.add(c); });\n    } else {\n      el.classList.add(cls);\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    if (cur.indexOf(' ' + cls + ' ') < 0) {\n      el.setAttribute('class', (cur + cls).trim());\n    }\n  }\n}\n\n/**\n * Remove class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction removeClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.remove(c); });\n    } else {\n      el.classList.remove(cls);\n    }\n    if (!el.classList.length) {\n      el.removeAttribute('class');\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    var tar = ' ' + cls + ' ';\n    while (cur.indexOf(tar) >= 0) {\n      cur = cur.replace(tar, ' ');\n    }\n    cur = cur.trim();\n    if (cur) {\n      el.setAttribute('class', cur);\n    } else {\n      el.removeAttribute('class');\n    }\n  }\n}\n\n/*  */\n\nfunction resolveTransition (def) {\n  if (!def) {\n    return\n  }\n  /* istanbul ignore else */\n  if (typeof def === 'object') {\n    var res = {};\n    if (def.css !== false) {\n      extend(res, autoCssTransition(def.name || 'v'));\n    }\n    extend(res, def);\n    return res\n  } else if (typeof def === 'string') {\n    return autoCssTransition(def)\n  }\n}\n\nvar autoCssTransition = cached(function (name) {\n  return {\n    enterClass: (name + \"-enter\"),\n    enterToClass: (name + \"-enter-to\"),\n    enterActiveClass: (name + \"-enter-active\"),\n    leaveClass: (name + \"-leave\"),\n    leaveToClass: (name + \"-leave-to\"),\n    leaveActiveClass: (name + \"-leave-active\")\n  }\n});\n\nvar hasTransition = inBrowser && !isIE9;\nvar TRANSITION = 'transition';\nvar ANIMATION = 'animation';\n\n// Transition property/event sniffing\nvar transitionProp = 'transition';\nvar transitionEndEvent = 'transitionend';\nvar animationProp = 'animation';\nvar animationEndEvent = 'animationend';\nif (hasTransition) {\n  /* istanbul ignore if */\n  if (window.ontransitionend === undefined &&\n    window.onwebkittransitionend !== undefined\n  ) {\n    transitionProp = 'WebkitTransition';\n    transitionEndEvent = 'webkitTransitionEnd';\n  }\n  if (window.onanimationend === undefined &&\n    window.onwebkitanimationend !== undefined\n  ) {\n    animationProp = 'WebkitAnimation';\n    animationEndEvent = 'webkitAnimationEnd';\n  }\n}\n\n// binding to window is necessary to make hot reload work in IE in strict mode\nvar raf = inBrowser\n  ? window.requestAnimationFrame\n    ? window.requestAnimationFrame.bind(window)\n    : setTimeout\n  : /* istanbul ignore next */ function (fn) { return fn(); };\n\nfunction nextFrame (fn) {\n  raf(function () {\n    raf(fn);\n  });\n}\n\nfunction addTransitionClass (el, cls) {\n  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);\n  if (transitionClasses.indexOf(cls) < 0) {\n    transitionClasses.push(cls);\n    addClass(el, cls);\n  }\n}\n\nfunction removeTransitionClass (el, cls) {\n  if (el._transitionClasses) {\n    remove(el._transitionClasses, cls);\n  }\n  removeClass(el, cls);\n}\n\nfunction whenTransitionEnds (\n  el,\n  expectedType,\n  cb\n) {\n  var ref = getTransitionInfo(el, expectedType);\n  var type = ref.type;\n  var timeout = ref.timeout;\n  var propCount = ref.propCount;\n  if (!type) { return cb() }\n  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;\n  var ended = 0;\n  var end = function () {\n    el.removeEventListener(event, onEnd);\n    cb();\n  };\n  var onEnd = function (e) {\n    if (e.target === el) {\n      if (++ended >= propCount) {\n        end();\n      }\n    }\n  };\n  setTimeout(function () {\n    if (ended < propCount) {\n      end();\n    }\n  }, timeout + 1);\n  el.addEventListener(event, onEnd);\n}\n\nvar transformRE = /\\b(transform|all)(,|$)/;\n\nfunction getTransitionInfo (el, expectedType) {\n  var styles = window.getComputedStyle(el);\n  var transitionDelays = styles[transitionProp + 'Delay'].split(', ');\n  var transitionDurations = styles[transitionProp + 'Duration'].split(', ');\n  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);\n  var animationDelays = styles[animationProp + 'Delay'].split(', ');\n  var animationDurations = styles[animationProp + 'Duration'].split(', ');\n  var animationTimeout = getTimeout(animationDelays, animationDurations);\n\n  var type;\n  var timeout = 0;\n  var propCount = 0;\n  /* istanbul ignore if */\n  if (expectedType === TRANSITION) {\n    if (transitionTimeout > 0) {\n      type = TRANSITION;\n      timeout = transitionTimeout;\n      propCount = transitionDurations.length;\n    }\n  } else if (expectedType === ANIMATION) {\n    if (animationTimeout > 0) {\n      type = ANIMATION;\n      timeout = animationTimeout;\n      propCount = animationDurations.length;\n    }\n  } else {\n    timeout = Math.max(transitionTimeout, animationTimeout);\n    type = timeout > 0\n      ? transitionTimeout > animationTimeout\n        ? TRANSITION\n        : ANIMATION\n      : null;\n    propCount = type\n      ? type === TRANSITION\n        ? transitionDurations.length\n        : animationDurations.length\n      : 0;\n  }\n  var hasTransform =\n    type === TRANSITION &&\n    transformRE.test(styles[transitionProp + 'Property']);\n  return {\n    type: type,\n    timeout: timeout,\n    propCount: propCount,\n    hasTransform: hasTransform\n  }\n}\n\nfunction getTimeout (delays, durations) {\n  /* istanbul ignore next */\n  while (delays.length < durations.length) {\n    delays = delays.concat(delays);\n  }\n\n  return Math.max.apply(null, durations.map(function (d, i) {\n    return toMs(d) + toMs(delays[i])\n  }))\n}\n\nfunction toMs (s) {\n  return Number(s.slice(0, -1)) * 1000\n}\n\n/*  */\n\nfunction enter (vnode, toggleDisplay) {\n  var el = vnode.elm;\n\n  // call leave callback now\n  if (isDef(el._leaveCb)) {\n    el._leaveCb.cancelled = true;\n    el._leaveCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data)) {\n    return\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._enterCb) || el.nodeType !== 1) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var enterClass = data.enterClass;\n  var enterToClass = data.enterToClass;\n  var enterActiveClass = data.enterActiveClass;\n  var appearClass = data.appearClass;\n  var appearToClass = data.appearToClass;\n  var appearActiveClass = data.appearActiveClass;\n  var beforeEnter = data.beforeEnter;\n  var enter = data.enter;\n  var afterEnter = data.afterEnter;\n  var enterCancelled = data.enterCancelled;\n  var beforeAppear = data.beforeAppear;\n  var appear = data.appear;\n  var afterAppear = data.afterAppear;\n  var appearCancelled = data.appearCancelled;\n  var duration = data.duration;\n\n  // activeInstance will always be the <transition> component managing this\n  // transition. One edge case to check is when the <transition> is placed\n  // as the root node of a child component. In that case we need to check\n  // <transition>'s parent for appear check.\n  var context = activeInstance;\n  var transitionNode = activeInstance.$vnode;\n  while (transitionNode && transitionNode.parent) {\n    transitionNode = transitionNode.parent;\n    context = transitionNode.context;\n  }\n\n  var isAppear = !context._isMounted || !vnode.isRootInsert;\n\n  if (isAppear && !appear && appear !== '') {\n    return\n  }\n\n  var startClass = isAppear && appearClass\n    ? appearClass\n    : enterClass;\n  var activeClass = isAppear && appearActiveClass\n    ? appearActiveClass\n    : enterActiveClass;\n  var toClass = isAppear && appearToClass\n    ? appearToClass\n    : enterToClass;\n\n  var beforeEnterHook = isAppear\n    ? (beforeAppear || beforeEnter)\n    : beforeEnter;\n  var enterHook = isAppear\n    ? (typeof appear === 'function' ? appear : enter)\n    : enter;\n  var afterEnterHook = isAppear\n    ? (afterAppear || afterEnter)\n    : afterEnter;\n  var enterCancelledHook = isAppear\n    ? (appearCancelled || enterCancelled)\n    : enterCancelled;\n\n  var explicitEnterDuration = toNumber(\n    isObject(duration)\n      ? duration.enter\n      : duration\n  );\n\n  if (\"development\" !== 'production' && explicitEnterDuration != null) {\n    checkDuration(explicitEnterDuration, 'enter', vnode);\n  }\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(enterHook);\n\n  var cb = el._enterCb = once(function () {\n    if (expectsCSS) {\n      removeTransitionClass(el, toClass);\n      removeTransitionClass(el, activeClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, startClass);\n      }\n      enterCancelledHook && enterCancelledHook(el);\n    } else {\n      afterEnterHook && afterEnterHook(el);\n    }\n    el._enterCb = null;\n  });\n\n  if (!vnode.data.show) {\n    // remove pending leave element on enter by injecting an insert hook\n    mergeVNodeHook(vnode, 'insert', function () {\n      var parent = el.parentNode;\n      var pendingNode = parent && parent._pending && parent._pending[vnode.key];\n      if (pendingNode &&\n        pendingNode.tag === vnode.tag &&\n        pendingNode.elm._leaveCb\n      ) {\n        pendingNode.elm._leaveCb();\n      }\n      enterHook && enterHook(el, cb);\n    });\n  }\n\n  // start enter transition\n  beforeEnterHook && beforeEnterHook(el);\n  if (expectsCSS) {\n    addTransitionClass(el, startClass);\n    addTransitionClass(el, activeClass);\n    nextFrame(function () {\n      removeTransitionClass(el, startClass);\n      if (!cb.cancelled) {\n        addTransitionClass(el, toClass);\n        if (!userWantsControl) {\n          if (isValidDuration(explicitEnterDuration)) {\n            setTimeout(cb, explicitEnterDuration);\n          } else {\n            whenTransitionEnds(el, type, cb);\n          }\n        }\n      }\n    });\n  }\n\n  if (vnode.data.show) {\n    toggleDisplay && toggleDisplay();\n    enterHook && enterHook(el, cb);\n  }\n\n  if (!expectsCSS && !userWantsControl) {\n    cb();\n  }\n}\n\nfunction leave (vnode, rm) {\n  var el = vnode.elm;\n\n  // call enter callback now\n  if (isDef(el._enterCb)) {\n    el._enterCb.cancelled = true;\n    el._enterCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data) || el.nodeType !== 1) {\n    return rm()\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._leaveCb)) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var leaveClass = data.leaveClass;\n  var leaveToClass = data.leaveToClass;\n  var leaveActiveClass = data.leaveActiveClass;\n  var beforeLeave = data.beforeLeave;\n  var leave = data.leave;\n  var afterLeave = data.afterLeave;\n  var leaveCancelled = data.leaveCancelled;\n  var delayLeave = data.delayLeave;\n  var duration = data.duration;\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(leave);\n\n  var explicitLeaveDuration = toNumber(\n    isObject(duration)\n      ? duration.leave\n      : duration\n  );\n\n  if (\"development\" !== 'production' && isDef(explicitLeaveDuration)) {\n    checkDuration(explicitLeaveDuration, 'leave', vnode);\n  }\n\n  var cb = el._leaveCb = once(function () {\n    if (el.parentNode && el.parentNode._pending) {\n      el.parentNode._pending[vnode.key] = null;\n    }\n    if (expectsCSS) {\n      removeTransitionClass(el, leaveToClass);\n      removeTransitionClass(el, leaveActiveClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, leaveClass);\n      }\n      leaveCancelled && leaveCancelled(el);\n    } else {\n      rm();\n      afterLeave && afterLeave(el);\n    }\n    el._leaveCb = null;\n  });\n\n  if (delayLeave) {\n    delayLeave(performLeave);\n  } else {\n    performLeave();\n  }\n\n  function performLeave () {\n    // the delayed leave may have already been cancelled\n    if (cb.cancelled) {\n      return\n    }\n    // record leaving element\n    if (!vnode.data.show) {\n      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;\n    }\n    beforeLeave && beforeLeave(el);\n    if (expectsCSS) {\n      addTransitionClass(el, leaveClass);\n      addTransitionClass(el, leaveActiveClass);\n      nextFrame(function () {\n        removeTransitionClass(el, leaveClass);\n        if (!cb.cancelled) {\n          addTransitionClass(el, leaveToClass);\n          if (!userWantsControl) {\n            if (isValidDuration(explicitLeaveDuration)) {\n              setTimeout(cb, explicitLeaveDuration);\n            } else {\n              whenTransitionEnds(el, type, cb);\n            }\n          }\n        }\n      });\n    }\n    leave && leave(el, cb);\n    if (!expectsCSS && !userWantsControl) {\n      cb();\n    }\n  }\n}\n\n// only used in dev mode\nfunction checkDuration (val, name, vnode) {\n  if (typeof val !== 'number') {\n    warn(\n      \"<transition> explicit \" + name + \" duration is not a valid number - \" +\n      \"got \" + (JSON.stringify(val)) + \".\",\n      vnode.context\n    );\n  } else if (isNaN(val)) {\n    warn(\n      \"<transition> explicit \" + name + \" duration is NaN - \" +\n      'the duration expression might be incorrect.',\n      vnode.context\n    );\n  }\n}\n\nfunction isValidDuration (val) {\n  return typeof val === 'number' && !isNaN(val)\n}\n\n/**\n * Normalize a transition hook's argument length. The hook may be:\n * - a merged hook (invoker) with the original in .fns\n * - a wrapped component method (check ._length)\n * - a plain function (.length)\n */\nfunction getHookArgumentsLength (fn) {\n  if (isUndef(fn)) {\n    return false\n  }\n  var invokerFns = fn.fns;\n  if (isDef(invokerFns)) {\n    // invoker\n    return getHookArgumentsLength(\n      Array.isArray(invokerFns)\n        ? invokerFns[0]\n        : invokerFns\n    )\n  } else {\n    return (fn._length || fn.length) > 1\n  }\n}\n\nfunction _enter (_, vnode) {\n  if (vnode.data.show !== true) {\n    enter(vnode);\n  }\n}\n\nvar transition = inBrowser ? {\n  create: _enter,\n  activate: _enter,\n  remove: function remove$$1 (vnode, rm) {\n    /* istanbul ignore else */\n    if (vnode.data.show !== true) {\n      leave(vnode, rm);\n    } else {\n      rm();\n    }\n  }\n} : {}\n\nvar platformModules = [\n  attrs,\n  klass,\n  events,\n  domProps,\n  style,\n  transition\n]\n\n/*  */\n\n// the directive module should be applied last, after all\n// built-in modules have been applied.\nvar modules = platformModules.concat(baseModules);\n\nvar patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });\n\n/**\n * Not type checking this file because flow doesn't like attaching\n * properties to Elements.\n */\n\n/* istanbul ignore if */\nif (isIE9) {\n  // http://www.matts411.com/post/internet-explorer-9-oninput/\n  document.addEventListener('selectionchange', function () {\n    var el = document.activeElement;\n    if (el && el.vmodel) {\n      trigger(el, 'input');\n    }\n  });\n}\n\nvar directive = {\n  inserted: function inserted (el, binding, vnode, oldVnode) {\n    if (vnode.tag === 'select') {\n      // #6903\n      if (oldVnode.elm && !oldVnode.elm._vOptions) {\n        mergeVNodeHook(vnode, 'postpatch', function () {\n          directive.componentUpdated(el, binding, vnode);\n        });\n      } else {\n        setSelected(el, binding, vnode.context);\n      }\n      el._vOptions = [].map.call(el.options, getValue);\n    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {\n      el._vModifiers = binding.modifiers;\n      if (!binding.modifiers.lazy) {\n        el.addEventListener('compositionstart', onCompositionStart);\n        el.addEventListener('compositionend', onCompositionEnd);\n        // Safari < 10.2 & UIWebView doesn't fire compositionend when\n        // switching focus before confirming composition choice\n        // this also fixes the issue where some browsers e.g. iOS Chrome\n        // fires \"change\" instead of \"input\" on autocomplete.\n        el.addEventListener('change', onCompositionEnd);\n        /* istanbul ignore if */\n        if (isIE9) {\n          el.vmodel = true;\n        }\n      }\n    }\n  },\n\n  componentUpdated: function componentUpdated (el, binding, vnode) {\n    if (vnode.tag === 'select') {\n      setSelected(el, binding, vnode.context);\n      // in case the options rendered by v-for have changed,\n      // it's possible that the value is out-of-sync with the rendered options.\n      // detect such cases and filter out values that no longer has a matching\n      // option in the DOM.\n      var prevOptions = el._vOptions;\n      var curOptions = el._vOptions = [].map.call(el.options, getValue);\n      if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {\n        // trigger change event if\n        // no matching option found for at least one value\n        var needReset = el.multiple\n          ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })\n          : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);\n        if (needReset) {\n          trigger(el, 'change');\n        }\n      }\n    }\n  }\n};\n\nfunction setSelected (el, binding, vm) {\n  actuallySetSelected(el, binding, vm);\n  /* istanbul ignore if */\n  if (isIE || isEdge) {\n    setTimeout(function () {\n      actuallySetSelected(el, binding, vm);\n    }, 0);\n  }\n}\n\nfunction actuallySetSelected (el, binding, vm) {\n  var value = binding.value;\n  var isMultiple = el.multiple;\n  if (isMultiple && !Array.isArray(value)) {\n    \"development\" !== 'production' && warn(\n      \"<select multiple v-model=\\\"\" + (binding.expression) + \"\\\"> \" +\n      \"expects an Array value for its binding, but got \" + (Object.prototype.toString.call(value).slice(8, -1)),\n      vm\n    );\n    return\n  }\n  var selected, option;\n  for (var i = 0, l = el.options.length; i < l; i++) {\n    option = el.options[i];\n    if (isMultiple) {\n      selected = looseIndexOf(value, getValue(option)) > -1;\n      if (option.selected !== selected) {\n        option.selected = selected;\n      }\n    } else {\n      if (looseEqual(getValue(option), value)) {\n        if (el.selectedIndex !== i) {\n          el.selectedIndex = i;\n        }\n        return\n      }\n    }\n  }\n  if (!isMultiple) {\n    el.selectedIndex = -1;\n  }\n}\n\nfunction hasNoMatchingOption (value, options) {\n  return options.every(function (o) { return !looseEqual(o, value); })\n}\n\nfunction getValue (option) {\n  return '_value' in option\n    ? option._value\n    : option.value\n}\n\nfunction onCompositionStart (e) {\n  e.target.composing = true;\n}\n\nfunction onCompositionEnd (e) {\n  // prevent triggering an input event for no reason\n  if (!e.target.composing) { return }\n  e.target.composing = false;\n  trigger(e.target, 'input');\n}\n\nfunction trigger (el, type) {\n  var e = document.createEvent('HTMLEvents');\n  e.initEvent(type, true, true);\n  el.dispatchEvent(e);\n}\n\n/*  */\n\n// recursively search for possible transition defined inside the component root\nfunction locateNode (vnode) {\n  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)\n    ? locateNode(vnode.componentInstance._vnode)\n    : vnode\n}\n\nvar show = {\n  bind: function bind (el, ref, vnode) {\n    var value = ref.value;\n\n    vnode = locateNode(vnode);\n    var transition$$1 = vnode.data && vnode.data.transition;\n    var originalDisplay = el.__vOriginalDisplay =\n      el.style.display === 'none' ? '' : el.style.display;\n    if (value && transition$$1) {\n      vnode.data.show = true;\n      enter(vnode, function () {\n        el.style.display = originalDisplay;\n      });\n    } else {\n      el.style.display = value ? originalDisplay : 'none';\n    }\n  },\n\n  update: function update (el, ref, vnode) {\n    var value = ref.value;\n    var oldValue = ref.oldValue;\n\n    /* istanbul ignore if */\n    if (!value === !oldValue) { return }\n    vnode = locateNode(vnode);\n    var transition$$1 = vnode.data && vnode.data.transition;\n    if (transition$$1) {\n      vnode.data.show = true;\n      if (value) {\n        enter(vnode, function () {\n          el.style.display = el.__vOriginalDisplay;\n        });\n      } else {\n        leave(vnode, function () {\n          el.style.display = 'none';\n        });\n      }\n    } else {\n      el.style.display = value ? el.__vOriginalDisplay : 'none';\n    }\n  },\n\n  unbind: function unbind (\n    el,\n    binding,\n    vnode,\n    oldVnode,\n    isDestroy\n  ) {\n    if (!isDestroy) {\n      el.style.display = el.__vOriginalDisplay;\n    }\n  }\n}\n\nvar platformDirectives = {\n  model: directive,\n  show: show\n}\n\n/*  */\n\n// Provides transition support for a single element/component.\n// supports transition mode (out-in / in-out)\n\nvar transitionProps = {\n  name: String,\n  appear: Boolean,\n  css: Boolean,\n  mode: String,\n  type: String,\n  enterClass: String,\n  leaveClass: String,\n  enterToClass: String,\n  leaveToClass: String,\n  enterActiveClass: String,\n  leaveActiveClass: String,\n  appearClass: String,\n  appearActiveClass: String,\n  appearToClass: String,\n  duration: [Number, String, Object]\n};\n\n// in case the child is also an abstract component, e.g. <keep-alive>\n// we want to recursively retrieve the real component to be rendered\nfunction getRealChild (vnode) {\n  var compOptions = vnode && vnode.componentOptions;\n  if (compOptions && compOptions.Ctor.options.abstract) {\n    return getRealChild(getFirstComponentChild(compOptions.children))\n  } else {\n    return vnode\n  }\n}\n\nfunction extractTransitionData (comp) {\n  var data = {};\n  var options = comp.$options;\n  // props\n  for (var key in options.propsData) {\n    data[key] = comp[key];\n  }\n  // events.\n  // extract listeners and pass them directly to the transition methods\n  var listeners = options._parentListeners;\n  for (var key$1 in listeners) {\n    data[camelize(key$1)] = listeners[key$1];\n  }\n  return data\n}\n\nfunction placeholder (h, rawChild) {\n  if (/\\d-keep-alive$/.test(rawChild.tag)) {\n    return h('keep-alive', {\n      props: rawChild.componentOptions.propsData\n    })\n  }\n}\n\nfunction hasParentTransition (vnode) {\n  while ((vnode = vnode.parent)) {\n    if (vnode.data.transition) {\n      return true\n    }\n  }\n}\n\nfunction isSameChild (child, oldChild) {\n  return oldChild.key === child.key && oldChild.tag === child.tag\n}\n\nvar Transition = {\n  name: 'transition',\n  props: transitionProps,\n  abstract: true,\n\n  render: function render (h) {\n    var this$1 = this;\n\n    var children = this.$slots.default;\n    if (!children) {\n      return\n    }\n\n    // filter out text nodes (possible whitespaces)\n    children = children.filter(function (c) { return c.tag || isAsyncPlaceholder(c); });\n    /* istanbul ignore if */\n    if (!children.length) {\n      return\n    }\n\n    // warn multiple elements\n    if (\"development\" !== 'production' && children.length > 1) {\n      warn(\n        '<transition> can only be used on a single element. Use ' +\n        '<transition-group> for lists.',\n        this.$parent\n      );\n    }\n\n    var mode = this.mode;\n\n    // warn invalid mode\n    if (\"development\" !== 'production' &&\n      mode && mode !== 'in-out' && mode !== 'out-in'\n    ) {\n      warn(\n        'invalid <transition> mode: ' + mode,\n        this.$parent\n      );\n    }\n\n    var rawChild = children[0];\n\n    // if this is a component root node and the component's\n    // parent container node also has transition, skip.\n    if (hasParentTransition(this.$vnode)) {\n      return rawChild\n    }\n\n    // apply transition data to child\n    // use getRealChild() to ignore abstract components e.g. keep-alive\n    var child = getRealChild(rawChild);\n    /* istanbul ignore if */\n    if (!child) {\n      return rawChild\n    }\n\n    if (this._leaving) {\n      return placeholder(h, rawChild)\n    }\n\n    // ensure a key that is unique to the vnode type and to this transition\n    // component instance. This key will be used to remove pending leaving nodes\n    // during entering.\n    var id = \"__transition-\" + (this._uid) + \"-\";\n    child.key = child.key == null\n      ? child.isComment\n        ? id + 'comment'\n        : id + child.tag\n      : isPrimitive(child.key)\n        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)\n        : child.key;\n\n    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);\n    var oldRawChild = this._vnode;\n    var oldChild = getRealChild(oldRawChild);\n\n    // mark v-show\n    // so that the transition module can hand over the control to the directive\n    if (child.data.directives && child.data.directives.some(function (d) { return d.name === 'show'; })) {\n      child.data.show = true;\n    }\n\n    if (\n      oldChild &&\n      oldChild.data &&\n      !isSameChild(child, oldChild) &&\n      !isAsyncPlaceholder(oldChild) &&\n      // #6687 component root is a comment node\n      !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)\n    ) {\n      // replace old child transition data with fresh one\n      // important for dynamic transitions!\n      var oldData = oldChild.data.transition = extend({}, data);\n      // handle transition mode\n      if (mode === 'out-in') {\n        // return placeholder node and queue update when leave finishes\n        this._leaving = true;\n        mergeVNodeHook(oldData, 'afterLeave', function () {\n          this$1._leaving = false;\n          this$1.$forceUpdate();\n        });\n        return placeholder(h, rawChild)\n      } else if (mode === 'in-out') {\n        if (isAsyncPlaceholder(child)) {\n          return oldRawChild\n        }\n        var delayedLeave;\n        var performLeave = function () { delayedLeave(); };\n        mergeVNodeHook(data, 'afterEnter', performLeave);\n        mergeVNodeHook(data, 'enterCancelled', performLeave);\n        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });\n      }\n    }\n\n    return rawChild\n  }\n}\n\n/*  */\n\n// Provides transition support for list items.\n// supports move transitions using the FLIP technique.\n\n// Because the vdom's children update algorithm is \"unstable\" - i.e.\n// it doesn't guarantee the relative positioning of removed elements,\n// we force transition-group to update its children into two passes:\n// in the first pass, we remove all nodes that need to be removed,\n// triggering their leaving transition; in the second pass, we insert/move\n// into the final desired state. This way in the second pass removed\n// nodes will remain where they should be.\n\nvar props = extend({\n  tag: String,\n  moveClass: String\n}, transitionProps);\n\ndelete props.mode;\n\nvar TransitionGroup = {\n  props: props,\n\n  render: function render (h) {\n    var tag = this.tag || this.$vnode.data.tag || 'span';\n    var map = Object.create(null);\n    var prevChildren = this.prevChildren = this.children;\n    var rawChildren = this.$slots.default || [];\n    var children = this.children = [];\n    var transitionData = extractTransitionData(this);\n\n    for (var i = 0; i < rawChildren.length; i++) {\n      var c = rawChildren[i];\n      if (c.tag) {\n        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {\n          children.push(c);\n          map[c.key] = c\n          ;(c.data || (c.data = {})).transition = transitionData;\n        } else if (true) {\n          var opts = c.componentOptions;\n          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;\n          warn((\"<transition-group> children must be keyed: <\" + name + \">\"));\n        }\n      }\n    }\n\n    if (prevChildren) {\n      var kept = [];\n      var removed = [];\n      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {\n        var c$1 = prevChildren[i$1];\n        c$1.data.transition = transitionData;\n        c$1.data.pos = c$1.elm.getBoundingClientRect();\n        if (map[c$1.key]) {\n          kept.push(c$1);\n        } else {\n          removed.push(c$1);\n        }\n      }\n      this.kept = h(tag, null, kept);\n      this.removed = removed;\n    }\n\n    return h(tag, null, children)\n  },\n\n  beforeUpdate: function beforeUpdate () {\n    // force removing pass\n    this.__patch__(\n      this._vnode,\n      this.kept,\n      false, // hydrating\n      true // removeOnly (!important, avoids unnecessary moves)\n    );\n    this._vnode = this.kept;\n  },\n\n  updated: function updated () {\n    var children = this.prevChildren;\n    var moveClass = this.moveClass || ((this.name || 'v') + '-move');\n    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {\n      return\n    }\n\n    // we divide the work into three loops to avoid mixing DOM reads and writes\n    // in each iteration - which helps prevent layout thrashing.\n    children.forEach(callPendingCbs);\n    children.forEach(recordPosition);\n    children.forEach(applyTranslation);\n\n    // force reflow to put everything in position\n    // assign to this to avoid being removed in tree-shaking\n    // $flow-disable-line\n    this._reflow = document.body.offsetHeight;\n\n    children.forEach(function (c) {\n      if (c.data.moved) {\n        var el = c.elm;\n        var s = el.style;\n        addTransitionClass(el, moveClass);\n        s.transform = s.WebkitTransform = s.transitionDuration = '';\n        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {\n          if (!e || /transform$/.test(e.propertyName)) {\n            el.removeEventListener(transitionEndEvent, cb);\n            el._moveCb = null;\n            removeTransitionClass(el, moveClass);\n          }\n        });\n      }\n    });\n  },\n\n  methods: {\n    hasMove: function hasMove (el, moveClass) {\n      /* istanbul ignore if */\n      if (!hasTransition) {\n        return false\n      }\n      /* istanbul ignore if */\n      if (this._hasMove) {\n        return this._hasMove\n      }\n      // Detect whether an element with the move class applied has\n      // CSS transitions. Since the element may be inside an entering\n      // transition at this very moment, we make a clone of it and remove\n      // all other transition classes applied to ensure only the move class\n      // is applied.\n      var clone = el.cloneNode();\n      if (el._transitionClasses) {\n        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });\n      }\n      addClass(clone, moveClass);\n      clone.style.display = 'none';\n      this.$el.appendChild(clone);\n      var info = getTransitionInfo(clone);\n      this.$el.removeChild(clone);\n      return (this._hasMove = info.hasTransform)\n    }\n  }\n}\n\nfunction callPendingCbs (c) {\n  /* istanbul ignore if */\n  if (c.elm._moveCb) {\n    c.elm._moveCb();\n  }\n  /* istanbul ignore if */\n  if (c.elm._enterCb) {\n    c.elm._enterCb();\n  }\n}\n\nfunction recordPosition (c) {\n  c.data.newPos = c.elm.getBoundingClientRect();\n}\n\nfunction applyTranslation (c) {\n  var oldPos = c.data.pos;\n  var newPos = c.data.newPos;\n  var dx = oldPos.left - newPos.left;\n  var dy = oldPos.top - newPos.top;\n  if (dx || dy) {\n    c.data.moved = true;\n    var s = c.elm.style;\n    s.transform = s.WebkitTransform = \"translate(\" + dx + \"px,\" + dy + \"px)\";\n    s.transitionDuration = '0s';\n  }\n}\n\nvar platformComponents = {\n  Transition: Transition,\n  TransitionGroup: TransitionGroup\n}\n\n/*  */\n\n// install platform specific utils\nVue.config.mustUseProp = mustUseProp;\nVue.config.isReservedTag = isReservedTag;\nVue.config.isReservedAttr = isReservedAttr;\nVue.config.getTagNamespace = getTagNamespace;\nVue.config.isUnknownElement = isUnknownElement;\n\n// install platform runtime directives & components\nextend(Vue.options.directives, platformDirectives);\nextend(Vue.options.components, platformComponents);\n\n// install platform patch function\nVue.prototype.__patch__ = inBrowser ? patch : noop;\n\n// public mount method\nVue.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && inBrowser ? query(el) : undefined;\n  return mountComponent(this, el, hydrating)\n};\n\n// devtools global hook\n/* istanbul ignore next */\nif (inBrowser) {\n  setTimeout(function () {\n    if (config.devtools) {\n      if (devtools) {\n        devtools.emit('init', Vue);\n      } else if (\n        \"development\" !== 'production' &&\n        \"development\" !== 'test' &&\n        isChrome\n      ) {\n        console[console.info ? 'info' : 'log'](\n          'Download the Vue Devtools extension for a better development experience:\\n' +\n          'https://github.com/vuejs/vue-devtools'\n        );\n      }\n    }\n    if (\"development\" !== 'production' &&\n      \"development\" !== 'test' &&\n      config.productionTip !== false &&\n      typeof console !== 'undefined'\n    ) {\n      console[console.info ? 'info' : 'log'](\n        \"You are running Vue in development mode.\\n\" +\n        \"Make sure to turn on production mode when deploying for production.\\n\" +\n        \"See more tips at https://vuejs.org/guide/deployment.html\"\n      );\n    }\n  }, 0);\n}\n\n/*  */\n\nvar defaultTagRE = /\\{\\{((?:.|\\n)+?)\\}\\}/g;\nvar regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g;\n\nvar buildRegex = cached(function (delimiters) {\n  var open = delimiters[0].replace(regexEscapeRE, '\\\\$&');\n  var close = delimiters[1].replace(regexEscapeRE, '\\\\$&');\n  return new RegExp(open + '((?:.|\\\\n)+?)' + close, 'g')\n});\n\n\n\nfunction parseText (\n  text,\n  delimiters\n) {\n  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;\n  if (!tagRE.test(text)) {\n    return\n  }\n  var tokens = [];\n  var rawTokens = [];\n  var lastIndex = tagRE.lastIndex = 0;\n  var match, index, tokenValue;\n  while ((match = tagRE.exec(text))) {\n    index = match.index;\n    // push text token\n    if (index > lastIndex) {\n      rawTokens.push(tokenValue = text.slice(lastIndex, index));\n      tokens.push(JSON.stringify(tokenValue));\n    }\n    // tag token\n    var exp = parseFilters(match[1].trim());\n    tokens.push((\"_s(\" + exp + \")\"));\n    rawTokens.push({ '@binding': exp });\n    lastIndex = index + match[0].length;\n  }\n  if (lastIndex < text.length) {\n    rawTokens.push(tokenValue = text.slice(lastIndex));\n    tokens.push(JSON.stringify(tokenValue));\n  }\n  return {\n    expression: tokens.join('+'),\n    tokens: rawTokens\n  }\n}\n\n/*  */\n\nfunction transformNode (el, options) {\n  var warn = options.warn || baseWarn;\n  var staticClass = getAndRemoveAttr(el, 'class');\n  if (\"development\" !== 'production' && staticClass) {\n    var res = parseText(staticClass, options.delimiters);\n    if (res) {\n      warn(\n        \"class=\\\"\" + staticClass + \"\\\": \" +\n        'Interpolation inside attributes has been removed. ' +\n        'Use v-bind or the colon shorthand instead. For example, ' +\n        'instead of <div class=\"{{ val }}\">, use <div :class=\"val\">.'\n      );\n    }\n  }\n  if (staticClass) {\n    el.staticClass = JSON.stringify(staticClass);\n  }\n  var classBinding = getBindingAttr(el, 'class', false /* getStatic */);\n  if (classBinding) {\n    el.classBinding = classBinding;\n  }\n}\n\nfunction genData (el) {\n  var data = '';\n  if (el.staticClass) {\n    data += \"staticClass:\" + (el.staticClass) + \",\";\n  }\n  if (el.classBinding) {\n    data += \"class:\" + (el.classBinding) + \",\";\n  }\n  return data\n}\n\nvar klass$1 = {\n  staticKeys: ['staticClass'],\n  transformNode: transformNode,\n  genData: genData\n}\n\n/*  */\n\nfunction transformNode$1 (el, options) {\n  var warn = options.warn || baseWarn;\n  var staticStyle = getAndRemoveAttr(el, 'style');\n  if (staticStyle) {\n    /* istanbul ignore if */\n    if (true) {\n      var res = parseText(staticStyle, options.delimiters);\n      if (res) {\n        warn(\n          \"style=\\\"\" + staticStyle + \"\\\": \" +\n          'Interpolation inside attributes has been removed. ' +\n          'Use v-bind or the colon shorthand instead. For example, ' +\n          'instead of <div style=\"{{ val }}\">, use <div :style=\"val\">.'\n        );\n      }\n    }\n    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));\n  }\n\n  var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);\n  if (styleBinding) {\n    el.styleBinding = styleBinding;\n  }\n}\n\nfunction genData$1 (el) {\n  var data = '';\n  if (el.staticStyle) {\n    data += \"staticStyle:\" + (el.staticStyle) + \",\";\n  }\n  if (el.styleBinding) {\n    data += \"style:(\" + (el.styleBinding) + \"),\";\n  }\n  return data\n}\n\nvar style$1 = {\n  staticKeys: ['staticStyle'],\n  transformNode: transformNode$1,\n  genData: genData$1\n}\n\n/*  */\n\nvar decoder;\n\nvar he = {\n  decode: function decode (html) {\n    decoder = decoder || document.createElement('div');\n    decoder.innerHTML = html;\n    return decoder.textContent\n  }\n}\n\n/*  */\n\nvar isUnaryTag = makeMap(\n  'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +\n  'link,meta,param,source,track,wbr'\n);\n\n// Elements that you can, intentionally, leave open\n// (and which close themselves)\nvar canBeLeftOpenTag = makeMap(\n  'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'\n);\n\n// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3\n// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content\nvar isNonPhrasingTag = makeMap(\n  'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +\n  'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +\n  'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +\n  'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +\n  'title,tr,track'\n);\n\n/**\n * Not type-checking this file because it's mostly vendor code.\n */\n\n/*!\n * HTML Parser By John Resig (ejohn.org)\n * Modified by Juriy \"kangax\" Zaytsev\n * Original code by Erik Arvidsson, Mozilla Public License\n * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js\n */\n\n// Regular Expressions for parsing tags and attributes\nvar attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/;\n// could use https://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-QName\n// but for Vue templates we can enforce a simple charset\nvar ncname = '[a-zA-Z_][\\\\w\\\\-\\\\.]*';\nvar qnameCapture = \"((?:\" + ncname + \"\\\\:)?\" + ncname + \")\";\nvar startTagOpen = new RegExp((\"^<\" + qnameCapture));\nvar startTagClose = /^\\s*(\\/?)>/;\nvar endTag = new RegExp((\"^<\\\\/\" + qnameCapture + \"[^>]*>\"));\nvar doctype = /^<!DOCTYPE [^>]+>/i;\n// #7298: escape - to avoid being pased as HTML comment when inlined in page\nvar comment = /^<!\\--/;\nvar conditionalComment = /^<!\\[/;\n\nvar IS_REGEX_CAPTURING_BROKEN = false;\n'x'.replace(/x(.)?/g, function (m, g) {\n  IS_REGEX_CAPTURING_BROKEN = g === '';\n});\n\n// Special Elements (can contain anything)\nvar isPlainTextElement = makeMap('script,style,textarea', true);\nvar reCache = {};\n\nvar decodingMap = {\n  '&lt;': '<',\n  '&gt;': '>',\n  '&quot;': '\"',\n  '&amp;': '&',\n  '&#10;': '\\n',\n  '&#9;': '\\t'\n};\nvar encodedAttr = /&(?:lt|gt|quot|amp);/g;\nvar encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#10|#9);/g;\n\n// #5992\nvar isIgnoreNewlineTag = makeMap('pre,textarea', true);\nvar shouldIgnoreFirstNewline = function (tag, html) { return tag && isIgnoreNewlineTag(tag) && html[0] === '\\n'; };\n\nfunction decodeAttr (value, shouldDecodeNewlines) {\n  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;\n  return value.replace(re, function (match) { return decodingMap[match]; })\n}\n\nfunction parseHTML (html, options) {\n  var stack = [];\n  var expectHTML = options.expectHTML;\n  var isUnaryTag$$1 = options.isUnaryTag || no;\n  var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;\n  var index = 0;\n  var last, lastTag;\n  while (html) {\n    last = html;\n    // Make sure we're not in a plaintext content element like script/style\n    if (!lastTag || !isPlainTextElement(lastTag)) {\n      var textEnd = html.indexOf('<');\n      if (textEnd === 0) {\n        // Comment:\n        if (comment.test(html)) {\n          var commentEnd = html.indexOf('-->');\n\n          if (commentEnd >= 0) {\n            if (options.shouldKeepComment) {\n              options.comment(html.substring(4, commentEnd));\n            }\n            advance(commentEnd + 3);\n            continue\n          }\n        }\n\n        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment\n        if (conditionalComment.test(html)) {\n          var conditionalEnd = html.indexOf(']>');\n\n          if (conditionalEnd >= 0) {\n            advance(conditionalEnd + 2);\n            continue\n          }\n        }\n\n        // Doctype:\n        var doctypeMatch = html.match(doctype);\n        if (doctypeMatch) {\n          advance(doctypeMatch[0].length);\n          continue\n        }\n\n        // End tag:\n        var endTagMatch = html.match(endTag);\n        if (endTagMatch) {\n          var curIndex = index;\n          advance(endTagMatch[0].length);\n          parseEndTag(endTagMatch[1], curIndex, index);\n          continue\n        }\n\n        // Start tag:\n        var startTagMatch = parseStartTag();\n        if (startTagMatch) {\n          handleStartTag(startTagMatch);\n          if (shouldIgnoreFirstNewline(lastTag, html)) {\n            advance(1);\n          }\n          continue\n        }\n      }\n\n      var text = (void 0), rest = (void 0), next = (void 0);\n      if (textEnd >= 0) {\n        rest = html.slice(textEnd);\n        while (\n          !endTag.test(rest) &&\n          !startTagOpen.test(rest) &&\n          !comment.test(rest) &&\n          !conditionalComment.test(rest)\n        ) {\n          // < in plain text, be forgiving and treat it as text\n          next = rest.indexOf('<', 1);\n          if (next < 0) { break }\n          textEnd += next;\n          rest = html.slice(textEnd);\n        }\n        text = html.substring(0, textEnd);\n        advance(textEnd);\n      }\n\n      if (textEnd < 0) {\n        text = html;\n        html = '';\n      }\n\n      if (options.chars && text) {\n        options.chars(text);\n      }\n    } else {\n      var endTagLength = 0;\n      var stackedTag = lastTag.toLowerCase();\n      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\\\s\\\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));\n      var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {\n        endTagLength = endTag.length;\n        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {\n          text = text\n            .replace(/<!\\--([\\s\\S]*?)-->/g, '$1') // #7298\n            .replace(/<!\\[CDATA\\[([\\s\\S]*?)]]>/g, '$1');\n        }\n        if (shouldIgnoreFirstNewline(stackedTag, text)) {\n          text = text.slice(1);\n        }\n        if (options.chars) {\n          options.chars(text);\n        }\n        return ''\n      });\n      index += html.length - rest$1.length;\n      html = rest$1;\n      parseEndTag(stackedTag, index - endTagLength, index);\n    }\n\n    if (html === last) {\n      options.chars && options.chars(html);\n      if (\"development\" !== 'production' && !stack.length && options.warn) {\n        options.warn((\"Mal-formatted tag at end of template: \\\"\" + html + \"\\\"\"));\n      }\n      break\n    }\n  }\n\n  // Clean up any remaining tags\n  parseEndTag();\n\n  function advance (n) {\n    index += n;\n    html = html.substring(n);\n  }\n\n  function parseStartTag () {\n    var start = html.match(startTagOpen);\n    if (start) {\n      var match = {\n        tagName: start[1],\n        attrs: [],\n        start: index\n      };\n      advance(start[0].length);\n      var end, attr;\n      while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {\n        advance(attr[0].length);\n        match.attrs.push(attr);\n      }\n      if (end) {\n        match.unarySlash = end[1];\n        advance(end[0].length);\n        match.end = index;\n        return match\n      }\n    }\n  }\n\n  function handleStartTag (match) {\n    var tagName = match.tagName;\n    var unarySlash = match.unarySlash;\n\n    if (expectHTML) {\n      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {\n        parseEndTag(lastTag);\n      }\n      if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {\n        parseEndTag(tagName);\n      }\n    }\n\n    var unary = isUnaryTag$$1(tagName) || !!unarySlash;\n\n    var l = match.attrs.length;\n    var attrs = new Array(l);\n    for (var i = 0; i < l; i++) {\n      var args = match.attrs[i];\n      // hackish work around FF bug https://bugzilla.mozilla.org/show_bug.cgi?id=369778\n      if (IS_REGEX_CAPTURING_BROKEN && args[0].indexOf('\"\"') === -1) {\n        if (args[3] === '') { delete args[3]; }\n        if (args[4] === '') { delete args[4]; }\n        if (args[5] === '') { delete args[5]; }\n      }\n      var value = args[3] || args[4] || args[5] || '';\n      var shouldDecodeNewlines = tagName === 'a' && args[1] === 'href'\n        ? options.shouldDecodeNewlinesForHref\n        : options.shouldDecodeNewlines;\n      attrs[i] = {\n        name: args[1],\n        value: decodeAttr(value, shouldDecodeNewlines)\n      };\n    }\n\n    if (!unary) {\n      stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs });\n      lastTag = tagName;\n    }\n\n    if (options.start) {\n      options.start(tagName, attrs, unary, match.start, match.end);\n    }\n  }\n\n  function parseEndTag (tagName, start, end) {\n    var pos, lowerCasedTagName;\n    if (start == null) { start = index; }\n    if (end == null) { end = index; }\n\n    if (tagName) {\n      lowerCasedTagName = tagName.toLowerCase();\n    }\n\n    // Find the closest opened tag of the same type\n    if (tagName) {\n      for (pos = stack.length - 1; pos >= 0; pos--) {\n        if (stack[pos].lowerCasedTag === lowerCasedTagName) {\n          break\n        }\n      }\n    } else {\n      // If no tag name is provided, clean shop\n      pos = 0;\n    }\n\n    if (pos >= 0) {\n      // Close all the open elements, up the stack\n      for (var i = stack.length - 1; i >= pos; i--) {\n        if (\"development\" !== 'production' &&\n          (i > pos || !tagName) &&\n          options.warn\n        ) {\n          options.warn(\n            (\"tag <\" + (stack[i].tag) + \"> has no matching end tag.\")\n          );\n        }\n        if (options.end) {\n          options.end(stack[i].tag, start, end);\n        }\n      }\n\n      // Remove the open elements from the stack\n      stack.length = pos;\n      lastTag = pos && stack[pos - 1].tag;\n    } else if (lowerCasedTagName === 'br') {\n      if (options.start) {\n        options.start(tagName, [], true, start, end);\n      }\n    } else if (lowerCasedTagName === 'p') {\n      if (options.start) {\n        options.start(tagName, [], false, start, end);\n      }\n      if (options.end) {\n        options.end(tagName, start, end);\n      }\n    }\n  }\n}\n\n/*  */\n\nvar onRE = /^@|^v-on:/;\nvar dirRE = /^v-|^@|^:/;\nvar forAliasRE = /([^]*?)\\s+(?:in|of)\\s+([^]*)/;\nvar forIteratorRE = /,([^,\\}\\]]*)(?:,([^,\\}\\]]*))?$/;\nvar stripParensRE = /^\\(|\\)$/g;\n\nvar argRE = /:(.*)$/;\nvar bindRE = /^:|^v-bind:/;\nvar modifierRE = /\\.[^.]+/g;\n\nvar decodeHTMLCached = cached(he.decode);\n\n// configurable state\nvar warn$2;\nvar delimiters;\nvar transforms;\nvar preTransforms;\nvar postTransforms;\nvar platformIsPreTag;\nvar platformMustUseProp;\nvar platformGetTagNamespace;\n\n\n\nfunction createASTElement (\n  tag,\n  attrs,\n  parent\n) {\n  return {\n    type: 1,\n    tag: tag,\n    attrsList: attrs,\n    attrsMap: makeAttrsMap(attrs),\n    parent: parent,\n    children: []\n  }\n}\n\n/**\n * Convert HTML string to AST.\n */\nfunction parse (\n  template,\n  options\n) {\n  warn$2 = options.warn || baseWarn;\n\n  platformIsPreTag = options.isPreTag || no;\n  platformMustUseProp = options.mustUseProp || no;\n  platformGetTagNamespace = options.getTagNamespace || no;\n\n  transforms = pluckModuleFunction(options.modules, 'transformNode');\n  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');\n  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');\n\n  delimiters = options.delimiters;\n\n  var stack = [];\n  var preserveWhitespace = options.preserveWhitespace !== false;\n  var root;\n  var currentParent;\n  var inVPre = false;\n  var inPre = false;\n  var warned = false;\n\n  function warnOnce (msg) {\n    if (!warned) {\n      warned = true;\n      warn$2(msg);\n    }\n  }\n\n  function closeElement (element) {\n    // check pre state\n    if (element.pre) {\n      inVPre = false;\n    }\n    if (platformIsPreTag(element.tag)) {\n      inPre = false;\n    }\n    // apply post-transforms\n    for (var i = 0; i < postTransforms.length; i++) {\n      postTransforms[i](element, options);\n    }\n  }\n\n  parseHTML(template, {\n    warn: warn$2,\n    expectHTML: options.expectHTML,\n    isUnaryTag: options.isUnaryTag,\n    canBeLeftOpenTag: options.canBeLeftOpenTag,\n    shouldDecodeNewlines: options.shouldDecodeNewlines,\n    shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,\n    shouldKeepComment: options.comments,\n    start: function start (tag, attrs, unary) {\n      // check namespace.\n      // inherit parent ns if there is one\n      var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);\n\n      // handle IE svg bug\n      /* istanbul ignore if */\n      if (isIE && ns === 'svg') {\n        attrs = guardIESVGBug(attrs);\n      }\n\n      var element = createASTElement(tag, attrs, currentParent);\n      if (ns) {\n        element.ns = ns;\n      }\n\n      if (isForbiddenTag(element) && !isServerRendering()) {\n        element.forbidden = true;\n        \"development\" !== 'production' && warn$2(\n          'Templates should only be responsible for mapping the state to the ' +\n          'UI. Avoid placing tags with side-effects in your templates, such as ' +\n          \"<\" + tag + \">\" + ', as they will not be parsed.'\n        );\n      }\n\n      // apply pre-transforms\n      for (var i = 0; i < preTransforms.length; i++) {\n        element = preTransforms[i](element, options) || element;\n      }\n\n      if (!inVPre) {\n        processPre(element);\n        if (element.pre) {\n          inVPre = true;\n        }\n      }\n      if (platformIsPreTag(element.tag)) {\n        inPre = true;\n      }\n      if (inVPre) {\n        processRawAttrs(element);\n      } else if (!element.processed) {\n        // structural directives\n        processFor(element);\n        processIf(element);\n        processOnce(element);\n        // element-scope stuff\n        processElement(element, options);\n      }\n\n      function checkRootConstraints (el) {\n        if (true) {\n          if (el.tag === 'slot' || el.tag === 'template') {\n            warnOnce(\n              \"Cannot use <\" + (el.tag) + \"> as component root element because it may \" +\n              'contain multiple nodes.'\n            );\n          }\n          if (el.attrsMap.hasOwnProperty('v-for')) {\n            warnOnce(\n              'Cannot use v-for on stateful component root element because ' +\n              'it renders multiple elements.'\n            );\n          }\n        }\n      }\n\n      // tree management\n      if (!root) {\n        root = element;\n        checkRootConstraints(root);\n      } else if (!stack.length) {\n        // allow root elements with v-if, v-else-if and v-else\n        if (root.if && (element.elseif || element.else)) {\n          checkRootConstraints(element);\n          addIfCondition(root, {\n            exp: element.elseif,\n            block: element\n          });\n        } else if (true) {\n          warnOnce(\n            \"Component template should contain exactly one root element. \" +\n            \"If you are using v-if on multiple elements, \" +\n            \"use v-else-if to chain them instead.\"\n          );\n        }\n      }\n      if (currentParent && !element.forbidden) {\n        if (element.elseif || element.else) {\n          processIfConditions(element, currentParent);\n        } else if (element.slotScope) { // scoped slot\n          currentParent.plain = false;\n          var name = element.slotTarget || '\"default\"';(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;\n        } else {\n          currentParent.children.push(element);\n          element.parent = currentParent;\n        }\n      }\n      if (!unary) {\n        currentParent = element;\n        stack.push(element);\n      } else {\n        closeElement(element);\n      }\n    },\n\n    end: function end () {\n      // remove trailing whitespace\n      var element = stack[stack.length - 1];\n      var lastNode = element.children[element.children.length - 1];\n      if (lastNode && lastNode.type === 3 && lastNode.text === ' ' && !inPre) {\n        element.children.pop();\n      }\n      // pop stack\n      stack.length -= 1;\n      currentParent = stack[stack.length - 1];\n      closeElement(element);\n    },\n\n    chars: function chars (text) {\n      if (!currentParent) {\n        if (true) {\n          if (text === template) {\n            warnOnce(\n              'Component template requires a root element, rather than just text.'\n            );\n          } else if ((text = text.trim())) {\n            warnOnce(\n              (\"text \\\"\" + text + \"\\\" outside root element will be ignored.\")\n            );\n          }\n        }\n        return\n      }\n      // IE textarea placeholder bug\n      /* istanbul ignore if */\n      if (isIE &&\n        currentParent.tag === 'textarea' &&\n        currentParent.attrsMap.placeholder === text\n      ) {\n        return\n      }\n      var children = currentParent.children;\n      text = inPre || text.trim()\n        ? isTextTag(currentParent) ? text : decodeHTMLCached(text)\n        // only preserve whitespace if its not right after a starting tag\n        : preserveWhitespace && children.length ? ' ' : '';\n      if (text) {\n        var res;\n        if (!inVPre && text !== ' ' && (res = parseText(text, delimiters))) {\n          children.push({\n            type: 2,\n            expression: res.expression,\n            tokens: res.tokens,\n            text: text\n          });\n        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {\n          children.push({\n            type: 3,\n            text: text\n          });\n        }\n      }\n    },\n    comment: function comment (text) {\n      currentParent.children.push({\n        type: 3,\n        text: text,\n        isComment: true\n      });\n    }\n  });\n  return root\n}\n\nfunction processPre (el) {\n  if (getAndRemoveAttr(el, 'v-pre') != null) {\n    el.pre = true;\n  }\n}\n\nfunction processRawAttrs (el) {\n  var l = el.attrsList.length;\n  if (l) {\n    var attrs = el.attrs = new Array(l);\n    for (var i = 0; i < l; i++) {\n      attrs[i] = {\n        name: el.attrsList[i].name,\n        value: JSON.stringify(el.attrsList[i].value)\n      };\n    }\n  } else if (!el.pre) {\n    // non root node in pre blocks with no attributes\n    el.plain = true;\n  }\n}\n\nfunction processElement (element, options) {\n  processKey(element);\n\n  // determine whether this is a plain element after\n  // removing structural attributes\n  element.plain = !element.key && !element.attrsList.length;\n\n  processRef(element);\n  processSlot(element);\n  processComponent(element);\n  for (var i = 0; i < transforms.length; i++) {\n    element = transforms[i](element, options) || element;\n  }\n  processAttrs(element);\n}\n\nfunction processKey (el) {\n  var exp = getBindingAttr(el, 'key');\n  if (exp) {\n    if (\"development\" !== 'production' && el.tag === 'template') {\n      warn$2(\"<template> cannot be keyed. Place the key on real elements instead.\");\n    }\n    el.key = exp;\n  }\n}\n\nfunction processRef (el) {\n  var ref = getBindingAttr(el, 'ref');\n  if (ref) {\n    el.ref = ref;\n    el.refInFor = checkInFor(el);\n  }\n}\n\nfunction processFor (el) {\n  var exp;\n  if ((exp = getAndRemoveAttr(el, 'v-for'))) {\n    var res = parseFor(exp);\n    if (res) {\n      extend(el, res);\n    } else if (true) {\n      warn$2(\n        (\"Invalid v-for expression: \" + exp)\n      );\n    }\n  }\n}\n\n\n\nfunction parseFor (exp) {\n  var inMatch = exp.match(forAliasRE);\n  if (!inMatch) { return }\n  var res = {};\n  res.for = inMatch[2].trim();\n  var alias = inMatch[1].trim().replace(stripParensRE, '');\n  var iteratorMatch = alias.match(forIteratorRE);\n  if (iteratorMatch) {\n    res.alias = alias.replace(forIteratorRE, '');\n    res.iterator1 = iteratorMatch[1].trim();\n    if (iteratorMatch[2]) {\n      res.iterator2 = iteratorMatch[2].trim();\n    }\n  } else {\n    res.alias = alias;\n  }\n  return res\n}\n\nfunction processIf (el) {\n  var exp = getAndRemoveAttr(el, 'v-if');\n  if (exp) {\n    el.if = exp;\n    addIfCondition(el, {\n      exp: exp,\n      block: el\n    });\n  } else {\n    if (getAndRemoveAttr(el, 'v-else') != null) {\n      el.else = true;\n    }\n    var elseif = getAndRemoveAttr(el, 'v-else-if');\n    if (elseif) {\n      el.elseif = elseif;\n    }\n  }\n}\n\nfunction processIfConditions (el, parent) {\n  var prev = findPrevElement(parent.children);\n  if (prev && prev.if) {\n    addIfCondition(prev, {\n      exp: el.elseif,\n      block: el\n    });\n  } else if (true) {\n    warn$2(\n      \"v-\" + (el.elseif ? ('else-if=\"' + el.elseif + '\"') : 'else') + \" \" +\n      \"used on element <\" + (el.tag) + \"> without corresponding v-if.\"\n    );\n  }\n}\n\nfunction findPrevElement (children) {\n  var i = children.length;\n  while (i--) {\n    if (children[i].type === 1) {\n      return children[i]\n    } else {\n      if (\"development\" !== 'production' && children[i].text !== ' ') {\n        warn$2(\n          \"text \\\"\" + (children[i].text.trim()) + \"\\\" between v-if and v-else(-if) \" +\n          \"will be ignored.\"\n        );\n      }\n      children.pop();\n    }\n  }\n}\n\nfunction addIfCondition (el, condition) {\n  if (!el.ifConditions) {\n    el.ifConditions = [];\n  }\n  el.ifConditions.push(condition);\n}\n\nfunction processOnce (el) {\n  var once$$1 = getAndRemoveAttr(el, 'v-once');\n  if (once$$1 != null) {\n    el.once = true;\n  }\n}\n\nfunction processSlot (el) {\n  if (el.tag === 'slot') {\n    el.slotName = getBindingAttr(el, 'name');\n    if (\"development\" !== 'production' && el.key) {\n      warn$2(\n        \"`key` does not work on <slot> because slots are abstract outlets \" +\n        \"and can possibly expand into multiple elements. \" +\n        \"Use the key on a wrapping element instead.\"\n      );\n    }\n  } else {\n    var slotScope;\n    if (el.tag === 'template') {\n      slotScope = getAndRemoveAttr(el, 'scope');\n      /* istanbul ignore if */\n      if (\"development\" !== 'production' && slotScope) {\n        warn$2(\n          \"the \\\"scope\\\" attribute for scoped slots have been deprecated and \" +\n          \"replaced by \\\"slot-scope\\\" since 2.5. The new \\\"slot-scope\\\" attribute \" +\n          \"can also be used on plain elements in addition to <template> to \" +\n          \"denote scoped slots.\",\n          true\n        );\n      }\n      el.slotScope = slotScope || getAndRemoveAttr(el, 'slot-scope');\n    } else if ((slotScope = getAndRemoveAttr(el, 'slot-scope'))) {\n      /* istanbul ignore if */\n      if (\"development\" !== 'production' && el.attrsMap['v-for']) {\n        warn$2(\n          \"Ambiguous combined usage of slot-scope and v-for on <\" + (el.tag) + \"> \" +\n          \"(v-for takes higher priority). Use a wrapper <template> for the \" +\n          \"scoped slot to make it clearer.\",\n          true\n        );\n      }\n      el.slotScope = slotScope;\n    }\n    var slotTarget = getBindingAttr(el, 'slot');\n    if (slotTarget) {\n      el.slotTarget = slotTarget === '\"\"' ? '\"default\"' : slotTarget;\n      // preserve slot as an attribute for native shadow DOM compat\n      // only for non-scoped slots.\n      if (el.tag !== 'template' && !el.slotScope) {\n        addAttr(el, 'slot', slotTarget);\n      }\n    }\n  }\n}\n\nfunction processComponent (el) {\n  var binding;\n  if ((binding = getBindingAttr(el, 'is'))) {\n    el.component = binding;\n  }\n  if (getAndRemoveAttr(el, 'inline-template') != null) {\n    el.inlineTemplate = true;\n  }\n}\n\nfunction processAttrs (el) {\n  var list = el.attrsList;\n  var i, l, name, rawName, value, modifiers, isProp;\n  for (i = 0, l = list.length; i < l; i++) {\n    name = rawName = list[i].name;\n    value = list[i].value;\n    if (dirRE.test(name)) {\n      // mark element as dynamic\n      el.hasBindings = true;\n      // modifiers\n      modifiers = parseModifiers(name);\n      if (modifiers) {\n        name = name.replace(modifierRE, '');\n      }\n      if (bindRE.test(name)) { // v-bind\n        name = name.replace(bindRE, '');\n        value = parseFilters(value);\n        isProp = false;\n        if (modifiers) {\n          if (modifiers.prop) {\n            isProp = true;\n            name = camelize(name);\n            if (name === 'innerHtml') { name = 'innerHTML'; }\n          }\n          if (modifiers.camel) {\n            name = camelize(name);\n          }\n          if (modifiers.sync) {\n            addHandler(\n              el,\n              (\"update:\" + (camelize(name))),\n              genAssignmentCode(value, \"$event\")\n            );\n          }\n        }\n        if (isProp || (\n          !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)\n        )) {\n          addProp(el, name, value);\n        } else {\n          addAttr(el, name, value);\n        }\n      } else if (onRE.test(name)) { // v-on\n        name = name.replace(onRE, '');\n        addHandler(el, name, value, modifiers, false, warn$2);\n      } else { // normal directives\n        name = name.replace(dirRE, '');\n        // parse arg\n        var argMatch = name.match(argRE);\n        var arg = argMatch && argMatch[1];\n        if (arg) {\n          name = name.slice(0, -(arg.length + 1));\n        }\n        addDirective(el, name, rawName, value, arg, modifiers);\n        if (\"development\" !== 'production' && name === 'model') {\n          checkForAliasModel(el, value);\n        }\n      }\n    } else {\n      // literal attribute\n      if (true) {\n        var res = parseText(value, delimiters);\n        if (res) {\n          warn$2(\n            name + \"=\\\"\" + value + \"\\\": \" +\n            'Interpolation inside attributes has been removed. ' +\n            'Use v-bind or the colon shorthand instead. For example, ' +\n            'instead of <div id=\"{{ val }}\">, use <div :id=\"val\">.'\n          );\n        }\n      }\n      addAttr(el, name, JSON.stringify(value));\n      // #6887 firefox doesn't update muted state if set via attribute\n      // even immediately after element creation\n      if (!el.component &&\n          name === 'muted' &&\n          platformMustUseProp(el.tag, el.attrsMap.type, name)) {\n        addProp(el, name, 'true');\n      }\n    }\n  }\n}\n\nfunction checkInFor (el) {\n  var parent = el;\n  while (parent) {\n    if (parent.for !== undefined) {\n      return true\n    }\n    parent = parent.parent;\n  }\n  return false\n}\n\nfunction parseModifiers (name) {\n  var match = name.match(modifierRE);\n  if (match) {\n    var ret = {};\n    match.forEach(function (m) { ret[m.slice(1)] = true; });\n    return ret\n  }\n}\n\nfunction makeAttrsMap (attrs) {\n  var map = {};\n  for (var i = 0, l = attrs.length; i < l; i++) {\n    if (\n      \"development\" !== 'production' &&\n      map[attrs[i].name] && !isIE && !isEdge\n    ) {\n      warn$2('duplicate attribute: ' + attrs[i].name);\n    }\n    map[attrs[i].name] = attrs[i].value;\n  }\n  return map\n}\n\n// for script (e.g. type=\"x/template\") or style, do not decode content\nfunction isTextTag (el) {\n  return el.tag === 'script' || el.tag === 'style'\n}\n\nfunction isForbiddenTag (el) {\n  return (\n    el.tag === 'style' ||\n    (el.tag === 'script' && (\n      !el.attrsMap.type ||\n      el.attrsMap.type === 'text/javascript'\n    ))\n  )\n}\n\nvar ieNSBug = /^xmlns:NS\\d+/;\nvar ieNSPrefix = /^NS\\d+:/;\n\n/* istanbul ignore next */\nfunction guardIESVGBug (attrs) {\n  var res = [];\n  for (var i = 0; i < attrs.length; i++) {\n    var attr = attrs[i];\n    if (!ieNSBug.test(attr.name)) {\n      attr.name = attr.name.replace(ieNSPrefix, '');\n      res.push(attr);\n    }\n  }\n  return res\n}\n\nfunction checkForAliasModel (el, value) {\n  var _el = el;\n  while (_el) {\n    if (_el.for && _el.alias === value) {\n      warn$2(\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\n        \"You are binding v-model directly to a v-for iteration alias. \" +\n        \"This will not be able to modify the v-for source array because \" +\n        \"writing to the alias is like modifying a function local variable. \" +\n        \"Consider using an array of objects and use v-model on an object property instead.\"\n      );\n    }\n    _el = _el.parent;\n  }\n}\n\n/*  */\n\n/**\n * Expand input[v-model] with dyanmic type bindings into v-if-else chains\n * Turn this:\n *   <input v-model=\"data[type]\" :type=\"type\">\n * into this:\n *   <input v-if=\"type === 'checkbox'\" type=\"checkbox\" v-model=\"data[type]\">\n *   <input v-else-if=\"type === 'radio'\" type=\"radio\" v-model=\"data[type]\">\n *   <input v-else :type=\"type\" v-model=\"data[type]\">\n */\n\nfunction preTransformNode (el, options) {\n  if (el.tag === 'input') {\n    var map = el.attrsMap;\n    if (!map['v-model']) {\n      return\n    }\n\n    var typeBinding;\n    if (map[':type'] || map['v-bind:type']) {\n      typeBinding = getBindingAttr(el, 'type');\n    }\n    if (!map.type && !typeBinding && map['v-bind']) {\n      typeBinding = \"(\" + (map['v-bind']) + \").type\";\n    }\n\n    if (typeBinding) {\n      var ifCondition = getAndRemoveAttr(el, 'v-if', true);\n      var ifConditionExtra = ifCondition ? (\"&&(\" + ifCondition + \")\") : \"\";\n      var hasElse = getAndRemoveAttr(el, 'v-else', true) != null;\n      var elseIfCondition = getAndRemoveAttr(el, 'v-else-if', true);\n      // 1. checkbox\n      var branch0 = cloneASTElement(el);\n      // process for on the main node\n      processFor(branch0);\n      addRawAttr(branch0, 'type', 'checkbox');\n      processElement(branch0, options);\n      branch0.processed = true; // prevent it from double-processed\n      branch0.if = \"(\" + typeBinding + \")==='checkbox'\" + ifConditionExtra;\n      addIfCondition(branch0, {\n        exp: branch0.if,\n        block: branch0\n      });\n      // 2. add radio else-if condition\n      var branch1 = cloneASTElement(el);\n      getAndRemoveAttr(branch1, 'v-for', true);\n      addRawAttr(branch1, 'type', 'radio');\n      processElement(branch1, options);\n      addIfCondition(branch0, {\n        exp: \"(\" + typeBinding + \")==='radio'\" + ifConditionExtra,\n        block: branch1\n      });\n      // 3. other\n      var branch2 = cloneASTElement(el);\n      getAndRemoveAttr(branch2, 'v-for', true);\n      addRawAttr(branch2, ':type', typeBinding);\n      processElement(branch2, options);\n      addIfCondition(branch0, {\n        exp: ifCondition,\n        block: branch2\n      });\n\n      if (hasElse) {\n        branch0.else = true;\n      } else if (elseIfCondition) {\n        branch0.elseif = elseIfCondition;\n      }\n\n      return branch0\n    }\n  }\n}\n\nfunction cloneASTElement (el) {\n  return createASTElement(el.tag, el.attrsList.slice(), el.parent)\n}\n\nvar model$2 = {\n  preTransformNode: preTransformNode\n}\n\nvar modules$1 = [\n  klass$1,\n  style$1,\n  model$2\n]\n\n/*  */\n\nfunction text (el, dir) {\n  if (dir.value) {\n    addProp(el, 'textContent', (\"_s(\" + (dir.value) + \")\"));\n  }\n}\n\n/*  */\n\nfunction html (el, dir) {\n  if (dir.value) {\n    addProp(el, 'innerHTML', (\"_s(\" + (dir.value) + \")\"));\n  }\n}\n\nvar directives$1 = {\n  model: model,\n  text: text,\n  html: html\n}\n\n/*  */\n\nvar baseOptions = {\n  expectHTML: true,\n  modules: modules$1,\n  directives: directives$1,\n  isPreTag: isPreTag,\n  isUnaryTag: isUnaryTag,\n  mustUseProp: mustUseProp,\n  canBeLeftOpenTag: canBeLeftOpenTag,\n  isReservedTag: isReservedTag,\n  getTagNamespace: getTagNamespace,\n  staticKeys: genStaticKeys(modules$1)\n};\n\n/*  */\n\nvar isStaticKey;\nvar isPlatformReservedTag;\n\nvar genStaticKeysCached = cached(genStaticKeys$1);\n\n/**\n * Goal of the optimizer: walk the generated template AST tree\n * and detect sub-trees that are purely static, i.e. parts of\n * the DOM that never needs to change.\n *\n * Once we detect these sub-trees, we can:\n *\n * 1. Hoist them into constants, so that we no longer need to\n *    create fresh nodes for them on each re-render;\n * 2. Completely skip them in the patching process.\n */\nfunction optimize (root, options) {\n  if (!root) { return }\n  isStaticKey = genStaticKeysCached(options.staticKeys || '');\n  isPlatformReservedTag = options.isReservedTag || no;\n  // first pass: mark all non-static nodes.\n  markStatic$1(root);\n  // second pass: mark static roots.\n  markStaticRoots(root, false);\n}\n\nfunction genStaticKeys$1 (keys) {\n  return makeMap(\n    'type,tag,attrsList,attrsMap,plain,parent,children,attrs' +\n    (keys ? ',' + keys : '')\n  )\n}\n\nfunction markStatic$1 (node) {\n  node.static = isStatic(node);\n  if (node.type === 1) {\n    // do not make component slot content static. this avoids\n    // 1. components not able to mutate slot nodes\n    // 2. static slot content fails for hot-reloading\n    if (\n      !isPlatformReservedTag(node.tag) &&\n      node.tag !== 'slot' &&\n      node.attrsMap['inline-template'] == null\n    ) {\n      return\n    }\n    for (var i = 0, l = node.children.length; i < l; i++) {\n      var child = node.children[i];\n      markStatic$1(child);\n      if (!child.static) {\n        node.static = false;\n      }\n    }\n    if (node.ifConditions) {\n      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {\n        var block = node.ifConditions[i$1].block;\n        markStatic$1(block);\n        if (!block.static) {\n          node.static = false;\n        }\n      }\n    }\n  }\n}\n\nfunction markStaticRoots (node, isInFor) {\n  if (node.type === 1) {\n    if (node.static || node.once) {\n      node.staticInFor = isInFor;\n    }\n    // For a node to qualify as a static root, it should have children that\n    // are not just static text. Otherwise the cost of hoisting out will\n    // outweigh the benefits and it's better off to just always render it fresh.\n    if (node.static && node.children.length && !(\n      node.children.length === 1 &&\n      node.children[0].type === 3\n    )) {\n      node.staticRoot = true;\n      return\n    } else {\n      node.staticRoot = false;\n    }\n    if (node.children) {\n      for (var i = 0, l = node.children.length; i < l; i++) {\n        markStaticRoots(node.children[i], isInFor || !!node.for);\n      }\n    }\n    if (node.ifConditions) {\n      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {\n        markStaticRoots(node.ifConditions[i$1].block, isInFor);\n      }\n    }\n  }\n}\n\nfunction isStatic (node) {\n  if (node.type === 2) { // expression\n    return false\n  }\n  if (node.type === 3) { // text\n    return true\n  }\n  return !!(node.pre || (\n    !node.hasBindings && // no dynamic bindings\n    !node.if && !node.for && // not v-if or v-for or v-else\n    !isBuiltInTag(node.tag) && // not a built-in\n    isPlatformReservedTag(node.tag) && // not a component\n    !isDirectChildOfTemplateFor(node) &&\n    Object.keys(node).every(isStaticKey)\n  ))\n}\n\nfunction isDirectChildOfTemplateFor (node) {\n  while (node.parent) {\n    node = node.parent;\n    if (node.tag !== 'template') {\n      return false\n    }\n    if (node.for) {\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\nvar fnExpRE = /^([\\w$_]+|\\([^)]*?\\))\\s*=>|^function\\s*\\(/;\nvar simplePathRE = /^[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['[^']*?']|\\[\"[^\"]*?\"]|\\[\\d+]|\\[[A-Za-z_$][\\w$]*])*$/;\n\n// KeyboardEvent.keyCode aliases\nvar keyCodes = {\n  esc: 27,\n  tab: 9,\n  enter: 13,\n  space: 32,\n  up: 38,\n  left: 37,\n  right: 39,\n  down: 40,\n  'delete': [8, 46]\n};\n\n// KeyboardEvent.key aliases\nvar keyNames = {\n  esc: 'Escape',\n  tab: 'Tab',\n  enter: 'Enter',\n  space: ' ',\n  // #7806: IE11 uses key names without `Arrow` prefix for arrow keys.\n  up: ['Up', 'ArrowUp'],\n  left: ['Left', 'ArrowLeft'],\n  right: ['Right', 'ArrowRight'],\n  down: ['Down', 'ArrowDown'],\n  'delete': ['Backspace', 'Delete']\n};\n\n// #4868: modifiers that prevent the execution of the listener\n// need to explicitly return null so that we can determine whether to remove\n// the listener for .once\nvar genGuard = function (condition) { return (\"if(\" + condition + \")return null;\"); };\n\nvar modifierCode = {\n  stop: '$event.stopPropagation();',\n  prevent: '$event.preventDefault();',\n  self: genGuard(\"$event.target !== $event.currentTarget\"),\n  ctrl: genGuard(\"!$event.ctrlKey\"),\n  shift: genGuard(\"!$event.shiftKey\"),\n  alt: genGuard(\"!$event.altKey\"),\n  meta: genGuard(\"!$event.metaKey\"),\n  left: genGuard(\"'button' in $event && $event.button !== 0\"),\n  middle: genGuard(\"'button' in $event && $event.button !== 1\"),\n  right: genGuard(\"'button' in $event && $event.button !== 2\")\n};\n\nfunction genHandlers (\n  events,\n  isNative,\n  warn\n) {\n  var res = isNative ? 'nativeOn:{' : 'on:{';\n  for (var name in events) {\n    res += \"\\\"\" + name + \"\\\":\" + (genHandler(name, events[name])) + \",\";\n  }\n  return res.slice(0, -1) + '}'\n}\n\nfunction genHandler (\n  name,\n  handler\n) {\n  if (!handler) {\n    return 'function(){}'\n  }\n\n  if (Array.isArray(handler)) {\n    return (\"[\" + (handler.map(function (handler) { return genHandler(name, handler); }).join(',')) + \"]\")\n  }\n\n  var isMethodPath = simplePathRE.test(handler.value);\n  var isFunctionExpression = fnExpRE.test(handler.value);\n\n  if (!handler.modifiers) {\n    if (isMethodPath || isFunctionExpression) {\n      return handler.value\n    }\n    /* istanbul ignore if */\n    return (\"function($event){\" + (handler.value) + \"}\") // inline statement\n  } else {\n    var code = '';\n    var genModifierCode = '';\n    var keys = [];\n    for (var key in handler.modifiers) {\n      if (modifierCode[key]) {\n        genModifierCode += modifierCode[key];\n        // left/right\n        if (keyCodes[key]) {\n          keys.push(key);\n        }\n      } else if (key === 'exact') {\n        var modifiers = (handler.modifiers);\n        genModifierCode += genGuard(\n          ['ctrl', 'shift', 'alt', 'meta']\n            .filter(function (keyModifier) { return !modifiers[keyModifier]; })\n            .map(function (keyModifier) { return (\"$event.\" + keyModifier + \"Key\"); })\n            .join('||')\n        );\n      } else {\n        keys.push(key);\n      }\n    }\n    if (keys.length) {\n      code += genKeyFilter(keys);\n    }\n    // Make sure modifiers like prevent and stop get executed after key filtering\n    if (genModifierCode) {\n      code += genModifierCode;\n    }\n    var handlerCode = isMethodPath\n      ? (\"return \" + (handler.value) + \"($event)\")\n      : isFunctionExpression\n        ? (\"return (\" + (handler.value) + \")($event)\")\n        : handler.value;\n    /* istanbul ignore if */\n    return (\"function($event){\" + code + handlerCode + \"}\")\n  }\n}\n\nfunction genKeyFilter (keys) {\n  return (\"if(!('button' in $event)&&\" + (keys.map(genFilterCode).join('&&')) + \")return null;\")\n}\n\nfunction genFilterCode (key) {\n  var keyVal = parseInt(key, 10);\n  if (keyVal) {\n    return (\"$event.keyCode!==\" + keyVal)\n  }\n  var keyCode = keyCodes[key];\n  var keyName = keyNames[key];\n  return (\n    \"_k($event.keyCode,\" +\n    (JSON.stringify(key)) + \",\" +\n    (JSON.stringify(keyCode)) + \",\" +\n    \"$event.key,\" +\n    \"\" + (JSON.stringify(keyName)) +\n    \")\"\n  )\n}\n\n/*  */\n\nfunction on (el, dir) {\n  if (\"development\" !== 'production' && dir.modifiers) {\n    warn(\"v-on without argument does not support modifiers.\");\n  }\n  el.wrapListeners = function (code) { return (\"_g(\" + code + \",\" + (dir.value) + \")\"); };\n}\n\n/*  */\n\nfunction bind$1 (el, dir) {\n  el.wrapData = function (code) {\n    return (\"_b(\" + code + \",'\" + (el.tag) + \"',\" + (dir.value) + \",\" + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + \")\")\n  };\n}\n\n/*  */\n\nvar baseDirectives = {\n  on: on,\n  bind: bind$1,\n  cloak: noop\n}\n\n/*  */\n\nvar CodegenState = function CodegenState (options) {\n  this.options = options;\n  this.warn = options.warn || baseWarn;\n  this.transforms = pluckModuleFunction(options.modules, 'transformCode');\n  this.dataGenFns = pluckModuleFunction(options.modules, 'genData');\n  this.directives = extend(extend({}, baseDirectives), options.directives);\n  var isReservedTag = options.isReservedTag || no;\n  this.maybeComponent = function (el) { return !isReservedTag(el.tag); };\n  this.onceId = 0;\n  this.staticRenderFns = [];\n};\n\n\n\nfunction generate (\n  ast,\n  options\n) {\n  var state = new CodegenState(options);\n  var code = ast ? genElement(ast, state) : '_c(\"div\")';\n  return {\n    render: (\"with(this){return \" + code + \"}\"),\n    staticRenderFns: state.staticRenderFns\n  }\n}\n\nfunction genElement (el, state) {\n  if (el.staticRoot && !el.staticProcessed) {\n    return genStatic(el, state)\n  } else if (el.once && !el.onceProcessed) {\n    return genOnce(el, state)\n  } else if (el.for && !el.forProcessed) {\n    return genFor(el, state)\n  } else if (el.if && !el.ifProcessed) {\n    return genIf(el, state)\n  } else if (el.tag === 'template' && !el.slotTarget) {\n    return genChildren(el, state) || 'void 0'\n  } else if (el.tag === 'slot') {\n    return genSlot(el, state)\n  } else {\n    // component or element\n    var code;\n    if (el.component) {\n      code = genComponent(el.component, el, state);\n    } else {\n      var data = el.plain ? undefined : genData$2(el, state);\n\n      var children = el.inlineTemplate ? null : genChildren(el, state, true);\n      code = \"_c('\" + (el.tag) + \"'\" + (data ? (\",\" + data) : '') + (children ? (\",\" + children) : '') + \")\";\n    }\n    // module transforms\n    for (var i = 0; i < state.transforms.length; i++) {\n      code = state.transforms[i](el, code);\n    }\n    return code\n  }\n}\n\n// hoist static sub-trees out\nfunction genStatic (el, state) {\n  el.staticProcessed = true;\n  state.staticRenderFns.push((\"with(this){return \" + (genElement(el, state)) + \"}\"));\n  return (\"_m(\" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + \")\")\n}\n\n// v-once\nfunction genOnce (el, state) {\n  el.onceProcessed = true;\n  if (el.if && !el.ifProcessed) {\n    return genIf(el, state)\n  } else if (el.staticInFor) {\n    var key = '';\n    var parent = el.parent;\n    while (parent) {\n      if (parent.for) {\n        key = parent.key;\n        break\n      }\n      parent = parent.parent;\n    }\n    if (!key) {\n      \"development\" !== 'production' && state.warn(\n        \"v-once can only be used inside v-for that is keyed. \"\n      );\n      return genElement(el, state)\n    }\n    return (\"_o(\" + (genElement(el, state)) + \",\" + (state.onceId++) + \",\" + key + \")\")\n  } else {\n    return genStatic(el, state)\n  }\n}\n\nfunction genIf (\n  el,\n  state,\n  altGen,\n  altEmpty\n) {\n  el.ifProcessed = true; // avoid recursion\n  return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty)\n}\n\nfunction genIfConditions (\n  conditions,\n  state,\n  altGen,\n  altEmpty\n) {\n  if (!conditions.length) {\n    return altEmpty || '_e()'\n  }\n\n  var condition = conditions.shift();\n  if (condition.exp) {\n    return (\"(\" + (condition.exp) + \")?\" + (genTernaryExp(condition.block)) + \":\" + (genIfConditions(conditions, state, altGen, altEmpty)))\n  } else {\n    return (\"\" + (genTernaryExp(condition.block)))\n  }\n\n  // v-if with v-once should generate code like (a)?_m(0):_m(1)\n  function genTernaryExp (el) {\n    return altGen\n      ? altGen(el, state)\n      : el.once\n        ? genOnce(el, state)\n        : genElement(el, state)\n  }\n}\n\nfunction genFor (\n  el,\n  state,\n  altGen,\n  altHelper\n) {\n  var exp = el.for;\n  var alias = el.alias;\n  var iterator1 = el.iterator1 ? (\",\" + (el.iterator1)) : '';\n  var iterator2 = el.iterator2 ? (\",\" + (el.iterator2)) : '';\n\n  if (\"development\" !== 'production' &&\n    state.maybeComponent(el) &&\n    el.tag !== 'slot' &&\n    el.tag !== 'template' &&\n    !el.key\n  ) {\n    state.warn(\n      \"<\" + (el.tag) + \" v-for=\\\"\" + alias + \" in \" + exp + \"\\\">: component lists rendered with \" +\n      \"v-for should have explicit keys. \" +\n      \"See https://vuejs.org/guide/list.html#key for more info.\",\n      true /* tip */\n    );\n  }\n\n  el.forProcessed = true; // avoid recursion\n  return (altHelper || '_l') + \"((\" + exp + \"),\" +\n    \"function(\" + alias + iterator1 + iterator2 + \"){\" +\n      \"return \" + ((altGen || genElement)(el, state)) +\n    '})'\n}\n\nfunction genData$2 (el, state) {\n  var data = '{';\n\n  // directives first.\n  // directives may mutate the el's other properties before they are generated.\n  var dirs = genDirectives(el, state);\n  if (dirs) { data += dirs + ','; }\n\n  // key\n  if (el.key) {\n    data += \"key:\" + (el.key) + \",\";\n  }\n  // ref\n  if (el.ref) {\n    data += \"ref:\" + (el.ref) + \",\";\n  }\n  if (el.refInFor) {\n    data += \"refInFor:true,\";\n  }\n  // pre\n  if (el.pre) {\n    data += \"pre:true,\";\n  }\n  // record original tag name for components using \"is\" attribute\n  if (el.component) {\n    data += \"tag:\\\"\" + (el.tag) + \"\\\",\";\n  }\n  // module data generation functions\n  for (var i = 0; i < state.dataGenFns.length; i++) {\n    data += state.dataGenFns[i](el);\n  }\n  // attributes\n  if (el.attrs) {\n    data += \"attrs:{\" + (genProps(el.attrs)) + \"},\";\n  }\n  // DOM props\n  if (el.props) {\n    data += \"domProps:{\" + (genProps(el.props)) + \"},\";\n  }\n  // event handlers\n  if (el.events) {\n    data += (genHandlers(el.events, false, state.warn)) + \",\";\n  }\n  if (el.nativeEvents) {\n    data += (genHandlers(el.nativeEvents, true, state.warn)) + \",\";\n  }\n  // slot target\n  // only for non-scoped slots\n  if (el.slotTarget && !el.slotScope) {\n    data += \"slot:\" + (el.slotTarget) + \",\";\n  }\n  // scoped slots\n  if (el.scopedSlots) {\n    data += (genScopedSlots(el.scopedSlots, state)) + \",\";\n  }\n  // component v-model\n  if (el.model) {\n    data += \"model:{value:\" + (el.model.value) + \",callback:\" + (el.model.callback) + \",expression:\" + (el.model.expression) + \"},\";\n  }\n  // inline-template\n  if (el.inlineTemplate) {\n    var inlineTemplate = genInlineTemplate(el, state);\n    if (inlineTemplate) {\n      data += inlineTemplate + \",\";\n    }\n  }\n  data = data.replace(/,$/, '') + '}';\n  // v-bind data wrap\n  if (el.wrapData) {\n    data = el.wrapData(data);\n  }\n  // v-on data wrap\n  if (el.wrapListeners) {\n    data = el.wrapListeners(data);\n  }\n  return data\n}\n\nfunction genDirectives (el, state) {\n  var dirs = el.directives;\n  if (!dirs) { return }\n  var res = 'directives:[';\n  var hasRuntime = false;\n  var i, l, dir, needRuntime;\n  for (i = 0, l = dirs.length; i < l; i++) {\n    dir = dirs[i];\n    needRuntime = true;\n    var gen = state.directives[dir.name];\n    if (gen) {\n      // compile-time directive that manipulates AST.\n      // returns true if it also needs a runtime counterpart.\n      needRuntime = !!gen(el, dir, state.warn);\n    }\n    if (needRuntime) {\n      hasRuntime = true;\n      res += \"{name:\\\"\" + (dir.name) + \"\\\",rawName:\\\"\" + (dir.rawName) + \"\\\"\" + (dir.value ? (\",value:(\" + (dir.value) + \"),expression:\" + (JSON.stringify(dir.value))) : '') + (dir.arg ? (\",arg:\\\"\" + (dir.arg) + \"\\\"\") : '') + (dir.modifiers ? (\",modifiers:\" + (JSON.stringify(dir.modifiers))) : '') + \"},\";\n    }\n  }\n  if (hasRuntime) {\n    return res.slice(0, -1) + ']'\n  }\n}\n\nfunction genInlineTemplate (el, state) {\n  var ast = el.children[0];\n  if (\"development\" !== 'production' && (\n    el.children.length !== 1 || ast.type !== 1\n  )) {\n    state.warn('Inline-template components must have exactly one child element.');\n  }\n  if (ast.type === 1) {\n    var inlineRenderFns = generate(ast, state.options);\n    return (\"inlineTemplate:{render:function(){\" + (inlineRenderFns.render) + \"},staticRenderFns:[\" + (inlineRenderFns.staticRenderFns.map(function (code) { return (\"function(){\" + code + \"}\"); }).join(',')) + \"]}\")\n  }\n}\n\nfunction genScopedSlots (\n  slots,\n  state\n) {\n  return (\"scopedSlots:_u([\" + (Object.keys(slots).map(function (key) {\n      return genScopedSlot(key, slots[key], state)\n    }).join(',')) + \"])\")\n}\n\nfunction genScopedSlot (\n  key,\n  el,\n  state\n) {\n  if (el.for && !el.forProcessed) {\n    return genForScopedSlot(key, el, state)\n  }\n  var fn = \"function(\" + (String(el.slotScope)) + \"){\" +\n    \"return \" + (el.tag === 'template'\n      ? el.if\n        ? ((el.if) + \"?\" + (genChildren(el, state) || 'undefined') + \":undefined\")\n        : genChildren(el, state) || 'undefined'\n      : genElement(el, state)) + \"}\";\n  return (\"{key:\" + key + \",fn:\" + fn + \"}\")\n}\n\nfunction genForScopedSlot (\n  key,\n  el,\n  state\n) {\n  var exp = el.for;\n  var alias = el.alias;\n  var iterator1 = el.iterator1 ? (\",\" + (el.iterator1)) : '';\n  var iterator2 = el.iterator2 ? (\",\" + (el.iterator2)) : '';\n  el.forProcessed = true; // avoid recursion\n  return \"_l((\" + exp + \"),\" +\n    \"function(\" + alias + iterator1 + iterator2 + \"){\" +\n      \"return \" + (genScopedSlot(key, el, state)) +\n    '})'\n}\n\nfunction genChildren (\n  el,\n  state,\n  checkSkip,\n  altGenElement,\n  altGenNode\n) {\n  var children = el.children;\n  if (children.length) {\n    var el$1 = children[0];\n    // optimize single v-for\n    if (children.length === 1 &&\n      el$1.for &&\n      el$1.tag !== 'template' &&\n      el$1.tag !== 'slot'\n    ) {\n      return (altGenElement || genElement)(el$1, state)\n    }\n    var normalizationType = checkSkip\n      ? getNormalizationType(children, state.maybeComponent)\n      : 0;\n    var gen = altGenNode || genNode;\n    return (\"[\" + (children.map(function (c) { return gen(c, state); }).join(',')) + \"]\" + (normalizationType ? (\",\" + normalizationType) : ''))\n  }\n}\n\n// determine the normalization needed for the children array.\n// 0: no normalization needed\n// 1: simple normalization needed (possible 1-level deep nested array)\n// 2: full normalization needed\nfunction getNormalizationType (\n  children,\n  maybeComponent\n) {\n  var res = 0;\n  for (var i = 0; i < children.length; i++) {\n    var el = children[i];\n    if (el.type !== 1) {\n      continue\n    }\n    if (needsNormalization(el) ||\n        (el.ifConditions && el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {\n      res = 2;\n      break\n    }\n    if (maybeComponent(el) ||\n        (el.ifConditions && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {\n      res = 1;\n    }\n  }\n  return res\n}\n\nfunction needsNormalization (el) {\n  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot'\n}\n\nfunction genNode (node, state) {\n  if (node.type === 1) {\n    return genElement(node, state)\n  } if (node.type === 3 && node.isComment) {\n    return genComment(node)\n  } else {\n    return genText(node)\n  }\n}\n\nfunction genText (text) {\n  return (\"_v(\" + (text.type === 2\n    ? text.expression // no need for () because already wrapped in _s()\n    : transformSpecialNewlines(JSON.stringify(text.text))) + \")\")\n}\n\nfunction genComment (comment) {\n  return (\"_e(\" + (JSON.stringify(comment.text)) + \")\")\n}\n\nfunction genSlot (el, state) {\n  var slotName = el.slotName || '\"default\"';\n  var children = genChildren(el, state);\n  var res = \"_t(\" + slotName + (children ? (\",\" + children) : '');\n  var attrs = el.attrs && (\"{\" + (el.attrs.map(function (a) { return ((camelize(a.name)) + \":\" + (a.value)); }).join(',')) + \"}\");\n  var bind$$1 = el.attrsMap['v-bind'];\n  if ((attrs || bind$$1) && !children) {\n    res += \",null\";\n  }\n  if (attrs) {\n    res += \",\" + attrs;\n  }\n  if (bind$$1) {\n    res += (attrs ? '' : ',null') + \",\" + bind$$1;\n  }\n  return res + ')'\n}\n\n// componentName is el.component, take it as argument to shun flow's pessimistic refinement\nfunction genComponent (\n  componentName,\n  el,\n  state\n) {\n  var children = el.inlineTemplate ? null : genChildren(el, state, true);\n  return (\"_c(\" + componentName + \",\" + (genData$2(el, state)) + (children ? (\",\" + children) : '') + \")\")\n}\n\nfunction genProps (props) {\n  var res = '';\n  for (var i = 0; i < props.length; i++) {\n    var prop = props[i];\n    /* istanbul ignore if */\n    {\n      res += \"\\\"\" + (prop.name) + \"\\\":\" + (transformSpecialNewlines(prop.value)) + \",\";\n    }\n  }\n  return res.slice(0, -1)\n}\n\n// #3895, #4268\nfunction transformSpecialNewlines (text) {\n  return text\n    .replace(/\\u2028/g, '\\\\u2028')\n    .replace(/\\u2029/g, '\\\\u2029')\n}\n\n/*  */\n\n// these keywords should not appear inside expressions, but operators like\n// typeof, instanceof and in are allowed\nvar prohibitedKeywordRE = new RegExp('\\\\b' + (\n  'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +\n  'super,throw,while,yield,delete,export,import,return,switch,default,' +\n  'extends,finally,continue,debugger,function,arguments'\n).split(',').join('\\\\b|\\\\b') + '\\\\b');\n\n// these unary operators should not be used as property/method names\nvar unaryOperatorsRE = new RegExp('\\\\b' + (\n  'delete,typeof,void'\n).split(',').join('\\\\s*\\\\([^\\\\)]*\\\\)|\\\\b') + '\\\\s*\\\\([^\\\\)]*\\\\)');\n\n// strip strings in expressions\nvar stripStringRE = /'(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\]|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`/g;\n\n// detect problematic expressions in a template\nfunction detectErrors (ast) {\n  var errors = [];\n  if (ast) {\n    checkNode(ast, errors);\n  }\n  return errors\n}\n\nfunction checkNode (node, errors) {\n  if (node.type === 1) {\n    for (var name in node.attrsMap) {\n      if (dirRE.test(name)) {\n        var value = node.attrsMap[name];\n        if (value) {\n          if (name === 'v-for') {\n            checkFor(node, (\"v-for=\\\"\" + value + \"\\\"\"), errors);\n          } else if (onRE.test(name)) {\n            checkEvent(value, (name + \"=\\\"\" + value + \"\\\"\"), errors);\n          } else {\n            checkExpression(value, (name + \"=\\\"\" + value + \"\\\"\"), errors);\n          }\n        }\n      }\n    }\n    if (node.children) {\n      for (var i = 0; i < node.children.length; i++) {\n        checkNode(node.children[i], errors);\n      }\n    }\n  } else if (node.type === 2) {\n    checkExpression(node.expression, node.text, errors);\n  }\n}\n\nfunction checkEvent (exp, text, errors) {\n  var stipped = exp.replace(stripStringRE, '');\n  var keywordMatch = stipped.match(unaryOperatorsRE);\n  if (keywordMatch && stipped.charAt(keywordMatch.index - 1) !== '$') {\n    errors.push(\n      \"avoid using JavaScript unary operator as property name: \" +\n      \"\\\"\" + (keywordMatch[0]) + \"\\\" in expression \" + (text.trim())\n    );\n  }\n  checkExpression(exp, text, errors);\n}\n\nfunction checkFor (node, text, errors) {\n  checkExpression(node.for || '', text, errors);\n  checkIdentifier(node.alias, 'v-for alias', text, errors);\n  checkIdentifier(node.iterator1, 'v-for iterator', text, errors);\n  checkIdentifier(node.iterator2, 'v-for iterator', text, errors);\n}\n\nfunction checkIdentifier (\n  ident,\n  type,\n  text,\n  errors\n) {\n  if (typeof ident === 'string') {\n    try {\n      new Function((\"var \" + ident + \"=_\"));\n    } catch (e) {\n      errors.push((\"invalid \" + type + \" \\\"\" + ident + \"\\\" in expression: \" + (text.trim())));\n    }\n  }\n}\n\nfunction checkExpression (exp, text, errors) {\n  try {\n    new Function((\"return \" + exp));\n  } catch (e) {\n    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);\n    if (keywordMatch) {\n      errors.push(\n        \"avoid using JavaScript keyword as property name: \" +\n        \"\\\"\" + (keywordMatch[0]) + \"\\\"\\n  Raw expression: \" + (text.trim())\n      );\n    } else {\n      errors.push(\n        \"invalid expression: \" + (e.message) + \" in\\n\\n\" +\n        \"    \" + exp + \"\\n\\n\" +\n        \"  Raw expression: \" + (text.trim()) + \"\\n\"\n      );\n    }\n  }\n}\n\n/*  */\n\nfunction createFunction (code, errors) {\n  try {\n    return new Function(code)\n  } catch (err) {\n    errors.push({ err: err, code: code });\n    return noop\n  }\n}\n\nfunction createCompileToFunctionFn (compile) {\n  var cache = Object.create(null);\n\n  return function compileToFunctions (\n    template,\n    options,\n    vm\n  ) {\n    options = extend({}, options);\n    var warn$$1 = options.warn || warn;\n    delete options.warn;\n\n    /* istanbul ignore if */\n    if (true) {\n      // detect possible CSP restriction\n      try {\n        new Function('return 1');\n      } catch (e) {\n        if (e.toString().match(/unsafe-eval|CSP/)) {\n          warn$$1(\n            'It seems you are using the standalone build of Vue.js in an ' +\n            'environment with Content Security Policy that prohibits unsafe-eval. ' +\n            'The template compiler cannot work in this environment. Consider ' +\n            'relaxing the policy to allow unsafe-eval or pre-compiling your ' +\n            'templates into render functions.'\n          );\n        }\n      }\n    }\n\n    // check cache\n    var key = options.delimiters\n      ? String(options.delimiters) + template\n      : template;\n    if (cache[key]) {\n      return cache[key]\n    }\n\n    // compile\n    var compiled = compile(template, options);\n\n    // check compilation errors/tips\n    if (true) {\n      if (compiled.errors && compiled.errors.length) {\n        warn$$1(\n          \"Error compiling template:\\n\\n\" + template + \"\\n\\n\" +\n          compiled.errors.map(function (e) { return (\"- \" + e); }).join('\\n') + '\\n',\n          vm\n        );\n      }\n      if (compiled.tips && compiled.tips.length) {\n        compiled.tips.forEach(function (msg) { return tip(msg, vm); });\n      }\n    }\n\n    // turn code into functions\n    var res = {};\n    var fnGenErrors = [];\n    res.render = createFunction(compiled.render, fnGenErrors);\n    res.staticRenderFns = compiled.staticRenderFns.map(function (code) {\n      return createFunction(code, fnGenErrors)\n    });\n\n    // check function generation errors.\n    // this should only happen if there is a bug in the compiler itself.\n    // mostly for codegen development use\n    /* istanbul ignore if */\n    if (true) {\n      if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {\n        warn$$1(\n          \"Failed to generate render function:\\n\\n\" +\n          fnGenErrors.map(function (ref) {\n            var err = ref.err;\n            var code = ref.code;\n\n            return ((err.toString()) + \" in\\n\\n\" + code + \"\\n\");\n        }).join('\\n'),\n          vm\n        );\n      }\n    }\n\n    return (cache[key] = res)\n  }\n}\n\n/*  */\n\nfunction createCompilerCreator (baseCompile) {\n  return function createCompiler (baseOptions) {\n    function compile (\n      template,\n      options\n    ) {\n      var finalOptions = Object.create(baseOptions);\n      var errors = [];\n      var tips = [];\n      finalOptions.warn = function (msg, tip) {\n        (tip ? tips : errors).push(msg);\n      };\n\n      if (options) {\n        // merge custom modules\n        if (options.modules) {\n          finalOptions.modules =\n            (baseOptions.modules || []).concat(options.modules);\n        }\n        // merge custom directives\n        if (options.directives) {\n          finalOptions.directives = extend(\n            Object.create(baseOptions.directives || null),\n            options.directives\n          );\n        }\n        // copy other options\n        for (var key in options) {\n          if (key !== 'modules' && key !== 'directives') {\n            finalOptions[key] = options[key];\n          }\n        }\n      }\n\n      var compiled = baseCompile(template, finalOptions);\n      if (true) {\n        errors.push.apply(errors, detectErrors(compiled.ast));\n      }\n      compiled.errors = errors;\n      compiled.tips = tips;\n      return compiled\n    }\n\n    return {\n      compile: compile,\n      compileToFunctions: createCompileToFunctionFn(compile)\n    }\n  }\n}\n\n/*  */\n\n// `createCompilerCreator` allows creating compilers that use alternative\n// parser/optimizer/codegen, e.g the SSR optimizing compiler.\n// Here we just export a default compiler using the default parts.\nvar createCompiler = createCompilerCreator(function baseCompile (\n  template,\n  options\n) {\n  var ast = parse(template.trim(), options);\n  if (options.optimize !== false) {\n    optimize(ast, options);\n  }\n  var code = generate(ast, options);\n  return {\n    ast: ast,\n    render: code.render,\n    staticRenderFns: code.staticRenderFns\n  }\n});\n\n/*  */\n\nvar ref$1 = createCompiler(baseOptions);\nvar compileToFunctions = ref$1.compileToFunctions;\n\n/*  */\n\n// check whether current browser encodes a char inside attribute values\nvar div;\nfunction getShouldDecode (href) {\n  div = div || document.createElement('div');\n  div.innerHTML = href ? \"<a href=\\\"\\n\\\"/>\" : \"<div a=\\\"\\n\\\"/>\";\n  return div.innerHTML.indexOf('&#10;') > 0\n}\n\n// #3663: IE encodes newlines inside attribute values while other browsers don't\nvar shouldDecodeNewlines = inBrowser ? getShouldDecode(false) : false;\n// #6828: chrome encodes content in a[href]\nvar shouldDecodeNewlinesForHref = inBrowser ? getShouldDecode(true) : false;\n\n/*  */\n\nvar idToTemplate = cached(function (id) {\n  var el = query(id);\n  return el && el.innerHTML\n});\n\nvar mount = Vue.prototype.$mount;\nVue.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && query(el);\n\n  /* istanbul ignore if */\n  if (el === document.body || el === document.documentElement) {\n    \"development\" !== 'production' && warn(\n      \"Do not mount Vue to <html> or <body> - mount to normal elements instead.\"\n    );\n    return this\n  }\n\n  var options = this.$options;\n  // resolve template/el and convert to render function\n  if (!options.render) {\n    var template = options.template;\n    if (template) {\n      if (typeof template === 'string') {\n        if (template.charAt(0) === '#') {\n          template = idToTemplate(template);\n          /* istanbul ignore if */\n          if (\"development\" !== 'production' && !template) {\n            warn(\n              (\"Template element not found or is empty: \" + (options.template)),\n              this\n            );\n          }\n        }\n      } else if (template.nodeType) {\n        template = template.innerHTML;\n      } else {\n        if (true) {\n          warn('invalid template option:' + template, this);\n        }\n        return this\n      }\n    } else if (el) {\n      template = getOuterHTML(el);\n    }\n    if (template) {\n      /* istanbul ignore if */\n      if (\"development\" !== 'production' && config.performance && mark) {\n        mark('compile');\n      }\n\n      var ref = compileToFunctions(template, {\n        shouldDecodeNewlines: shouldDecodeNewlines,\n        shouldDecodeNewlinesForHref: shouldDecodeNewlinesForHref,\n        delimiters: options.delimiters,\n        comments: options.comments\n      }, this);\n      var render = ref.render;\n      var staticRenderFns = ref.staticRenderFns;\n      options.render = render;\n      options.staticRenderFns = staticRenderFns;\n\n      /* istanbul ignore if */\n      if (\"development\" !== 'production' && config.performance && mark) {\n        mark('compile end');\n        measure((\"vue \" + (this._name) + \" compile\"), 'compile', 'compile end');\n      }\n    }\n  }\n  return mount.call(this, el, hydrating)\n};\n\n/**\n * Get outerHTML of elements, taking care\n * of SVG elements in IE as well.\n */\nfunction getOuterHTML (el) {\n  if (el.outerHTML) {\n    return el.outerHTML\n  } else {\n    var container = document.createElement('div');\n    container.appendChild(el.cloneNode(true));\n    return container.innerHTML\n  }\n}\n\nVue.compile = compileToFunctions;\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Vue);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../../timers-browserify/main.js */ \"./node_modules/timers-browserify/main.js\").setImmediate))\n\n//# sourceURL=webpack:///./node_modules/vue/dist/vue.esm.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n//# sourceURL=webpack:///(webpack)/buildin/global.js?");

/***/ }),

/***/ "./src/CsvDownload.vue":
/*!*****************************!*\
  !*** ./src/CsvDownload.vue ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _CsvDownload_vue_vue_type_template_id_ca751b76___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CsvDownload.vue?vue&type=template&id=ca751b76& */ \"./src/CsvDownload.vue?vue&type=template&id=ca751b76&\");\n/* harmony import */ var _CsvDownload_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CsvDownload.vue?vue&type=script&lang=js& */ \"./src/CsvDownload.vue?vue&type=script&lang=js&\");\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _CsvDownload_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _CsvDownload_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ \"./node_modules/vue-loader/lib/runtime/componentNormalizer.js\");\n\n\n\n\n\n/* normalize component */\n\nvar component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\n  _CsvDownload_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n  _CsvDownload_vue_vue_type_template_id_ca751b76___WEBPACK_IMPORTED_MODULE_0__[\"render\"],\n  _CsvDownload_vue_vue_type_template_id_ca751b76___WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"],\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var api; }\ncomponent.options.__file = \"src/CsvDownload.vue\"\n/* harmony default export */ __webpack_exports__[\"default\"] = (component.exports);\n\n//# sourceURL=webpack:///./src/CsvDownload.vue?");

/***/ }),

/***/ "./src/CsvDownload.vue?vue&type=script&lang=js&":
/*!******************************************************!*\
  !*** ./src/CsvDownload.vue?vue&type=script&lang=js& ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_lib_index_js_vue_loader_options_CsvDownload_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../node_modules/babel-loader/lib!../node_modules/vue-loader/lib??vue-loader-options!./CsvDownload.vue?vue&type=script&lang=js& */ \"./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/index.js?!./src/CsvDownload.vue?vue&type=script&lang=js&\");\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_lib_index_js_vue_loader_options_CsvDownload_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_babel_loader_lib_index_js_node_modules_vue_loader_lib_index_js_vue_loader_options_CsvDownload_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_lib_index_js_vue_loader_options_CsvDownload_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_lib_index_js_vue_loader_options_CsvDownload_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n /* harmony default export */ __webpack_exports__[\"default\"] = (_node_modules_babel_loader_lib_index_js_node_modules_vue_loader_lib_index_js_vue_loader_options_CsvDownload_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0___default.a); \n\n//# sourceURL=webpack:///./src/CsvDownload.vue?");

/***/ }),

/***/ "./src/CsvDownload.vue?vue&type=template&id=ca751b76&":
/*!************************************************************!*\
  !*** ./src/CsvDownload.vue?vue&type=template&id=ca751b76& ***!
  \************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_CsvDownload_vue_vue_type_template_id_ca751b76___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib??vue-loader-options!./CsvDownload.vue?vue&type=template&id=ca751b76& */ \"./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/CsvDownload.vue?vue&type=template&id=ca751b76&\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_CsvDownload_vue_vue_type_template_id_ca751b76___WEBPACK_IMPORTED_MODULE_0__[\"render\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"staticRenderFns\", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_CsvDownload_vue_vue_type_template_id_ca751b76___WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"]; });\n\n\n\n//# sourceURL=webpack:///./src/CsvDownload.vue?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _vue = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.esm.js\");\n\nvar _vue2 = _interopRequireDefault(_vue);\n\nvar _CsvDownload = __webpack_require__(/*! ./CsvDownload.vue */ \"./src/CsvDownload.vue\");\n\nvar _CsvDownload2 = _interopRequireDefault(_CsvDownload);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nnew _vue2.default({\n  components: {\n    CsvDownload: _CsvDownload2.default\n  },\n  el: '#app',\n  data: {\n    fields: ['nom', 'prenom', 'age', 'porte monnaie'],\n    data: [{\n      'nom': 'toto',\n      'prenom': 'tata',\n      'age': 1,\n      'porte monnaie': '4€'\n    }, {\n      'nom': 'gigo',\n      'prenom': 'itashi',\n      'age': 8,\n      'porte monnaie': '5€'\n    }, {\n      'nom': 'titi',\n      'prenom': 'michel',\n      'age': 90,\n      'porte monnaie': '10€'\n    }],\n    status: 'Ready to download :)'\n  },\n  methods: {\n    lauchCsv: function lauchCsv() {\n      document.getElementById('csv').click();\n    }\n  }\n});\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ })

/******/ });